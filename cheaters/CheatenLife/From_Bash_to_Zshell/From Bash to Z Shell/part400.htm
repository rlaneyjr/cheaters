<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Return Status</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part399.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part401.htm">Next &gt;</a></p><p class="s35" style="padding-left: 40pt;text-indent: 0pt;text-align: left;"><a name="bookmark752">Return Status</a></p><p style="padding-top: 5pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">A well-behaved <span class="s33">zsh </span>completion function returns true if it successfully added matches or false if it failed. This is not vital in a function like <span class="s33">_chown </span>but in a function like <span class="s33">_groups </span>that is going to be called from other completion functions, it can be important. Typically the return status is used to facilitate fallbacks where completion for one thing is tried and, if it fails to add any matches, something else is tried. The conventional way to get the return status right is to have a local variable named <span class="s33">ret </span>initialized to 1. Whenever another completion function is called, zero is assigned to <span class="s33">ret </span>if matches were added. The double ampersand notation we saw in the section “Condition Tests” in Chapter 13 comes in useful for doing that. At the end of the function, the <span class="s33">ret </span>variable is then used for the return status. If you don’t specify a return status in a shell function, the return status of the last command called is reused. So the <span class="s33">_groups </span>and <span class="s33">_users </span>functions consisting of just a call to <span class="s33">compadd </span>do not need any change. To demonstrate this scheme here, we’ll modify our <span class="s33">_chown </span>function:</p><p class="s33" style="padding-top: 6pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">#compdef chown</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s33" style="padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">local ret=1 local -a suf</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s33" style="padding-left: 40pt;text-indent: 0pt;text-align: left;">if (( CURRENT == 2 )); then</p><p class="s33" style="padding-top: 1pt;padding-left: 49pt;text-indent: 0pt;text-align: left;">if compset -P &#39;*[.:]&#39;; then</p><p class="s33" style="padding-top: 1pt;padding-left: 49pt;text-indent: 8pt;line-height: 115%;text-align: left;">_groups &amp;&amp; ret=0 else</p><p class="s33" style="padding-left: 58pt;text-indent: 0pt;line-height: 10pt;text-align: left;">compset  -S  &#39;[.:]*&#39;  ||  suf=(  -S  .  )</p><p class="s33" style="padding-top: 1pt;padding-left: 58pt;text-indent: 0pt;text-align: left;">_users &quot;$suf[@]&quot; &amp;&amp; ret=0</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 9pt;line-height: 115%;text-align: left;">fi else</p><p class="s33" style="padding-left: 49pt;text-indent: 0pt;line-height: 10pt;text-align: left;">_files &amp;&amp; ret=0</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">fi</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s33" style="padding-left: 40pt;text-indent: 0pt;text-align: left;">return ret</p><p style="padding-top: 8pt;padding-left: 58pt;text-indent: 0pt;text-align: left;">We’ve also made use of a variable for the suffix here because this shorter way of handling</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">compset -S <span class="p">is common.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="226" height="1" alt="image" src="Image_297.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s14" style="padding-top: 4pt;padding-left: 52pt;text-indent: -12pt;line-height: 108%;text-align: justify;">2. In actuality if you look at the <span class="s29">_groups </span>and <span class="s29">_users </span>functions that come with <span class="s29">zsh </span>you will see that they are defined to be used directly for many commands such as <span class="s29">groupdel </span>and <span class="s29">chsh</span>. There are other functions, how- ever, for which this is not so; <span class="s29">_signals </span>for example.</p><p class="s29" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark793"><span class="s27">382 </span></a>CHAPTER 15 <span class="s28">■ </span>W RIT ING COMP LET ION F UNCTI ON S</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part399.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part401.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
