<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Control Operators</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part340.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part342.htm">Next &gt;</a></p><p class="s18" style="padding-left: 42pt;text-indent: 0pt;text-align: left;"><a name="bookmark633">Control Operators</a></p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 115%;text-align: left;">There are a couple of short forms that you can use instead of an <span class="s33">if </span>statement. These use the AND (<span class="s33">&amp;&amp;</span>) and OR (<span class="s33">||</span>) control operators. If you connect two commands with <span class="s33">&amp;&amp; </span>or <span class="s33">||</span>, they are run in order in the same way as if they had been connected using a semicolon. The difference is that the exit status of the first command decides if the second command is to be run. So you could instead write</p><p class="s33" style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">grep -q word file &amp;&amp; echo file contained word</p><p class="s29" style="padding-top: 3pt;padding-left: 249pt;text-indent: 0pt;text-align: left;"><a name="bookmark669">CHAPTER 13 </a><span class="s28">■ </span>SCRIPTING AND FUNCTION S <span class="s27">313</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 114%;text-align: left;">The <span class="s33">|| </span>operator has the opposite effect. The second command becomes like the <span class="s33">else </span>part of an <span class="s33">if </span>condition. So:</p><p class="s33" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">grep -q word file || echo &quot;file didn&#39;t contain word&quot;</p><p style="padding-top: 7pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">To do this with an <span class="s33">if </span>statement, you would use the <span class="s33">! </span>operator,<span class="s43">1 </span>which negates the exit status of the following command:</p><p class="s33" style="padding-top: 7pt;padding-left: 53pt;text-indent: -13pt;line-height: 115%;text-align: left;">if ! grep -q word file ; then echo &quot;file didn&#39;t contain word&quot;</p><p class="s33" style="padding-left: 40pt;text-indent: 0pt;text-align: left;">fi</p><p style="padding-top: 8pt;padding-left: 58pt;text-indent: 0pt;text-align: left;">You can even combine the two forms if you want to consider the exit status of more than</p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">one command:</p><p class="s33" style="padding-top: 8pt;padding-left: 53pt;text-indent: -13pt;line-height: 115%;text-align: left;">if grep -q word file &amp;&amp; grep -q word otherfile; then echo files both contain word</p><p class="s33" style="padding-left: 40pt;text-indent: 0pt;text-align: left;">fi</p><p style="padding-top: 8pt;padding-left: 58pt;text-indent: 0pt;text-align: left;">Furthermore, several commands can be chained together with the <span class="s33">&amp;&amp; </span>and <span class="s33">|| </span>operators:</p><p class="s33" style="padding-top: 8pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">grep -q word file &amp;&amp; grep -q word otherfile &amp;&amp; echo files both contain word</p><p style="padding-top: 8pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: justify;">If you try mixing the two operators in a series, you may find that they don’t work in the way you expected. The two operators are actually left associative. To understand what we mean, try running this:</p><p class="s33" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">true || false &amp;&amp; echo hello</p><p style="padding-top: 8pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">You may have expected it to get no further than the <span class="s33">true </span>command because it is followed by <span class="s33">|| </span>but that is not the case: it goes on to execute the <span class="s33">echo </span>command. When handling the <span class="s33">&amp;&amp;</span>, it takes the result of the entire preceding sequence, which is true. The effect of the <span class="s33">|| </span>is merely to prevent the <span class="s33">false </span>command from running. Try the following to confirm that this is indeed the case:</p><p class="s33" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">echo true || echo &#39;not executed&#39; &amp;&amp; echo hello</p><p style="padding-top: 8pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">It is more common to use the two control operators combined in the opposite order with the <span class="s33">&amp;&amp; </span>appearing first. That provides a short way to write simple <span class="s33">if</span>-<span class="s33">then</span>-<span class="s33">else </span>statements.</p><p style="padding-left: 40pt;text-indent: 0pt;line-height: 10pt;text-align: left;">Consider the following example:</p><p class="s33" style="padding-top: 8pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">grep -q word file &amp;&amp; echo file contained word || echo &quot;file didn&#39;t contain word&quot;</p><p style="padding-top: 8pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">If <span class="s33">grep </span>finds the word in the file, it returns success and the first <span class="s33">echo </span>command will be executed. If <span class="s33">grep </span>returns false, the entire expression before the <span class="s33">|| </span>operator will evaluate to false and the second <span class="s33">echo </span>command will execute. In theory, it is possible that both <span class="s33">echo </span>commands would be executed: If for some reason the first <span class="s33">echo </span>command was to fail, the overall result of the expression before the <span class="s33">|| </span>operator would be false and the second <span class="s33">echo </span>command would be executed. So for the command in the middle, you need to stick to something that can be safely relied upon to return true.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="226" height="1" alt="image" src="Image_261.png"/></span></p><p class="s14" style="padding-top: 5pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">1. Be aware that the <span class="s29">! </span>operator isn’t available in some older <span class="s29">sh</span>-compatible shells.</p><p class="s29" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark670"><span class="s27">314 </span></a>CHAPTER 13 <span class="s28">■ </span>SCRIPTIN G AND FUN CTIONS </p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: justify;">Let’s see another example of this. Some systems have a <span class="s33">getent </span>command that allows infor- mation such as the list of known hosts to be retrieved. Traditionally, this information was available in files, <span class="s33">/etc/hosts </span>in the case of hostnames. The following defines a function, <span class="s33">findhost, </span>which searches for a particular hostname. It uses the result of the <span class="s33">which </span>command to decide whether to use <span class="s33">getent </span>or to look in <span class="s33">/etc/hosts</span>.</p><p class="s33" style="padding-top: 7pt;padding-left: 59pt;text-indent: -17pt;line-height: 115%;text-align: left;">which getent &gt;/dev/null &amp;&amp; findhost() { getent hosts $1; } || findhost() { grep $1 /etc/hosts; }</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part340.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part342.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
