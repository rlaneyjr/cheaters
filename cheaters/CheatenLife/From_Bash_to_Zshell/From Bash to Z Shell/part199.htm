<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Paths with Symbolic Links</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part198.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part200.htm">Next &gt;</a></p><p class="s18" style="padding-left: 40pt;text-indent: 0pt;text-align: left;"><a name="bookmark364">Paths with Symbolic Links</a></p><p style="padding-top: 5pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">If you have symbolic links pointing to directories, things can get quite complicated. The problem is that the directory you change to has a parent directory <span class="s33">..</span>, which is not the same as the directory where the link was. Suppose that a link <span class="s33">~/link </span>points to the directory <span class="s33">/tmp/there</span>, and you try to change to it:</p><p class="s33" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">% <b>mkdir /tmp/there</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">%  <b>ln  -s  /tmp/there  ~/link</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">% <b>cd ~/link</b></p><p style="padding-top: 8pt;padding-left: 40pt;text-indent: 18pt;line-height: 114%;text-align: left;">The shell will detect that the link is to a directory, so the <span class="s33">cd </span>succeeds—but what is the directory where you end up called, <span class="s33">~/link </span>or <span class="s33">/tmp/there</span>? If you run the shell command <span class="s33">pwd</span>, displaying the current directory, it will output <span class="s33">~/link</span>; and so if you execute <span class="s33">cd ..</span>, as that would lead you to believe, you arrive in <span class="s33">~</span>.</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 114%;text-align: left;">However, if you run <span class="s33">/bin/pwd </span>while you are in <span class="s33">~/link </span>it will show you <span class="s33">/tmp/there</span>. (<span class="s33">/bin/pwd </span>works just like the shell’s <span class="s33">pwd</span>, but isn’t part of the shell.)</p><p style="padding-left: 40pt;text-indent: 19pt;line-height: 114%;text-align: left;">The reason for this is that the shell tries to be clever with symbolic links so that you can <span class="s33">cd </span>down into a link and then <span class="s33">cd .. </span>back out of it. However, as far as the operating system, and everything outside the shell, is concerned, there <i>is </i>no directory <span class="s33">~/link</span>; you are in the directory</p><p class="s33" style="padding-left: 58pt;text-indent: -18pt;line-height: 114%;text-align: left;">/tmp/there<span class="p">. (Remember, </span>~/link <span class="p">is just a pointer as far as the operating system is concerned.) You can prevent </span>pwd <span class="p">from lying to you by including the option </span>-P <span class="p">(for physical):</span></p><p class="s33" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">% <b>cd ~/link</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">% <b>pwd</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">/home/pws/link</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">% <b>pwd -P</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">/tmp/there</p><p class="s29" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark393"><span class="s27">180 </span></a>CHAPTER 8 <span class="s28">■ </span>FILES AND DIRECTORIES </p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">Both <span class="s33">bash </span>and <span class="s33">zsh </span>have options so that the shell doesn’t try to lie to you in the first place; you need to turn on the option <span class="s33">chase_links </span>in <span class="s33">zsh</span>, and <span class="s33">physical </span>(using <span class="s33">set -o</span>) in <span class="s33">bash</span>. This will result in the following behavior:</p><p class="s33" style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">% <b>cd ~/link</b></p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">% <b>pwd</b></p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">/tmp/there</p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">Symbolic links to directories are very useful. You need to decide whether you prefer the convenience of special handling, or whether you prefer the shell to be honest.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part198.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part200.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
