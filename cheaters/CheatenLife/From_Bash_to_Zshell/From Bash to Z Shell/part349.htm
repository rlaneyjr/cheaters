<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Input and Output</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part348.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part350.htm">Next &gt;</a></p><h4 style="padding-top: 5pt;padding-left: 42pt;text-indent: 0pt;text-align: left;"><a name="bookmark641">Input and Output</a></h4><p style="padding-top: 6pt;padding-left: 42pt;text-indent: 0pt;line-height: 115%;text-align: left;">In the traditional view of a computer program, the program has some input coming into it, performs some processing on the input, and produces some output. For a program to be at all useful it needs to produce some form of output. Most of this chapter concentrates on the processing aspect of scripts, but in this section we will consider input and, to a lesser extent, output.</p><p class="s29" style="padding-top: 3pt;padding-left: 249pt;text-indent: 0pt;text-align: left;"><a name="bookmark679">CHAPTER 13 </a><span class="s28">■ </span>SCRIPTING AND FUNCTION S <span class="s27">323</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">Let’s begin this section by considering output. The output from a script can take many different forms: you can invoke an audio player to play sound files or output some text to a printer, or the “output” might take a more subtle form, such as rearranging some files on the filesystem. In this section, we look at just two of the more basic forms that output can take: printing text and returning an exit status from a script.</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: justify;">The input to a program can also take different forms. One of the more obvious ways that a script or function receives input is with arguments passed on the command line. We describe not only how to access these arguments but also how to solve common problems that occur when trying to interpret the arguments.</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">Another common way in which a script or function receives input is by reading lines of text. The text can come from a variety of sources. We look at how you can read text from a file and from the output of another command, and how to read text that is typed by the user. Once information has been read in, a script typically has to make sense of it. We demonstrate some powerful techniques for parsing the text and extracting meaningful parts of it.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="toc">&nbsp;</p><div class="toc"><a class="toc0" href="part350.htm">Writing Output</a><a class="toc0" href="part351.htm">Exit Statuses</a><a class="toc0" href="part352.htm">Positional Parameters</a><a class="toc1" href="part353.htm">Option Parsing</a><a class="toc0" href="part354.htm">Reading Input</a><a class="toc1" href="part355.htm">Backreferences</a><a class="toc1" href="part356.htm">Asking the User for Input</a></div><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part348.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part350.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
