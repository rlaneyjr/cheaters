<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Multiple Parts</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part402.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part404.htm">Next &gt;</a></p><p class="s35" style="padding-left: 40pt;text-indent: 0pt;text-align: left;"><a name="bookmark755">Multiple Parts</a></p><p style="padding-top: 5pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">To start, we’ll examine one of the simpler helper functions. When completing filenames, rather than add every filename on your system including the full path to them as matches, only files and directories in the current directory are completed. If a directory name is completed (or typed), further completion will generate matches from the contents of that directory. Sometimes, when completing something else, you will want completion to work in the same way. This occurs wherever you have a lot of possible words arranged in a hierarchy with a common separator between each level in the hierarchy. Examples of this include the names of newsgroups and the kernel parameters modified with <span class="s33">sysctl </span>on Linux and BSD.</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">As an example, we’ll look at completing files from a tar archive as arguments to the <span class="s33">tar </span>command. This is done for completion after, for example, <span class="s33">tar xvf foo.tar</span>. If the name of the archive file is in the second argument (<span class="s33">$words[3]</span>), we can get this list of files in the archive by running <span class="s33">tar tf $words[3]</span>. Having retrieved the list of files, we then have the complicated task of handling completion of the files one directory at a time. To simplify this task, we can use the <span class="s33">_multi_parts </span>function. To use <span class="s33">_multi_parts</span>, we first need to put the list of files in an array.</p><p class="s33" style="padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">_multi_parts <span class="p">can then be passed this array and the separator character as arguments, and it does everything else for you.</span></p><p class="s33" style="padding-top: 6pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">files=(  $(tar  tf  $words[3])  )</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">_multi_parts / files</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="504" height="1" alt="image" src="Image_298.png"/></span></p><p class="s21" style="padding-top: 4pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">■<span class="s23">Caution </span><span class="s19">The example above won’t work if you have files with spaces in their names. That’s not a limitation of</span></p><p class="s19" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;line-height: 119%;text-align: left;">_multi_parts but of our method of creating the files array. We’ll show how to deal with this situation in the next section.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="504" height="1" alt="image" src="Image_299.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part402.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part404.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
