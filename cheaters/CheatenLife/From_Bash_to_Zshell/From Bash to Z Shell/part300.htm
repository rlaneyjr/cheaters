<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Process Substitution</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part299.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part301.htm">Next &gt;</a></p><p class="s35" style="padding-left: 42pt;text-indent: 0pt;text-align: left;"><a name="bookmark551">Process Substitution</a></p><p class="s32" style="padding-top: 5pt;padding-left: 42pt;text-indent: 0pt;line-height: 115%;text-align: left;">Process substitution <span class="p">is a specialized form of command substitution. Like ordinary command substitution, special syntax is used to indicate a command to be executed. Unlike ordinary command substitution, what is substituted is not the output of the command. Instead, it’s a filename. There are three forms:</span></p><p style="padding-top: 7pt;padding-left: 67pt;text-indent: -10pt;line-height: 115%;text-align: justify;">•   <span class="s33">&lt;(</span><i>commands</i><span class="s33">)</span>: The <i>commands </i>are executed. The expression is replaced with the name of a file that can be read for the output of the commands.</p><p style="padding-top: 7pt;padding-left: 67pt;text-indent: -10pt;line-height: 115%;text-align: justify;">•   <span class="s33">&gt;(</span><i>commands</i><span class="s33">)</span>: The <i>commands </i>are executed and the expression is replaced by a filename, as before. However, this time the file is for writing: anything sent to it is used as input for the commands. The output of <i>commands </i>is not captured in any way.</p><p class="s33" style="padding-top: 7pt;padding-left: 67pt;text-indent: -10pt;line-height: 115%;text-align: justify;"><span class="p">•   </span>=(<span class="s32">commands</span>)<span class="p">: This works just the same as the </span>&lt;(<span class="s32">...</span>) <span class="p">form. The only difference is that the filename is guaranteed to be a regular file. The other two forms use special files.</span></p><p class="s33" style="padding-top: 7pt;padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">bash<span class="p">, </span>zsh<span class="p">, and </span>ksh93 <span class="p">all support the first two forms. The third form is a </span>zsh <span class="p">extension that is not available in the other shells. We’ll show examples of all three in order.</span></p><p class="s29" style="padding-top: 3pt;padding-left: 269pt;text-indent: 0pt;text-align: left;"><a name="bookmark570">CHAP TER 11 </a><span class="s28">■ </span>JO BS AND PROCESSES <span class="s27">269</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="toc">&nbsp;</p><div class="toc"><a class="toc0" href="part301.htm">The &lt;(…) Substitution</a><a class="toc0" href="part302.htm">The &gt;(…) Substitution</a><a class="toc0" href="part303.htm">The =(…) Substitution</a></div><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part299.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part301.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
