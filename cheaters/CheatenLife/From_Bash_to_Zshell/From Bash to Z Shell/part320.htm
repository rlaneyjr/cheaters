<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Numeric Variables and Arithmetic</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part319.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part321.htm">Next &gt;</a></p><h4 style="padding-left: 42pt;text-indent: 0pt;text-align: left;"><a name="bookmark585">Numeric Variables and Arithmetic</a></h4><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 115%;text-align: left;">In the past, to perform mathematical calculations from the command line, separate calculator programs such as <span class="s33">bc </span>were necessary. From shell scripts, the external <span class="s33">expr </span>command was typi- cally used (and still is where portability is an issue). <span class="s33">ksh88 </span>added the <span class="s33">let </span>built-in command to do calculations directly in the shell. For instance, the following example performs the calculation 3×4 and assigns the result to the variable named <span class="s33">product</span>:</p><p class="s33" style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">let product=&#39;3*4&#39;</p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">Although you can use <span class="s33">let</span>, the following syntax is preferred because it avoids the need for quoting:</p><p class="s33" style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">(( product=3*4 ))</p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">If the variable <span class="s33">product </span>didn’t exist before, it will be created with an integer type. While integer variables act in every way like a string variable, they are more efficient because no conversion back and forth between ASCII and binary representations takes place.</p><p style="padding-left: 41pt;text-indent: 18pt;line-height: 185%;text-align: left;">You can also declare integer variables with the <span class="s33">declare </span>built-in or (in <span class="s33">zsh</span>) with <span class="s33">integer</span>: <span class="s33">declare -i product</span></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;">or</p><p class="s33" style="padding-top: 8pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">integer product</p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">It is a good idea to use this for any variables you want to use in calculations. Calculations like <span class="s33">(( product=3*4 )) </span>will not change the type of <span class="s33">product</span>. This is worth remembering because its effect can be surprising when unforeseen. A declaration such as <span class="s33">local  product</span>, which we introduce in the section “Functions and Variable Scope” in Chapter 13, will create <span class="s33">product </span>as a string variable. It would then remain a string when used in calculations.</p><p style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">If you don’t want to assign the result of a calculation to a variable but want it to appear in place like a variable expansion, you can do that by adding <span class="s33">$ </span>before the opening parenthesis:</p><p class="s33" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">echo $(( 3 * 4 ))</p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">Arithmetic evaluation like this occurs in one or two other places. Array subscripts for example can be any mathematical expression. The syntax rules for mathematical expressions are a lot like those for the C programming language. For instance, variables are referred to by name without an initial <span class="s33">$</span>. So for example, let’s multiply the variable <span class="s33">i </span>by 3 when specifying an array index:</p><p class="s33" style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">zsh% <b>a=( one two three four )</b></p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">zsh% <b>integer i=1</b></p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">zsh% <b>echo ${a[ 3 * i ]}</b></p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">three</p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">The range of available mathematical operators supported by <span class="s33">bash </span>and <span class="s33">zsh </span>are shown in Table 12-1. They are the same as those available in C with the exception of <span class="s33">**</span>, the exponentia- tion operator, which C lacks.</p><p class="s29" style="padding-top: 3pt;padding-left: 314pt;text-indent: 0pt;text-align: left;"><a name="bookmark613">CHAPTER 12 </a><span class="s28">■ </span>VARIABLES <span class="s27">291</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s13" style="padding-left: 40pt;text-indent: 0pt;text-align: left;">Table 12-1. <span class="s32">Mathematical Operators Ordered from Highest to Lowest Precedence</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:40.1992pt" cellspacing="0"><tr style="height:46pt"><td style="width:104pt;border-top-style:solid;border-top-width:1pt"><p class="s58" style="padding-top: 2pt;text-indent: 0pt;text-align: left;">+ - ! ~ ++ --</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s58" style="text-indent: 0pt;text-align: left;">&lt;&lt; &gt;&gt;</p></td><td style="width:44pt;border-top-style:solid;border-top-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:232pt;border-top-style:solid;border-top-width:1pt"><p class="s57" style="padding-top: 3pt;padding-left: 7pt;text-indent: 0pt;line-height: 109%;text-align: left;">Unary plus and minus, logical NOT, bitwise NOT, incre- ment, decrement</p><p class="s57" style="padding-top: 7pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">Bitwise shift left, right</p></td></tr><tr style="height:18pt"><td style="width:104pt"><p class="s58" style="padding-top: 3pt;text-indent: 0pt;text-align: left;">&amp;</p></td><td style="width:44pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:232pt"><p class="s57" style="padding-top: 3pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">Bitwise AND</p></td></tr><tr style="height:18pt"><td style="width:104pt"><p class="s58" style="padding-top: 3pt;text-indent: 0pt;text-align: left;">^</p></td><td style="width:44pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:232pt"><p class="s57" style="padding-top: 3pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">Bitwise XOR</p></td></tr><tr style="height:18pt"><td style="width:104pt"><p class="s58" style="padding-top: 3pt;text-indent: 0pt;text-align: left;">|</p></td><td style="width:44pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:232pt"><p class="s57" style="padding-top: 3pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">Bitwise OR</p></td></tr><tr style="height:18pt"><td style="width:104pt"><p class="s58" style="padding-top: 3pt;text-indent: 0pt;text-align: left;">**</p></td><td style="width:44pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:232pt"><p class="s57" style="padding-top: 3pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">Exponentiation</p></td></tr><tr style="height:18pt"><td style="width:104pt"><p class="s58" style="padding-top: 3pt;text-indent: 0pt;text-align: left;">* / %</p></td><td style="width:44pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:232pt"><p class="s57" style="padding-top: 3pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">Multiplication, division, remainder</p></td></tr><tr style="height:18pt"><td style="width:104pt"><p class="s58" style="padding-top: 3pt;text-indent: 0pt;text-align: left;">+ -</p></td><td style="width:44pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:232pt"><p class="s57" style="padding-top: 3pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">Addition, subtraction</p></td></tr><tr style="height:18pt"><td style="width:104pt"><p class="s58" style="padding-top: 3pt;text-indent: 0pt;text-align: left;">&lt; &gt; &lt;= &gt;=</p></td><td style="width:44pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:232pt"><p class="s57" style="padding-top: 3pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">Comparison: less, greater, less or equal, greater or equal</p></td></tr><tr style="height:18pt"><td style="width:104pt"><p class="s58" style="padding-top: 3pt;text-indent: 0pt;text-align: left;">== !=</p></td><td style="width:44pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:232pt"><p class="s57" style="padding-top: 3pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">Comparison: equal, unequal</p></td></tr><tr style="height:18pt"><td style="width:104pt"><p class="s58" style="padding-top: 3pt;text-indent: 0pt;text-align: left;">&amp;&amp;</p></td><td style="width:44pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:232pt"><p class="s57" style="padding-top: 3pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">Logical AND</p></td></tr><tr style="height:18pt"><td style="width:104pt"><p class="s58" style="padding-top: 3pt;text-indent: 0pt;text-align: left;">|| ^^</p></td><td style="width:44pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:232pt"><p class="s57" style="padding-top: 3pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">Logical OR, XOR</p></td></tr><tr style="height:18pt"><td style="width:104pt"><p class="s70" style="padding-top: 3pt;text-indent: 0pt;text-align: left;">x<span class="s58">?</span>y<span class="s58">:</span>z</p></td><td style="width:44pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:232pt"><p class="s57" style="padding-top: 3pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">If <i>x </i>then <i>y </i>else <i>z</i></p></td></tr><tr style="height:34pt"><td style="width:104pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s58" style="padding-top: 3pt;text-indent: 0pt;text-align: left;">= += -= *= /= %= &gt;&gt;= &lt;&lt;=</p><p class="s58" style="padding-top: 6pt;text-indent: 0pt;text-align: left;">, <span class="s57">(comma)</span></p></td><td style="width:44pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s58" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">&amp;= ^= |=</p></td><td style="width:232pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s57" style="padding-top: 3pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">Assignment</p><p class="s57" style="padding-top: 6pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">Sequence separator</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="toc">&nbsp;</p><div class="toc"><a class="toc0" href="part321.htm">Number Bases</a><a class="toc0" href="part322.htm">Floating-Point Numbers</a></div><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part319.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part321.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
