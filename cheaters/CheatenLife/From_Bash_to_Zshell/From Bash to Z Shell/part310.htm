<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Lying About the Program Name</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part309.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part311.htm">Next &gt;</a></p><h4 style="padding-left: 42pt;text-indent: 0pt;text-align: left;"><a name="bookmark561">Lying About the Program Name</a></h4><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 115%;text-align: justify;">It’s an odd fact about Unix that the name of a program is not necessarily the same as the command you execute. The name is reported when you run the <span class="s33">ps </span>command, and is available inside the program as the first argument passed to it. (In the shell the substitution <span class="s33">$0 </span>tells you this.)</p><p class="s33" style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">zsh <span class="p">has a trick to allow you to set the program’s name to anything you like. Set the environ- ment variable </span>ARGV0 <span class="p">to the name you want just for that program. (The name is historical. It’s borrowed from the arguments to a program written in the C programming language.) Try this:</span></p><p class="s33" style="padding-top: 6pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">ARGV0=sh zsh</p><p style="padding-top: 8pt;padding-left: 42pt;text-indent: 18pt;line-height: 115%;text-align: left;">You’ll almost certainly find that <span class="s33">zsh </span>looks and behaves different from normal. That’s because it sees that it’s called <span class="s33">sh </span>and uses a completely different set of options, to make it more like a standard Bourne shell. We’ll say more about this in the section “Porting Scripts” in Chapter 13.</p><p style="padding-left: 60pt;text-indent: 0pt;line-height: 10pt;text-align: left;">If you use <span class="s33">ARGV0=rzsh </span>(or anything beginning with an “r”), <span class="s33">zsh </span>becomes a <i>restricted shell</i>.</p><p class="s40" style="padding-top: 3pt;padding-left: 115pt;text-indent: 0pt;text-align: center;">RESTRICTED SHELLS</p><p class="s40" style="padding-top: 3pt;padding-left: 115pt;text-indent: 0pt;text-align: center;">RESTRICTED SHELLS</p><p style="text-indent: 0pt;text-align: left;"/><p class="s40" style="padding-top: 3pt;padding-left: 115pt;text-indent: 0pt;text-align: center;">RESTRICTED SHELLS</p><p style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">We explain what that means in the sidebar “Restricted Shells.”</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s33" style="padding-top: 6pt;padding-left: 9pt;text-indent: 0pt;line-height: 115%;text-align: left;">Both bash and zsh as well as ksh support the idea of a restricted shell. Such a shell runs as normal, but certain features are turned off to make it harder for the user to do damage, whether deliberate or accidental, to the system.</p><p class="s33" style="padding-left: 9pt;text-indent: 0pt;line-height: 115%;text-align: left;">For example, if the user of a restricted shell tries to change directory, the message cd: restricted appears. Likewise, any attempt to run a command with a / will be rejected because external commands must be found by looking through the $PATH list.</p><p class="s33" style="padding-left: 9pt;text-indent: 0pt;line-height: 115%;text-align: left;">The shell will enter restricted mode if its name starts with an r. A standard way to arrange this is to make a symbolic link, for example:</p><p class="s33" style="padding-top: 7pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">ln -s /usr/local/bin/zsh /usr/local/bin/rzsh</p><p class="s33" style="padding-top: 8pt;padding-left: 9pt;text-indent: 0pt;line-height: 115%;text-align: left;">This example assumes that /usr/local/bin/zsh already exists. If your bash came in a package or prein- stalled, it’s possible there is already a link, rbash, to do this for you.</p><p class="s33" style="padding-left: 9pt;text-indent: 0pt;line-height: 115%;text-align: justify;">Setting up a restricted shell is difficult. You need to rewrite the start-up files to provide a limited $PATH, which includes only the commands you want the user to be able to run. However, shells are intrinsically so powerful you will also need to think about all the possible ways a user can get round the restrictions. This is not for the faint hearted; the proper use of restricted shells is beyond the scope of this book.</p><p class="s33" style="padding-top: 6pt;padding-left: 9pt;text-indent: 0pt;line-height: 115%;text-align: left;">Both bash and zsh as well as ksh support the idea of a restricted shell. Such a shell runs as normal, but certain features are turned off to make it harder for the user to do damage, whether deliberate or accidental, to the system.</p><p class="s33" style="padding-left: 9pt;text-indent: 0pt;line-height: 115%;text-align: left;">For example, if the user of a restricted shell tries to change directory, the message cd: restricted appears. Likewise, any attempt to run a command with a / will be rejected because external commands must be found by looking through the $PATH list.</p><p class="s33" style="padding-left: 9pt;text-indent: 0pt;line-height: 115%;text-align: left;">The shell will enter restricted mode if its name starts with an r. A standard way to arrange this is to make a symbolic link, for example:</p><p class="s33" style="padding-top: 7pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">ln -s /usr/local/bin/zsh /usr/local/bin/rzsh</p><p class="s33" style="padding-top: 8pt;padding-left: 9pt;text-indent: 0pt;line-height: 115%;text-align: left;">This example assumes that /usr/local/bin/zsh already exists. If your bash came in a package or prein- stalled, it’s possible there is already a link, rbash, to do this for you.</p><p class="s33" style="padding-left: 9pt;text-indent: 0pt;line-height: 115%;text-align: justify;">Setting up a restricted shell is difficult. You need to rewrite the start-up files to provide a limited $PATH, which includes only the commands you want the user to be able to run. However, shells are intrinsically so powerful you will also need to think about all the possible ways a user can get round the restrictions. This is not for the faint hearted; the proper use of restricted shells is beyond the scope of this book.</p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"/><p class="s33" style="padding-top: 6pt;padding-left: 9pt;text-indent: 0pt;line-height: 115%;text-align: left;">Both bash and zsh as well as ksh support the idea of a restricted shell. Such a shell runs as normal, but certain features are turned off to make it harder for the user to do damage, whether deliberate or accidental, to the system.</p><p class="s33" style="padding-left: 9pt;text-indent: 0pt;line-height: 115%;text-align: left;">For example, if the user of a restricted shell tries to change directory, the message cd: restricted appears. Likewise, any attempt to run a command with a / will be rejected because external commands must be found by looking through the $PATH list.</p><p class="s33" style="padding-left: 9pt;text-indent: 0pt;line-height: 115%;text-align: left;">The shell will enter restricted mode if its name starts with an r. A standard way to arrange this is to make a symbolic link, for example:</p><p class="s33" style="padding-top: 7pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">ln -s /usr/local/bin/zsh /usr/local/bin/rzsh</p><p class="s33" style="padding-top: 8pt;padding-left: 9pt;text-indent: 0pt;line-height: 115%;text-align: left;">This example assumes that /usr/local/bin/zsh already exists. If your bash came in a package or prein- stalled, it’s possible there is already a link, rbash, to do this for you.</p><p class="s33" style="padding-left: 9pt;text-indent: 0pt;line-height: 115%;text-align: justify;">Setting up a restricted shell is difficult. You need to rewrite the start-up files to provide a limited $PATH, which includes only the commands you want the user to be able to run. However, shells are intrinsically so powerful you will also need to think about all the possible ways a user can get round the restrictions. This is not for the faint hearted; the proper use of restricted shells is beyond the scope of this book.</p><p class="s29" style="padding-top: 3pt;padding-left: 269pt;text-indent: 0pt;text-align: left;"><a name="bookmark575">CHAP TER 11 </a><span class="s28">■ </span>JO BS AND PROCESSES <span class="s27">275</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">You can disguise the name of any command like this, but as you can see it may have side effects.</p><p class="s33" style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">bash <span class="p">doesn’t have a direct equivalent of </span>ARGV0<span class="p">, but it does have something similar. In the section “File Descriptors” in Chapter 8 we saw the </span>exec <span class="p">command and how to use it for manip- ulating file descriptors. </span>exec <span class="p">actually has another distinct use. It lets you run another command without creating a separate process for it. The result is that the new program replaces the shell. </span>bash <span class="p">adds an option to </span>exec <span class="p">that changes the program’s name. One use of </span>exec <span class="p">is if you have a system where you can’t change your shell. By putting the following in the </span>.bashrc <span class="p">file, it will replace itself with </span>zsh <span class="p">with a program name of </span>sh<span class="p">:</span></p><p class="s33" style="padding-top: 6pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">exec -a sh zsh</p><p class="s33" style="padding-top: 8pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">zsh <span class="p">has another feature used for lying about its name. With the </span>-Z <span class="p">option to </span>jobs<span class="p">, it is possible to change the name and arguments of </span>zsh <span class="p">after it has started running. The change affects what is seen in the output of the </span>ps<span class="p">. Its main use is to convey status information from scripts running in the background.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part309.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part311.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
