<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Quick Directory Changes with cdpath</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part65.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part67.htm">Next &gt;</a></p><h4 style="padding-left: 40pt;text-indent: 0pt;text-align: left;"><a name="bookmark126">Quick Directory Changes with cdpath</a></h4><p style="padding-top: 6pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: justify;">In these first three chapters, we’ve covered only a few of the most useful shell features. There are many more in this book’s next two parts. Let’s finish with a simple feature that’s also very handy: changing your current directory somewhere without typing a long pathname.</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">Many users, and sites, have “top-level” directories that group a collection of subdirectories into one place. For instance, a team of software developers might have a series of projects under the directory <span class="s33">/local/work</span>, each subdirectory named for the individual project:</p><p class="s29" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark140"><span class="s27">66 </span></a>CHAPTER 3 <span class="s28">■ </span>MORE SHELL FEATURES </p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s33" style="padding-left: 42pt;text-indent: 0pt;line-height: 115%;text-align: left;">/local/work/annie <span class="p">for the project code-named “annie”, </span>/local/work/bennie <span class="p">for the “bennie” project, and so on. Each of those projects may have their own subdirectories named </span>bin <span class="p">for programs, </span>src <span class="p">for source code, and so on.</span></p><p style="padding-left: 60pt;text-indent: 0pt;line-height: 10pt;text-align: left;">A programmer working in her home directory (say, <span class="s33">/u/jill</span>) may not want to type</p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;line-height: 115%;text-align: left;">cd /local/work/bennie <span class="p">(or, worse, </span>cd /local/work/bennie/src<span class="p">) each time she needs to work in one of the project directories. As we saw in the section “Building Pathnames by Completion” in Chapter 1, shells have filename completion to let you type parts of pathnames and complete them by pressing Tab. But shells also have </span>cdpath<span class="p">s: lists of common parent directories that the shell will check to find a subdirectory by name. For instance, if Jill has told her shell that she often wants to go to </span>/local/work/bennie<span class="p">, she may not need to type </span>cd  /local/work/bennie/src<span class="p">; instead, she simply types the end of the pathname: </span>cd  src<span class="p">, or maybe </span>cd  bennie/src<span class="p">; the shell finds the first matching pathname, tells her what it is, and takes her there.</span></p><p style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">To set this up, she needs to set the <span class="s33">CDPATH </span>shell variable on Bourne shells or the <span class="s33">cdpath </span>variable on C shells. This is a list of the parent directories where she works a lot of the time.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 42pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="504" height="1" alt="image" src="Image_091.png"/></span></p><p class="s21" style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;line-height: 114%;text-align: left;">■<span class="s23">Note </span><span class="s19">In Bourne-type shells, be sure to include your current directory in your CDPATH (as we’ll explain). Otherwise, you won’t be able to cd to subdirectories of your current directory. C shells automatically try the current directory before the cdpath, so you don’t need to include the current directory in your list.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 42pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="504" height="1" alt="image" src="Image_092.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 42pt;text-indent: 18pt;line-height: 115%;text-align: left;">For instance, if Jill often works under <span class="s33">/local/work/bennie </span>and also under <span class="s33">/u/jill/logs</span>, she could set this <span class="s33">CDPATH </span>in her Bourne-type or C-type shells:</p><p class="s33" style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">CDPATH=:/local/work/bennie:/u/jill/logs</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s33" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">set cdpath = (/local/work/bennie /u/jill/logs)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">Then, if she types <span class="s33">cd  foo</span>, the shell will first try to change to the subdirectory <span class="s33">foo </span>under the current directory. If there’s no such directory, it will try <span class="s33">cd  /local/work/bennie/foo </span>and <span class="s33"> cd /u/jill/logs/foo</span>. If the shell finds <span class="s33">foo </span>under some other directory (not the current directory), it will show the pathname; otherwise it will print an error.</p><p style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">The C shells’ <span class="s33">cdpath </span>list is separated by spaces. The Bourne shells’ <span class="s33">CDPATH </span>is separated by colons (<span class="s33">:</span>). In Bourne-type shells, you include the current directory by using either an empty pair of colons (like <span class="s33">::</span>) or by using a single colon at the start or end of the <span class="s33">CDPATH </span>string. (There’s a leading colon on our sample <span class="s33">CDPATH</span>.)</p><p style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">Although you can set <span class="s33">CDPATH </span>or <span class="s33">cdpath </span>from a shell prompt, you’ll usually set it in a shell startup file (explained in the section “Startup Files, Login and Interactive Shells” in Chapter 5). That makes it available to all shells, in all windows, each time you log in. Another way to get to an often-used directory is through a named directory, described in the section “The Directory Stack” in Chapter 8.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part65.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part67.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
