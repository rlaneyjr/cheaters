<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Labels</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part421.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part423.htm">Next &gt;</a></p><p class="s35" style="padding-left: 42pt;text-indent: 0pt;text-align: left;"><a name="bookmark774">Labels</a></p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 115%;text-align: left;">The <span class="s33">tag-order </span>style allows tags to be further subdivided using labels, so another loop is used to handle each label. If you need to call <span class="s33">compadd </span>more than once or call more than one function when generating matches for one of the tags, you need to worry about this looping over tag labels. For labels, a second inner loop is used, which makes things simpler but does actually limit what you can do with the <span class="s33">tag-order </span>style: labels only work relative to other labels for the same tag and not relative to other tags. Label loops are implemented using the <span class="s33">_next_labels </span>function. This example uses two calls to <span class="s33">_path_files </span>for each of files and directories:</p><p class="s33" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">if _requested files; then</p><p class="s33" style="padding-top: 1pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">while  _next_label  files  expl  &#39;local  file&#39;;  do</p><p class="s33" style="padding-top: 1pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">_path_files &quot;$expl[@]&quot; &amp;&amp; ret=0</p><p class="s33" style="padding-top: 1pt;padding-left: 50pt;text-indent: 8pt;line-height: 115%;text-align: left;">_path_files -S/ -r &#39;/&#39; &quot;$expl[@]&quot; -/ &amp;&amp; ret=0 done</p><p class="s33" style="padding-left: 41pt;text-indent: 0pt;line-height: 10pt;text-align: left;">fi</p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">That would go inside the tag loop. You can actually omit the <span class="s33">_requested </span>test if you are only completing for the one tag in the whole tag loop.</p><p style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">The final function in this family is <span class="s33">_all_labels</span>. It does for label loops what <span class="s33">_wanted </span>does for tag loops: wrapping it up into a single command.</p><p class="s33" style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">_all_labels <span class="p">is useful where you only need one call to </span>compadd <span class="p">or other completion function but want additional lines of code inside the </span>_requested <span class="p">test. Normally such code is put outside the tag loop entirely and run regardless of whether the particular tag is to be completed. In some situations, though, you might not want to do that. For example, this code appears in the completion function for </span>w3m<span class="p">:</span></p><p class="s33" style="padding-top: 7pt;padding-left: 50pt;text-indent: -9pt;line-height: 115%;text-align: left;">if  _requested  w3mhistory  &amp;&amp;  [[  -s  ~/.w3m/history  ]];  then w3mhistory=(  ${(f)&quot;$(&lt;~/.w3m/history)&quot;}  )</p><p class="s33" style="padding-left: 50pt;text-indent: 0pt;line-height: 10pt;text-align: left;">_all_labels w3mhistory expl &#39;url from history&#39; compadd -a w3mhistory</p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">fi</p><p style="padding-top: 8pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">It would be quite valid to build the <span class="s33">w3mhistory </span>array outside the tag loop and just use</p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;line-height: 115%;text-align: left;">_requested <span class="p">here, but it would then attempt to read the user’s </span>~/.w3m/history <span class="p">file even if they had disabled completion for this tag. Obviously putting code outside the whole tag loop can have a performance benefit because it is not run for every loop iteration. So you need to think about where you put such code.</span></p><p class="s29" style="padding-top: 3pt;padding-left: 223pt;text-indent: 0pt;text-align: left;"><a name="bookmark814">CHAPTER 15 </a><span class="s28">■ </span>W RIT ING COMP LET ION F UNCTI ON S <span class="s27">403</span></p><p style="padding-top: 24pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">There are a number of options that are common to this family of functions. The most useful is the <span class="s33">-V </span>option, which prevents the matches from being sorted. This is mainly useful when completing a range of numbers because the sorting is not done numerically. It can be combined with <span class="s33">-1 </span>or <span class="s33">-2 </span>to control removal of duplicates.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="504" height="1" alt="image" src="Image_314.png"/></span></p><p class="s21" style="padding-top: 4pt;padding-left: 40pt;text-indent: 0pt;line-height: 117%;text-align: justify;">■<span class="s23">Caution </span><span class="s19">Sometimes you will want to nest tag loops. This commonly occurs as a result of calling comple- tion functions that contain their own tag loop and in such cases no problems occur. You need to be careful if you try to nest tag loops within a single function. On exiting the inner tag loop, you will need to reinitialize the tags mechanism by calling _tags with the list of possible tags. This information is currently stored once for each function in the call stack and so is lost when initializing the inner loop. If in doubt use a second function.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="507" height="1" alt="image" src="Image_315.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part421.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part423.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
