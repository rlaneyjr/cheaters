<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Opening a Terminal and Choosing the Shell</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part69.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part71.htm">Next &gt;</a></p><p class="s35" style="padding-top: 4pt;padding-left: 40pt;text-indent: 0pt;text-align: left;"><a name="bookmark146">Opening a Terminal and Choosing the Shell</a></p><p style="padding-top: 5pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">Normally when you open a terminal emulator it starts your shell. By default, it uses the shell defined by you or your system administrator when your account was set up. (Cygwin is a little different. See the section “Getting Started with Cygwin” in Chapter 5.) This happens no matter which terminal emulator you use.</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">The other way of starting your shell is by going through a login procedure. That happens either from a <span class="s33">login </span>prompt at a console before the windowing system was started, or by logging in remotely to a system using one of the programs <span class="s33">telnet</span>, <span class="s33">rlogin </span>(you may be more familiar with the similar <span class="s33">rsh </span>or <span class="s33">remsh</span>), or <span class="s33">ssh</span>. We’ll use the first approach. It’s probably the more common, and it gives you more choices to make.</p><p class="s27" style="padding-top: 4pt;padding-left: 39pt;text-indent: 0pt;text-align: right;">71</p><p class="s29" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark187"><span class="s27">72 </span></a>CHAPTER 4 <span class="s28">■ </span>EN TERING AND ED ITING THE CO MMAND LINE </p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 42pt;text-indent: 17pt;line-height: 115%;text-align: left;">In the “old days,” there was only one terminal emulator for the X Window System, <span class="s33">xterm</span>. It’s still there, it still works, and it’s still a good choice. In fact, at least one of the authors regu- larly uses <span class="s33">xterm</span>. Nowadays, there are plenty of other terminal emulators. The good news is that most others work pretty much like <span class="s33">xterm </span>as far as the user is concerned and, in fact, many of them are just enhancements to <span class="s33">xterm</span>.</p><p style="padding-left: 60pt;text-indent: 0pt;line-height: 10pt;text-align: left;">To start a new <span class="s33">xterm</span>, execute the following:</p><p class="s33" style="padding-top: 8pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">% <b>xterm &amp;</b></p><p style="padding-top: 8pt;padding-left: 42pt;text-indent: 18pt;line-height: 114%;text-align: justify;">Remember the <span class="s33">&amp; </span>at the end. This lets your current terminal carry straight on, ignoring the new <span class="s33">xterm</span>. (This is further explained in the section “Starting and Stopping Processes: Signals, Job Control” in Chapter 3.) If the shell says it can’t find <span class="s33">xterm</span>, try typing <span class="s33">/usr/X11/bin/xterm </span>or</p><p class="s33" style="padding-left: 42pt;text-indent: 0pt;line-height: 115%;text-align: justify;">/usr/X11R6/bin/xterm <span class="p">or something similar; on a SunOS/Solaris system, there’s probably an </span>xterm <span class="p">in the directory </span>/usr/openwin/bin<span class="p">. If it works, you’ll get a new window looking more or less like the window you were in before.</span></p><p style="padding-left: 42pt;text-indent: 18pt;line-height: 114%;text-align: left;">You can run a different command (which will usually be a shell) using the <span class="s33">-e </span>option. For example, to start an <span class="s33">xterm </span>that is running <span class="s33">bash</span>, type the following:</p><p class="s33" style="padding-top: 7pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">% <b>xterm -e bash &amp;</b></p><p style="padding-top: 8pt;padding-left: 42pt;text-indent: 18pt;line-height: 115%;text-align: left;">Without the <span class="s33">-e </span>option, <span class="s33">xterm </span>consults the environment variable <span class="s33">SHELL</span>. This variable is typically set when you log in to the shell set up by the system administrator (which is specified in your system’s password file). You can also set <span class="s33">SHELL </span>yourself. For example, if you want new <span class="s33">xterm</span>s to start up a <span class="s33">zsh </span>that lives in <span class="s33">/usr/local/bin/zsh</span>, you can set</p><p class="s33" style="padding-top: 7pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">% <b>export SHELL=/usr/local/bin/zsh</b></p><p style="padding-top: 8pt;padding-left: 42pt;text-indent: 18pt;line-height: 115%;text-align: left;">You need to include that in a startup file if you want it to be remembered. (See the section “Startup Files, Login and Interactive Shells” in Chapter 5 for more on this topic.) Otherwise it only works for the current shell and other programs you start from it. Unfortunately, these days it’s not so easy to find out what startup files are run when you log in graphically to a computer that starts up a desktop for you. Finding what the desktop will start can be hard work; it’s a lot more complicated than simply starting a shell. So the easiest way to be sure terminal emulators use the shell you want is to change your login shell. Usually this is done with the <span class="s33">chsh </span>command. You type the command name and follow the prompts to change your login shell. You will need to enter the full path to the shell, for example <span class="s33">/usr/local/bin/zsh.</span></p><p style="padding-left: 60pt;text-indent: 0pt;line-height: 10pt;text-align: left;">Here’s how to start a new <span class="s33">xterm </span>so that it remembers the shell but doesn’t affect any other</p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">xterm<span class="p">s you start:</span></p><p class="s33" style="padding-top: 8pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">bash$ <b>SHELL=/usr/local/bin/zsh xterm &amp;</b></p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 18pt;line-height: 114%;text-align: left;">This sets the value of <span class="s33">SHELL </span>for this single <span class="s33">xterm</span>. Because it’s immediately in front of that program, it’s only set for that program. So if you <span class="s33">echo $SHELL </span>you’ll find it hasn’t changed locally, but the new <span class="s33">xterm </span>is using <span class="s33">zsh </span>instead of <span class="s33">bash</span>. (This is pointless if the value already was</p><p class="s33" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">/usr/local/bin/zsh<span class="p">.)</span></p><p class="s29" style="padding-top: 3pt;padding-left: 188pt;text-indent: 0pt;text-align: left;"><a name="bookmark188">CHAPTER 4 </a><span class="s28">■ </span>EN TERING AND ED ITING THE CO MMAND LIN E <span class="s27">73</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part69.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part71.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
