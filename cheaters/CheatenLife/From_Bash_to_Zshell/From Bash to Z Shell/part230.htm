<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Grouping Alternatives</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part229.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part231.htm">Next &gt;</a></p><p class="s18" style="padding-left: 40pt;text-indent: 0pt;text-align: left;"><a name="bookmark420">Grouping Alternatives</a></p><p style="padding-top: 5pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: justify;">Like <span class="s33">ksh </span>and <span class="s33">bash </span>(with the <span class="s33">extglob </span>option set), <span class="s33">zsh </span>can interpret pattern alternatives that are surrounded by parentheses and separated by a vertical bar. The difference from <span class="s33">ksh </span>and <span class="s33">bash </span>is that the parentheses aren’t preceded by a special character. Let’s consider an example:</p><p class="s33" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">zsh% <b>ls</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">dry.out dry.txt greasy.out greasy.txt normal.out normal.txt zsh% <b>echo d*.(out|txt)</b></p><p class="s33" style="padding-left: 40pt;text-indent: 0pt;line-height: 10pt;text-align: left;">dry.out dry.txt</p><p style="padding-top: 8pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">The drawback of this arguably more intuitive syntax is that there is a clash with other uses of parentheses. In particular, they can occur in two places:</p><p style="padding-top: 7pt;padding-left: 66pt;text-indent: -10pt;line-height: 115%;text-align: left;">• At the start of a command line to signal a set of commands to run in a subshell, as described in Chapter 13</p><p style="padding-top: 7pt;padding-left: 66pt;text-indent: -10pt;line-height: 115%;text-align: left;">• To show the start of a group in the tests starting with <span class="s33">[[ </span>that we describe in the section “Condition Tests” in Chapter 13</p><p style="padding-top: 7pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">Luckily, neither of these causes much of a problem: you almost never need a set of alterna- tives at the start of a command line, and <span class="s33">zsh </span>is good at guessing whether parentheses in tests are for grouping or for a pattern.</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">Unlike braces, parenthesized expressions refer to a single globbing pattern. This has particular implications when you are using one of the special options to handle failed matches. At this point, an expression such as <span class="s33">d*.{out,txt} </span>has already been expanded into the words <span class="s33">d*.out d*.txt</span>. If you try them both out with the options in Table 9-3 you will find the results are different.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="504" height="1" alt="image" src="Image_199.png"/></span></p><p class="s21" style="padding-top: 4pt;padding-left: 40pt;text-indent: 0pt;line-height: 111%;text-align: left;">■<span class="s23">Tip </span><span class="s19">Parenthesized groups in zsh are limited in the same way as bash; a single group can’t contain a path that has a directory separator in it.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="507" height="1" alt="image" src="Image_200.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s33" style="padding-top: 6pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;"><span class="p">The uses we’ve shown for parentheses in </span>zsh <span class="p">would cause other shells derived from the Bourne shell such as </span>bash <span class="p">to report a syntax error. If you prefer to use only the syntax common to </span>bash <span class="p">and </span>zsh<span class="p">, you can set the option </span>sh_glob <span class="p">to turn off this use of parentheses. However, it’s still possible to turn on </span>ksh_glob <span class="p">to use the patterns you’ll learn about in the section “Extended Globbing,” a bit later in this chapter. The combination of </span>sh_glob <span class="p">and </span>ksh_glob <span class="p">turned on and </span>extended_glob <span class="p">turned off makes </span>zsh <span class="p">work very like both </span>bash <span class="p">and </span>ksh<span class="p">. A problem you might notice when the </span>ksh_glob <span class="p">option is in effect is that the form </span>!(<span class="s32">pattern</span>) <span class="p">can be taken as a history reference. For better compatibility with other shells, you can turn off the option </span>bang_hist<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part229.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part231.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
