<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Where the Commands Are Located</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part34.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part36.htm">Next &gt;</a></p><h4 style="padding-left: 40pt;text-indent: 0pt;text-align: left;"><a name="bookmark45">Where the Commands Are Located</a></h4><p style="padding-top: 6pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">A Unix filesystem has lots of directories, and some of them contain program files. When you type a program name at a prompt, how does the shell find that program file? The shell has a list of directories to look in. It’s stored in the environment variable (see the section “Passing Info to Processes with Environment Variables” in Chapter 3) named <span class="s33">PATH</span>. Let’s use the <span class="s33">echo </span>command to see what’s in <span class="s33">PATH</span>, the same way we saw <span class="s33">SHELL </span>in the section “Shell Types and Versions” earlier:</p><p class="s33" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">% <b>echo $PATH</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">/bin:/usr/bin:/usr/local/bin:......</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">If you type the name of a program at a prompt but the shell can’t find that program file in the directories <span class="s33">/bin</span>, <span class="s33">/usr/bin</span>, <span class="s33">/usr/local/bin</span>, and so on (and the command isn’t built into the shell, as we’ll explain next), the shell outputs the error “not found” (as it did earlier, when we typed <i>dtae</i>).</p><p style="text-indent: 0pt;text-align: left;"><span><img width="62" height="185" alt="image" src="Image_041.png"/></span></p><p class="s40" style="padding-top: 3pt;padding-left: 70pt;text-indent: 0pt;text-align: left;">WHY AREN’T ALL COMMANDS BUILT INTO THE SHELL?</p><p class="s40" style="padding-top: 3pt;padding-left: 70pt;text-indent: 0pt;text-align: left;">WHY AREN’T ALL COMMANDS BUILT INTO THE SHELL?</p><p style="text-indent: 0pt;text-align: left;"/><p class="s40" style="padding-top: 3pt;padding-left: 70pt;text-indent: 0pt;text-align: left;">WHY AREN’T ALL COMMANDS BUILT INTO THE SHELL?</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">Most command lines run a program from a file, but some commands are <i>built into </i>the shell. This means that the shell doesn’t need to search for a program file or start a new process. Although some commands are built in for efficiency (see the sidebar “Why Aren’t All Commands Built Into the Shell?”), others <i>must </i>be built in because they affect the shell itself. (As you’ll see in the sidebar “Inheritance” in Chapter 2, a child process started by the shell can’t affect its parent process—which is the shell.) For instance, the <span class="s33">alias </span>command stores an alias within the currently running shell process, so <span class="s33">alias </span>must be built in. Another command that affects the shell is <span class="s33">cd</span>, which changes the shell’s current directory. (Without <span class="s33">cd</span>, relative pathnames would be mostly useless.)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s33" style="padding-top: 6pt;padding-left: 9pt;text-indent: 0pt;line-height: 115%;text-align: justify;">As we said, the shell has a few commands built in; these aren’t in separate program files and don’t start a separate process. For instance, most shells have the echo command built in—although you’ll also see an echo program file in the /bin directory.</p><p class="s33" style="padding-left: 9pt;text-indent: 0pt;line-height: 115%;text-align: justify;">You might be wondering why all commands aren’t built in. That’s mainly because building lots of commands into the shell would make the shell’s program file bigger—and the shell could need more memory to run.</p><p class="s33" style="padding-left: 9pt;text-indent: 0pt;line-height: 115%;text-align: justify;">Thirty-some years ago, when Unix began, computers had very little memory, so almost every command was stored in a separate program file—except for commands like cd that absolutely had to be built into the shell. Modern systems have more memory and disk space, so often-used commands like echo are built in to make the shell run faster.</p><p class="s33" style="padding-top: 6pt;padding-left: 9pt;text-indent: 0pt;line-height: 115%;text-align: justify;">As we said, the shell has a few commands built in; these aren’t in separate program files and don’t start a separate process. For instance, most shells have the echo command built in—although you’ll also see an echo program file in the /bin directory.</p><p class="s33" style="padding-left: 9pt;text-indent: 0pt;line-height: 115%;text-align: justify;">You might be wondering why all commands aren’t built in. That’s mainly because building lots of commands into the shell would make the shell’s program file bigger—and the shell could need more memory to run.</p><p class="s33" style="padding-left: 9pt;text-indent: 0pt;line-height: 115%;text-align: justify;">Thirty-some years ago, when Unix began, computers had very little memory, so almost every command was stored in a separate program file—except for commands like cd that absolutely had to be built into the shell. Modern systems have more memory and disk space, so often-used commands like echo are built in to make the shell run faster.</p><p style="padding-left: 39pt;text-indent: 0pt;text-align: left;"/><p class="s33" style="padding-top: 6pt;padding-left: 9pt;text-indent: 0pt;line-height: 115%;text-align: justify;">As we said, the shell has a few commands built in; these aren’t in separate program files and don’t start a separate process. For instance, most shells have the echo command built in—although you’ll also see an echo program file in the /bin directory.</p><p class="s33" style="padding-left: 9pt;text-indent: 0pt;line-height: 115%;text-align: justify;">You might be wondering why all commands aren’t built in. That’s mainly because building lots of commands into the shell would make the shell’s program file bigger—and the shell could need more memory to run.</p><p class="s33" style="padding-left: 9pt;text-indent: 0pt;line-height: 115%;text-align: justify;">Thirty-some years ago, when Unix began, computers had very little memory, so almost every command was stored in a separate program file—except for commands like cd that absolutely had to be built into the shell. Modern systems have more memory and disk space, so often-used commands like echo are built in to make the shell run faster.</p><p class="s29" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark68"><span class="s27">18 </span></a>CHAPTER 1 <span class="s28">■ </span>IN TR OD U C T IO N T O S H E LL S</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part34.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part36.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
