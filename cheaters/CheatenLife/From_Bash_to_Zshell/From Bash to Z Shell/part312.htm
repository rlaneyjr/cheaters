<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Variables</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part311.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part313.htm">Next &gt;</a></p><p class="s17" style="padding-top: 9pt;padding-left: 40pt;text-indent: 0pt;text-align: left;"><a name="bookmark577">Variables</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h2 style="padding-top: 23pt;padding-left: 40pt;text-indent: 0pt;line-height: 88%;text-align: left;">A<span class="s32">variable </span><span class="p">is a named placeholder for a value. Whenever you want the shell to remember something, you can store it in a variable. As an analogy, imagine that a variable is a box; the</span></h2><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">variable’s name would be the label on the box.</p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">We have already made quite extensive use of variables in this book. In this chapter we’ll expand upon your knowledge of the topic, introducing a number of concepts that will help you make effective use of variables in your daily scripting tasks. In particular, we will cover the following topics:</p><p style="padding-top: 7pt;padding-left: 56pt;text-indent: 0pt;text-align: left;">• Making the shell remember a list of values using arrays</p><p style="padding-top: 8pt;padding-left: 56pt;text-indent: 0pt;text-align: left;">• Seeing what happens when variables are expanded on the command line</p><p style="padding-top: 8pt;padding-left: 56pt;text-indent: 0pt;text-align: left;">• Storing numbers and using the shell’s math facilities</p><p style="padding-top: 8pt;padding-left: 56pt;text-indent: 0pt;text-align: left;">• Substituting a default value when a variable is unset</p><p style="padding-top: 8pt;padding-left: 56pt;text-indent: 0pt;text-align: left;">• Returning just a part of a variable’s value</p><p style="padding-top: 8pt;padding-left: 56pt;text-indent: 0pt;text-align: left;">• Using <span class="s33">zsh</span>’s associative arrays to map strings to values</p><p style="padding-top: 8pt;padding-left: 56pt;text-indent: 0pt;text-align: left;">• Searching for data stored in variables</p><p style="padding-top: 8pt;padding-left: 56pt;text-indent: 0pt;text-align: left;">• Making variables that point to other variables</p><p style="padding-top: 8pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">Given that we’ve already used variables in this book, we’ll start by briefly reviewing what we’ve already covered. In Chapter 3, we explained that the shell handles two types of variables: <i>environment variables </i>and <i>shell variables</i>. Bourne-derived shells such as <span class="s33">bash </span>and <span class="s33">zsh </span>make less of a distinction between the two types than the C shell does. In this chapter, we will be discussing the more general shell variables.</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">Shell variables can be scalar or nonscalar. (Environment variables are always scalar.) The majority of the variables we have seen so far in this book have been scalar. A <i>scalar </i>is a single unit of information, typically either a number or a string of one or more characters. The syntax for setting a scalar variable should by now be quite familiar:</p><p class="s45" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;"><span class="s33">% </span>name<b>=</b>value</p><p style="padding-top: 8pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">If you’re used to programming in other languages, note that spaces on either side of the equals sign are not allowed.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s27" style="padding-top: 4pt;padding-left: 39pt;text-indent: 0pt;text-align: right;">279</p><p class="s29" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark602"><span class="s27">280 </span></a>CHAPTER 12 <span class="s28">■ </span>VARIABLES </p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: justify;">Similarly, using a <span class="s33">$ </span>symbol before a variable’s name will be familiar as the way to retrieve a variable’s value. So for example, if we have assigned the number 4 to a variable named <span class="s33">x</span>, we can then use <span class="s33">$x </span>in place of the literal value <span class="s33">4</span>:</p><p class="s33" style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">% <b>x=4</b></p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">% <b>echo $x</b></p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">4</p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: justify;">The variable name can also be enclosed in braces. This is necessary if you want to have letters immediately following a variable expansion. For example, if the variable <span class="s33">x </span>denotes a length in millimeters, we might write the following:</p><p class="s33" style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">% <b>echo ${x}mm</b></p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">4mm</p><p style="padding-top: 8pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">If we had written <span class="s33">$xmm</span>, the shell would try to find a variable named <span class="s33">xmm </span>to expand.</p><p style="padding-top: 1pt;padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">In the first section, we’ll discuss arrays, a type of nonscalar variable. We’ll return to the topic of scalar variables in the section “Variable Attributes” later in this chapter.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="toc">&nbsp;</p><div class="toc"><a class="toc0" href="part313.htm">Arrays</a><a class="toc1" href="part314.htm">Constructing an Array</a><a class="toc1" href="part315.htm">Accessing Array Elements</a><a class="toc1" href="part316.htm">Array Attributes</a><a class="toc1" href="part317.htm">Word Splitting</a><a class="toc1" href="part318.htm">Array Expansions</a><a class="toc0" href="part319.htm">Variable Attributes</a><a class="toc0" href="part320.htm">Numeric Variables and Arithmetic</a><a class="toc1" href="part321.htm">Number Bases</a><a class="toc1" href="part322.htm">Floating-Point Numbers</a><a class="toc0" href="part323.htm">Complex Variable Expansions</a><a class="toc1" href="part324.htm">Alternative and Default Values</a><a class="toc1" href="part325.htm">Patterns</a><a class="toc1" href="part326.htm">Substrings</a><a class="toc1" href="part327.htm">Nested Expansion</a><a class="toc1" href="part328.htm">Expansion Flags</a><a class="toc2" href="part329.htm">Converting Strings to Upper or Lower Case</a><a class="toc2" href="part330.htm">Sorting Values</a><a class="toc2" href="part331.htm">Splitting Strings</a><a class="toc1" href="part332.htm">Matching Patterns Against Arrays</a><a class="toc0" href="part333.htm">Associative Arrays</a><a class="toc1" href="part334.htm">Reverse Indexing</a><a class="toc0" href="part335.htm">Variable Indirection</a><a class="toc0" href="part336.htm">Summary</a></div><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part311.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part313.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
