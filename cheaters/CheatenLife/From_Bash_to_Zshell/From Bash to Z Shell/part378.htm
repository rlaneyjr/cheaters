<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Calling Widgets from a Function</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part377.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part379.htm">Next &gt;</a></p><p class="s35" style="padding-left: 40pt;text-indent: 0pt;text-align: left;"><a name="bookmark709">Calling Widgets from a Function</a></p><p style="padding-top: 5pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">Several uses of the <span class="s33">zle </span>command have already been introduced, notably the ability to tell the shell that a widget has been newly created by using <span class="s33">zle  -N</span>. The <span class="s33">zle </span>command can also be used inside widget functions to call another widget, just as if you’d typed the keystroke bound to the widget. This is very useful, because it immediately provides all the facilities of the widgets you already know about to help you extend the editor. In this case the <span class="s33">zle </span>command doesn’t require an option letter, just the name of the widget you are calling. We’ll illustrate that by creating a widget</p><p class="s29" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark728"><span class="s27">350 </span></a>CHAPTER 14 <span class="s28">■ </span>WRITING EDITOR CO MMANDS </p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 115%;text-align: left;">that simply calls an existing widget. First, let’s remind ourselves what the widget is that takes the cursor to the end of the line when the user presses Ctrl-e. (We’re assuming throughout that you use the <span class="s33">emacs </span>keymap; remember you can type <span class="s33">bindkey -e </span>to ensure this.) The <span class="s33">bindkey </span>command can be used to output the name of the widget:</p><p class="s33" style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">zsh% <b>bindkey &#39;\C-e&#39;</b></p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">&quot;^E&quot; end-of-line</p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">The widget we want to call is named <span class="s33">end-of-line</span>. Here’s how we write a widget function that calls this built-in widget. The function is called <span class="s33">example-widget</span>:</p><p class="s33" style="padding-top: 7pt;padding-left: 50pt;text-indent: -9pt;line-height: 115%;text-align: left;">example-widget() { zle end-of-line</p><p class="s33" style="padding-left: 41pt;text-indent: 0pt;line-height: 10pt;text-align: left;">}</p><p style="padding-top: 8pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">This is different from the form of the <span class="s33">backward-ten-word </span>function because here we’re</p><p style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;line-height: 115%;text-align: left;">assuming you’ll type it in directly to the shell, rather than autoload it from a file. (However, this time we haven’t shown the shell’s prompts, in order to make the text of the function clear.) Finally, we’ll tell the shell about the new widget:</p><p class="s33" style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">zsh% <b>zle -N example-widget</b></p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 17pt;line-height: 115%;text-align: left;">Because this is just an example, instead of binding it to a key we’ll execute it by name. Type a line of text and move back to the beginning of it. Then press Esc x, after the prompt type <span class="s33">example-widget</span>, and press Return. The new widget is executed and the cursor jumps to the end of the line.</p><p style="padding-left: 42pt;text-indent: 18pt;line-height: 115%;text-align: left;">Executing a single command isn’t much use. The following modifies the example to go to the end of the line, then backward one word. Already it’s starting to look more like a useful shortcut:</p><p class="s33" style="padding-top: 7pt;padding-left: 51pt;text-indent: -9pt;line-height: 115%;text-align: left;">example-widget() { zle end-of-line zle backward-word</p><p class="s33" style="padding-left: 42pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-top: 8pt;padding-left: 60pt;text-indent: 0pt;text-align: left;">Note that you don’t need to execute the <span class="s33">zle -N </span>command again; the new function replaces</p><p style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">the old one.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part377.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part379.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
