<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>FIFOs</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part189.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part191.htm">Next &gt;</a></p><p class="s35" style="padding-left: 42pt;text-indent: 0pt;text-align: left;"><a name="bookmark355">FIFOs</a></p><p style="padding-top: 5pt;padding-left: 42pt;text-indent: 0pt;line-height: 115%;text-align: left;">A widely available, and quite useful, type is the <i>FIFO</i>, or first-in, first-out special file. It’s basically just a pipe with a name—FIFOs are also called <i>named pipes</i>, in fact. They can be quite useful for some special uses. If you want to try one out, you’ll need two terminal windows open in the same directory. In one window type the following:</p><p class="s33" style="padding-top: 7pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">% <b>mknod fifo p</b></p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">%  <b>ls  -l  fifo</b></p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">prw-r--r-- 1 pws  users 0 Aug 6 23:44 fifo</p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">% <b>echo Hello &gt;fifo</b></p><p style="padding-top: 8pt;padding-left: 60pt;text-indent: 0pt;text-align: left;">(A more recent command that does the same as <span class="s33">mknod </span>but has a more obvious syntax is</p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">mkfifo<span class="p">. You use this as </span>mkfifo <i>fifo</i><span class="p">.) We put the </span>ls -l <span class="p">in just to show you it really does look like</span></p><p class="s29" style="padding-top: 3pt;padding-left: 263pt;text-indent: 0pt;text-align: left;"><a name="bookmark387">CHAPTER 8 </a><span class="s28">■ </span>FILES AND D I RECTORIES <span class="s27">173</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: justify;">a file, only with a different type. You’ll notice the shell has apparently hung up at this point; that’s because no one’s attempting to read from the other end of the FIFO, so it can’t finish writing. Now in the other window type the following:</p><p class="s33" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">% <b>read var &lt;fifo</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">% <b>echo $var</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">Hello</p><p style="padding-top: 8pt;padding-left: 40pt;text-indent: 17pt;line-height: 115%;text-align: left;">When you read from <span class="s33">fifo</span>, the other terminal finishes writing, and the word <span class="s33">Hello </span>passes through the FIFO and into the shell variable <span class="s33">var</span>. Unlike a pipe created with <span class="s33">|</span>, a FIFO stays there until you delete it by hand; you can use it as often as you like.</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">One use for FIFOs is to send input to a running process. The process tries to read from a particular FIFO whose name you know. The FIFO doesn’t have to have been created from the shell you’re running, unlike a normal pipe. It doesn’t even need to have been started by you at all. You simply need write permission on the FIFO, and this works just as it does for writing to a regular file. FIFOs can be a powerful way of communicating between different processes.</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">Here’s an example. Some programs that deal with security need to accept random numbers from a file. The environment variable <span class="s33">RANDFILE </span>is often used to specify the name of the file. On some operating systems such as Linux, there is a special file (<span class="s33">/dev/random </span>on Linux) that provides random numbers. If there is no such file, you can consider writing a program to provide the random numbers. That’s well outside the scope of this book, but let’s suppose there is a program called <span class="s33">randomize </span>that produces random bytes on its standard output. (We’ll talk about standard output in the section “File Descriptors” in this chapter.) We make the random numbers appear to be a file by creating a FIFO. Then we start <span class="s33">randomize </span>with its output to the FIFO. The command line ends with an ampersand to run it in the background:</p><p class="s33" style="padding-top: 6pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">% <b>mknod /tmp/rng.fifo p</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">% <b>randomize &gt;/tmp/rng.fifo &amp;</b></p><p style="padding-top: 8pt;padding-left: 40pt;text-indent: 18pt;line-height: 114%;text-align: left;">Now the file <span class="s33">/tmp/rng.fifo </span>can be used as a source of random numbers, for example by exporting <span class="s33">RANDFILE=/tmp/rng.fifo</span>. When you run a program that reads from that file, its input will actually come from the output of <span class="s33">randomize</span>. Note that when the reading program exits it’s quite likely that <span class="s33">randomize </span>will exit, too, since it detects that there is nowhere to write its output to any more. (You might see a message such as “broken pipe” when <span class="s33">randomize </span>exits.) You can restart <span class="s33">randomize </span>to use it again, however.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part189.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part191.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
