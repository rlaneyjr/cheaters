<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Creating Your Own Keymaps</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part97.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part99.htm">Next &gt;</a></p><p class="s18" style="padding-left: 42pt;text-indent: 0pt;text-align: left;"><a name="bookmark174">Creating Your Own Keymaps</a></p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 115%;text-align: justify;">In <span class="s33">bash </span>you are restricted to the existing keymaps. In <span class="s33">zsh</span>, however, you can create and use your own keymaps. You might use this for a special editing task where you intend to return to one of the standard keymaps such as <span class="s33">emacs </span>when you have finished. It’s not completely obvious, but all you need to know can be summarized in a few sets of commands.</p><p style="padding-top: 7pt;padding-left: 67pt;text-indent: -10pt;line-height: 115%;text-align: left;">• You can create a new keymap by copying an existing one. This is usually more useful than creating one from scratch. The following example copies the keymap <span class="s33">emacs </span>into the new keymap <span class="s33">my-keymap</span>:</p><p class="s33" style="padding-top: 7pt;padding-left: 67pt;text-indent: 0pt;text-align: left;">zsh% <b>bindkey -N my-keymap emacs</b></p><p style="padding-top: 8pt;padding-left: 67pt;text-indent: 0pt;line-height: 115%;text-align: left;">Now you can treat <span class="s33">my-keymap </span>as your own private copy of the <span class="s33">emacs </span>map. Note it’s a copy of the keymap in its current state, not with the default bindings.</p><p class="s29" style="padding-top: 3pt;padding-left: 188pt;text-indent: 0pt;text-align: left;"><a name="bookmark212">CHAPTER 4 </a><span class="s28">■ </span>EN TERING AND ED ITING THE CO MMAND LIN E <span class="s27">97</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 56pt;text-indent: 0pt;text-align: left;">• To create a new keymap from scratch, omit the final argument from the previous example:</p><p class="s33" style="padding-top: 8pt;padding-left: 66pt;text-indent: 0pt;text-align: left;">zsh% <b>bindkey -N my-keymap</b></p><p style="padding-top: 8pt;padding-left: 66pt;text-indent: 0pt;line-height: 115%;text-align: left;">You can use pretty much any name you are likely to want. However, it overwrites any existing keymap of that name, which may be a bad thing, so be careful. The keymap you create has no bindings at all, not even standard alphanumerics; you have to fill it from scratch. You can bind ranges of characters. For example, the following command forces all the lowercase characters to insert themselves as they do in an ordinary keymap such as Emacs:</p><p class="s33" style="padding-top: 7pt;padding-left: 66pt;text-indent: 0pt;text-align: left;">zsh% <b>bindkey -R -M my-keymap &#39;a-z&#39; self-insert</b></p><p style="padding-top: 8pt;padding-left: 66pt;text-indent: 0pt;text-align: left;">The order, with <span class="s33">-R </span>first, is because <span class="s33">-M </span>is a bit tricky. In versions of <span class="s33">zsh </span>up to 4.0, the</p><p class="s33" style="padding-top: 1pt;padding-left: 66pt;text-indent: 0pt;line-height: 115%;text-align: left;">my-keymap <span class="p">is not as you’d expect an argument to the </span>-M <span class="p">option, but the first non-option argument to the command. In other words, </span>-M <span class="p">doesn’t take an argument; it swallows up the first argument left after the option processing. This changed in version 4.1, but the order we’ve shown here will always work.</span></p><p style="padding-top: 7pt;padding-left: 66pt;text-indent: -10pt;line-height: 115%;text-align: left;">• Now you need to switch to your new keymap. This is done in a slightly obscure way by giving the new keymap the name <span class="s33">main </span>as an alias:</p><p class="s33" style="padding-top: 7pt;padding-left: 66pt;text-indent: 0pt;text-align: left;">zsh% <b>bindkey -A my-keymap main</b></p><p style="padding-top: 8pt;padding-left: 66pt;text-indent: 0pt;text-align: left;">(Remember the order; <span class="s33">main </span>comes last.) This is basically what the <span class="s33">bindkey -v </span>and</p><p class="s33" style="padding-top: 1pt;padding-left: 66pt;text-indent: 0pt;text-align: left;">bindkey -e <span class="p">commands do for you. When I talked about “the current keymap” earlier,</span></p><p style="padding-top: 1pt;padding-left: 66pt;text-indent: 0pt;line-height: 114%;text-align: justify;">I could have talked about <span class="s33">main </span>instead. If you want to switch back to the original keymap, you issue another <span class="s33">bindkey </span>command. For example, you can return to the <span class="s33">emacs </span>keymap with the command <span class="s33">bindkey -e</span>.</p><p style="padding-top: 7pt;padding-left: 66pt;text-indent: 0pt;line-height: 114%;text-align: justify;">Don’t alias the <span class="s33">vicmd </span>keymap to <span class="s33">main</span>, as I just did. If you do that, both of the keymaps in use for <span class="s33">vi</span>-style editing are bound to <span class="s33">vicmd</span>. In that case you can’t ever enter text! Instead, use <span class="s33">viins</span>. The effect of <span class="s33">bindkey -v </span>is to alias <span class="s33">viins </span>to <span class="s33">main</span>.</p><p style="padding-top: 7pt;padding-left: 55pt;text-indent: 0pt;text-align: left;">• To get rid of a keymap, you can delete it as follows:</p><p class="s33" style="padding-top: 8pt;padding-left: 66pt;text-indent: 0pt;text-align: left;">zsh% <b>bindkey -D my-keymap</b></p><p style="padding-top: 8pt;padding-left: 66pt;text-indent: 0pt;line-height: 115%;text-align: left;">but since the current keymap is lost when you leave the shell, you’re unlikely to care enough to want to delete one.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="507" height="1" alt="image" src="Image_140.png"/></span></p><p class="s21" style="padding-top: 4pt;padding-left: 40pt;text-indent: 0pt;line-height: 117%;text-align: left;">■<span class="s23">Tip </span><span class="s19">There’s one keymap in zsh you probably don’t want to come across. If you delete the main keymap, zsh uses a keymap called .safe. This keymap is specially restrictive; most of the commands we showed earlier for use with keymaps won’t work. The only bindings in the .safe keymap are the characters that usually insert themselves and the Return and Linefeed keys (Ctrl-j if there isn’t one so marked). That’s enough to let you type a command and execute it to put things back to normal. You should immediately type some- thing like bindkey  -e to return to a better keymap.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="499" height="1" alt="image" src="Image_141.png"/></span></p><p class="s29" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark213"><span class="s27">98 </span></a>CHAPTER 4 <span class="s28">■ </span>EN T E R I N G A N D ED I T I N G T H E CO M M A N D L I N E</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part97.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part99.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
