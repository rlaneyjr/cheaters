<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Executing Commands</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part92.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part94.htm">Next &gt;</a></p><p class="s35" style="padding-left: 40pt;text-indent: 0pt;text-align: left;"><a name="bookmark169">Executing Commands</a></p><p style="padding-top: 5pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">Now you know about binding a named command to a keystroke, it’s worth pointing out that the action of executing a command line uses an editor command. In both shells it’s called <span class="s33">accept-line </span>and, as you will guess, it’s bound to the Return key. There’s usually no reason for changing this, except for special effects. In <span class="s33">zsh</span>, we’ll see such effects in Chapter 14.</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">There are related and more sophisticated commands, however. Both shells have a handy function bound to Ctrl-o in emacs mode, though it has different names—</p><p class="s33" style="padding-left: 40pt;text-indent: 0pt;line-height: 10pt;text-align: left;">accept-line-and-down-history <span class="p">in </span>zsh <span class="p">and </span>operate-and-get-next <span class="p">in </span>bash<span class="p">.</span></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">An illustration shows this best. Let’s suppose you’re using the <span class="s33">vi </span>editor to edit a program, then the <span class="s33">make </span>command to compile it. (The <span class="s33">make </span>command reads instructions from a file, usually named <span class="s33">Makefile </span>or <span class="s33">makefile</span>.) Often, you need to look at the output from the compiler, then edit the program again to fix a problem. Suppose you’ve already issued the following commands:</p><p class="s33" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">%  <b>vi  myprogram.c</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">% <b>make</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">... error message from make ...</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">(If you want to try that straight away, just put “<span class="s33">echo</span>” at the start of both lines. Then you can see what the shell would execute if you were really writing a program.)</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: justify;">Now press the Up Arrow key twice to get back to the first of the two lines, then press Ctrl-o. The line is executed again, but this time when you get back to the line editor it puts up the second line again. This makes it very easy to recycle a complete set of history lines.</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: justify;">Press Ctrl-o again, and you see the first line again. (It was saved to the history the first time you pressed Ctrl-o.) If you keep pressing Ctrl-o, you keep re-executing those two lines, as many times as you like.</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">When you’ve finished editing and want to run the program, just delete the line the shell shows you and start a new one. When you press Return at the end it will be added at the end of the history as normal.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part92.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part94.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
