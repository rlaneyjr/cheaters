<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Moving Further: Words and Lines</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part81.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part83.htm">Next &gt;</a></p><p class="s18" style="padding-top: 24pt;padding-left: 40pt;text-indent: 0pt;text-align: left;"><a name="bookmark158">Moving Further: Words and Lines</a></p><p style="padding-top: 5pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">Some more powerful motion keys that move the cursor further than a single character are shown in Table 4-2. The backward and forward keys are easy enough to remember, and Ctrl-e for end is also easy enough, but you’ll just have to remember Ctrl-a, the start of the alphabet, meaning the start of the line.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s13" style="padding-top: 7pt;padding-bottom: 4pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">Table 4-2. <span class="s32">More Powerful Motion Keys</span></p><p style="padding-left: 40pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="311" height="1" alt="image" src="Image_106.png"/></span></p><p class="s48" style="padding-bottom: 2pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">Key Purpose</p><p style="padding-left: 40pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="311" height="1" alt="image" src="Image_107.png"/></span></p><p class="s51" style="padding-top: 3pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">Esc-b Move backward one word</p><p class="s51" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">Esc-f Move forward one word</p><p class="s51" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">Ctrl-a Move to the beginning of the line</p><p class="s51" style="padding-top: 6pt;padding-bottom: 4pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">Ctrl-e Move to the end of the line</p><p style="padding-left: 40pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="311" height="1" alt="image" src="Image_108.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: justify;">The keys Esc-b and Esc-f move the cursor backward and forward over <i>words</i>. There’s some disagreement over what a “word” means. In particular, it doesn’t mean a complete command- line argument. In <span class="s33">bash</span>, it’s simple: only letters and digits (alphanumerics) are part of a word.</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">In <span class="s33">zsh </span>alphanumerics are part of a word, too. However, there is an additional set of char- acters that will be considered part of a word. These are given by the shell variable <span class="s33">WORDCHARS</span>, whose initial contents are the following:</p><p class="s33" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">*?_-.[]~=/&amp;;!#$%^(){}&lt;&gt;</p><p style="padding-top: 8pt;padding-left: 58pt;text-indent: 0pt;text-align: left;">You can set <span class="s33">WORDCHARS </span>to any set of characters. In particular, if you always want the <span class="s33">bash</span></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">behavior, you can make it empty:</p><p class="s33" style="padding-top: 8pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">zsh% <b>WORDCHARS=</b></p><p style="padding-top: 8pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: justify;">There’s no equivalent to <span class="s33">WORDCHARS </span>in <span class="s33">bash</span>; the notion of a word is fixed. In both shells, there are only two kinds of characters: word characters and the rest. That may sound rather stupid, but remembering it helps you to understand what Esc-b and Esc-f actually do:</p><p style="padding-top: 7pt;padding-left: 66pt;text-indent: -10pt;line-height: 115%;text-align: left;">• Esc-b skips backward over any number of nonword characters, and then any number of word characters before that.</p><p style="padding-top: 7pt;padding-left: 66pt;text-indent: -10pt;line-height: 115%;text-align: left;">• Esc-f skips forward over any number of word characters, and then over any number of nonword characters after that.</p><p style="padding-top: 7pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: justify;">In each case “any number” may be zero if there aren’t any characters of that type at that point. The reason for this behavior is so that repeated Esc-b or Esc-f keystrokes take you over as many words as necessary, without you having to move the cursor in between.</p><p class="s29" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark197"><span class="s27">82 </span></a>CHAPTER 4 <span class="s28">■ </span>EN TERING AND ED ITING THE CO MMAND LINE </p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part81.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part83.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
