<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>The Region</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part85.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part87.htm">Next &gt;</a></p><p class="s18" style="padding-top: 5pt;padding-left: 42pt;text-indent: 0pt;text-align: left;"><a name="bookmark162">The Region</a></p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 115%;text-align: left;">The <i>region </i>is yet another concept originating from Emacs. You set a <i>mark </i>in one place and move the cursor somewhere else. The “region” is the set of characters between the cursor and the mark. To be more precise, the cursor defines a <i>point </i>just to its left. When you make a mark it remembers that point, and when you move the cursor, the region is between the new “point” and the “mark.” Some keys for using the region are given in Table 4-9.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s13" style="padding-top: 4pt;padding-bottom: 4pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">Table 4-9. <span class="s32">Keys for Using the Region</span></p><p style="padding-left: 42pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="504" height="1" alt="image" src="Image_129.png"/></span></p><p class="s48" style="padding-bottom: 2pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">Key Purpose</p><p style="padding-left: 42pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="504" height="1" alt="image" src="Image_130.png"/></span></p><p class="s51" style="padding-top: 2pt;padding-left: 134pt;text-indent: -92pt;line-height: 110%;text-align: left;">Ctrl-Space                        Set the mark at the current point. This is written <span class="s61">\C-@ </span>in both shells; if Ctrl-Space doesn’t work, try Ctrl-2.</p><p class="s51" style="padding-left: 42pt;text-indent: 0pt;line-height: 18pt;text-align: left;">Ctrl-x Ctrl-x In <span class="s61">zsh</span>, swap the mark and the point. Present in <span class="s61">bash </span>without a key defined. Ctrl-w In <span class="s61">bash</span>, kill the region for later yanking. Present in <span class="s61">zsh </span>without a key defined. Esc-w In <span class="s61">zsh</span>, copy the region for yanking, but don’t actually delete the text.</p><p class="s51" style="padding-bottom: 3pt;padding-left: 134pt;text-indent: 0pt;line-height: 9pt;text-align: left;">Present in <span class="s61">bash </span>without a key defined.</p><p style="padding-left: 42pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="504" height="1" alt="image" src="Image_131.png"/></span></p><p class="s29" style="padding-top: 3pt;padding-left: 188pt;text-indent: 0pt;text-align: left;"><a name="bookmark202">CHAPTER 4 </a><span class="s28">■ </span>EN TERING AND ED ITING THE CO MMAND LIN E <span class="s27">87</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 58pt;text-indent: 0pt;text-align: left;">As you see, we’re getting to the point where the behavior of <span class="s33">bash </span>and <span class="s33">zsh </span>start to diverge.</p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">So as to keep the information together, here are the commands to set up Ctrl-x Ctrl-x and Esc<i>-</i>w in <span class="s33">bash</span>:</p><p class="s33" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">bind  &#39;&quot;\C-x\C-x&quot;:  exchange-point-and-mark&#39; bind  &#39;&quot;\M-w&quot;:  copy-region-as-kill&#39;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 185%;text-align: left;">Here is how to set up Ctrl-w in <span class="s33">zsh</span>: <span class="s33">bindkey  &#39;\C-w&#39;  kill-region</span></p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: justify;">Those are the first key bindings we’ve shown; there will be more. You need to type them at a prompt, or save them in your <span class="s33">.bashrc </span>or .<span class="s33">zshrc </span>for later use. For now, note that the long names with hyphens are <i>editor commands</i>, also known as <i>editor functions</i>, or known in <span class="s33">zsh </span>as <i>widgets</i>. There are many of these, and you can bind them to any set of keys the shell understands.</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">If you try Ctrl-w in <span class="s33">zsh </span>without this, you’ll find it kills the previous word. For example, suppose you type the words <span class="s33">echo this is a line</span>. With the original binding of Ctrl-w, typing those keys would delete the word <span class="s33">line</span>. If you have rebound it to <span class="s33">kill-region</span>, however, it will probably delete the whole line. That’s because by default the region starts at the beginning of the line.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part85.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part87.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
