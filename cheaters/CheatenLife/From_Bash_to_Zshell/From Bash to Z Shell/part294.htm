<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Letting Sleeping (or Background) Jobs Lie</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part293.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part295.htm">Next &gt;</a></p><p class="s35" style="padding-left: 40pt;text-indent: 0pt;text-align: left;"><a name="bookmark545">Letting Sleeping (or Background) Jobs Lie</a></p><p style="padding-top: 5pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">So what happens to a job once you exit the shell? In most cases, there is little point in keeping jobs around so it is common for the shell to kill any remaining jobs upon exiting.</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: justify;">By default, <span class="s33">zsh </span>kills any running jobs when you exit the shell. It does this by sending each job the <span class="s33">SIGHUP </span>signal. We met this signal briefly in the section “Starting and Stopping Processes: Signals, Job Control” in Chapter 3 as part of the command <span class="s33">kill  -HUP</span>. That’s an explicit request to send the same signal to a process. In contrast to this, <span class="s33">bash </span>leaves running jobs alone by default.</p><p class="s29" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark565"><span class="s27">264 </span></a>CHAPTER 11 <span class="s28">■ </span>J O BS AN D PR OC E S S ES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 42pt;text-indent: 0pt;line-height: 115%;text-align: left;">Stopped jobs are treated differently: the operating system itself kills them. Actually, <span class="s33">bash </span>will kill any stopped jobs first (using the <span class="s33">SIGTERM </span>signal), but the key point is that they are always killed.</p><p style="padding-left: 42pt;text-indent: 18pt;line-height: 115%;text-align: left;">The shell usually warns you about any stopped or background jobs when you try to exit. After the warning, it returns you to the prompt, so you can do something about the jobs. If you type <span class="s33">exit </span>again immediately, the shell will exit without another warning. It also does this if you type <span class="s33">jobs</span>, then another <span class="s33">exit</span>—the shell assumes you have seen the list of jobs and are satisfied.</p><p style="padding-left: 60pt;text-indent: 0pt;line-height: 10pt;text-align: left;">There are various ways in <span class="s33">zsh </span>of preventing the shell from killing jobs on exit:</p><p style="padding-top: 8pt;padding-left: 67pt;text-indent: -10pt;line-height: 115%;text-align: left;">• Set the option <span class="s33">nohup</span>. Then the shell won’t kill running jobs when it exits. (Stopped jobs will be killed by the operating system anyway, though the shell won’t do this deliberately.) The shell will still warn you about stopped and background jobs, however. You can disable the warning, too, by unsetting the option <span class="s33">check_jobs</span>. This is the easiest choice if you’re not concerned about old jobs hanging around.</p><p style="padding-top: 7pt;padding-left: 67pt;text-indent: -10pt;line-height: 115%;text-align: left;">• If you want some but not all commands to be left running when the shell exits, you can put <span class="s33">nohup </span>in front of any command line. This tells the command to ignore any <span class="s33">SIGHUP </span>sent to it, so that the command will be left running when the shell exits. For example, you might use <span class="s33">nohup </span>for a program that downloads a large file. Any output from the command is put in a file named <span class="s33">nohup.out</span>. Note that <span class="s33">nohup </span>doesn’t automatically run the command in the background so you still need to end the command line with <span class="s33">&amp;</span>.</p><p style="padding-top: 7pt;padding-left: 67pt;text-indent: -10pt;line-height: 115%;text-align: left;">• You can use the shell’s <span class="s33">disown </span>command to tell the shell to ignore the job completely. The shell won’t send <span class="s33">SIGHUP </span>to the job. This method has the side effect that no job control commands will work. Even <span class="s33">jobs </span>won’t show the command any more. If this isn’t a problem, you can start the job in the background with <span class="s33">&amp;! </span>at the end of the line instead of <span class="s33">&amp;</span>. This immediately disowns the job.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 42pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="504" height="1" alt="image" src="Image_225.png"/></span></p><p class="s21" style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;line-height: 117%;text-align: left;">■<span class="s23">Tip </span><span class="s19">You can use disown any time you don’t want a job to appear in the list, not just to ignore SIGHUP. The same is true for the &amp;! syntax to start a job in the background and disown it. The latter is quite useful with commands that bring up a new window, since normally you interact with these directly rather than from the terminal. For example, you can start a new terminal emulator with xterm &amp;! and it won’t appear in the shell’s job list.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 42pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="504" height="1" alt="image" src="Image_226.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">All the commands <span class="s33">fg</span>, <span class="s33">bg</span>, and <span class="s33">disown </span>use the job marked with a <span class="s33">+ </span>in the jobs list whenever you don’t give them a job number.</p><p class="s33" style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">bash <span class="p">works a bit differently. We mention it second because by default it doesn’t kill running jobs when it exits, so you’re less likely to become aware of the issue. However, if you set (with </span>shopt -s<span class="p">) the </span>huponexit <span class="p">option, </span>bash <span class="p">will also send the </span>SIGHUP <span class="p">signal to running jobs. Note, however, that the option only has an effect from an interactive login shell. See the section “Login Shells” in Chapter 5 for what we mean by that.</span></p><p style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">With <span class="s33">huponexit </span>set, <span class="s33">nohup</span>, which is a standard external command, is also useful in <span class="s33">bash</span>. Since <span class="s33">nohup </span>is not part of the shell, you can’t use it with commands that are built into the shell or with shell functions. It will work with scripts, however.</p><p class="s29" style="padding-top: 3pt;padding-left: 269pt;text-indent: 0pt;text-align: left;"><a name="bookmark566">CHAP TER 11 </a><span class="s28">■ </span>JO BS AND PROCESSES <span class="s27">265</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">The <span class="s33">disown </span>command is also available in <span class="s33">bash </span>and works like it does in <span class="s33">zsh</span>, removing the job completely from the shell’s list of jobs. However, in <span class="s33">bash </span>you can also execute <span class="s33">disown -h</span></p><p class="s33" style="padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">%<span class="s32">num </span><span class="p">to tell the shell that you don’t want the job to be sent </span>SIGHUP <span class="p">when the shell exits. In this case you can still do job control. The </span>&amp;! <span class="p">syntax doesn’t exist, unfortunately.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="toc">&nbsp;</p><div class="toc"><a class="toc0" href="part295.htm">Reducing the Priority of Background Jobs</a></div><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part293.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part295.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
