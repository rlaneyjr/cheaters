<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>The break and continue Statements</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part343.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part345.htm">Next &gt;</a></p><p class="s18" style="padding-left: 42pt;text-indent: 0pt;text-align: left;"><a name="bookmark636">The break and continue Statements</a></p><p style="padding-top: 5pt;padding-left: 42pt;text-indent: 0pt;line-height: 115%;text-align: left;">Sometimes, you want more control over when you exit from a loop. For this, there are the <span class="s33">break </span>and <span class="s33">continue </span>statements. <span class="s33">break </span>is used to exit immediately from a loop. It is often useful if an error occurs. For instance, in the example from the section “Building Our Script” in Chapter 2, we might want to bail out of the loop if the <span class="s33">cd </span>command fails. The change to that example is highlighted in bold.</p><p class="s33" style="padding-top: 7pt;padding-left: 51pt;text-indent: -9pt;line-height: 115%;text-align: left;">for dir in `echo &quot;$PATH&quot; | tr &#39;:&#39; &#39; &#39;`; do cd &quot;$dir&quot; <b>|| break</b></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s33" style="padding-left: 51pt;text-indent: 0pt;text-align: left;">for file in *; do</p><p class="s33" style="padding-top: 1pt;padding-left: 51pt;text-indent: 8pt;line-height: 115%;text-align: left;">[[ -x $file &amp;&amp; ! -d $file ]] &amp;&amp; echo &quot;$file&quot; done</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s33" style="padding-left: 42pt;text-indent: 0pt;text-align: left;">done | sort &gt; proglist</p><p style="padding-top: 8pt;padding-left: 42pt;text-indent: 18pt;line-height: 115%;text-align: left;">You may be wondering what would happen if we put the <span class="s33">break </span>inside the inner loop: which loop would it break out of? The answer is that it would just break out of the inner loop. If you wanted to break out of an outer loop, you can pass a number to <span class="s33">break </span>specifying how many levels you want to break out of. So in this case, you could use <span class="s33">break 2</span>.</p><p style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">On the other hand, the <span class="s33">continue </span>statement causes control to advance to the next iteration of the loop skipping any following commands. Like <span class="s33">break</span>, <span class="s33">continue </span>can be passed a numeric argument to allow execution to skip to the next iteration of an outer loop. If, in the example above, we wanted to do a lot more for each file it finds, we might use</p><p class="s33" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">for file in *; do</p><p class="s33" style="padding-top: 1pt;padding-left: 50pt;text-indent: 0pt;line-height: 115%;text-align: left;">[[ -x $file &amp;&amp; ! -d $file ]] || continue echo &quot;$file&quot;</p><p class="s33" style="padding-left: 50pt;text-indent: 0pt;line-height: 10pt;text-align: left;"># <span class="s32">lots more commands…</span></p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">done</p><p class="s29" style="padding-top: 3pt;padding-left: 249pt;text-indent: 0pt;text-align: left;"><a name="bookmark673">CHAPTER 13 </a><span class="s28">■ </span>SCRIPTING AND FUNCTION S <span class="s27">317</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="507" height="1" alt="image" src="Image_264.png"/></span></p><p class="s21" style="padding-top: 33pt;padding-left: 40pt;text-indent: 0pt;line-height: 114%;text-align: left;">■<span class="s23">Tip </span><span class="s19">Occasionally, you may want to write a loop where there is no exit condition at the beginning of each iteration: the only way out of the loop is a break command in the middle. For these situations, there is a true command that always returns success and so can be used as the loop condition as follows:</span></p><p class="s33" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">while true; do</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="507" height="1" alt="image" src="Image_265.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part343.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part345.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
