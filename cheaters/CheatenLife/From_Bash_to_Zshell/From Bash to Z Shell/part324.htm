<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Alternative and Default Values</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part323.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part325.htm">Next &gt;</a></p><p class="s35" style="padding-left: 40pt;text-indent: 0pt;text-align: left;"><a name="bookmark589">Alternative and Default Values</a></p><p style="padding-top: 5pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: justify;">Sometimes, if a variable is unset or empty, it can be useful to have a default value as a substitute. You might handle this using an <span class="s33">if </span>statement, as we’ll see in the next chapter, but that can be quite a long way of expressing it. So to specify a default value in an expansion, you can use</p><p class="s33" style="padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">${<span class="s32">variable:-default</span>}<span class="p">. For example, you might have a script that uses the </span>PAGER <span class="p">environment variable to choose a suitable program to pipe output into, but it is wise to specify a default in case the user has left it unset:</span></p><p class="s33" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">ls -l | ${PAGER:-more}</p><p class="s29" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark616"><span class="s27">294 </span></a>CHAPTER 12 <span class="s28">■ </span>VARIABLES </p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s33" style="padding-left: 42pt;text-indent: 18pt;line-height: 115%;text-align: left;"><span class="p">A similar substitution performs the inverse: the word on the right is substituted only when the variable is set. This takes the form </span>${<span class="s32">variable</span>:+<span class="s32">alternative</span>}<span class="p">.</span></p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 10pt;text-align: left;">For example, from a script you might use the following to print a file using <span class="s33">lp</span>. If the <span class="s33">dest</span></p><p style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">variable is set, it will be substituted with the <span class="s33">-d </span>option preceding it:</p><p class="s33" style="padding-top: 8pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">lp  ${dest:+-d$dest}  file</p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">That is, if the <span class="s33">dest </span>variable has been set, the shell will execute <span class="s33">lp  -d</span><i>DDDD  </i><span class="s33">file</span>, where <i>DDDD </i>is the value of <span class="s33">dest</span>; otherwise the shell will simply execute <span class="s33">lp  file</span>. <span class="s33">lp</span>’s <span class="s33">-d </span>option allows the destination (print queue) to be specified. So this would allow the default destination to be overridden in a script by setting the <span class="s33">dest </span>variable.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part323.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part325.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
