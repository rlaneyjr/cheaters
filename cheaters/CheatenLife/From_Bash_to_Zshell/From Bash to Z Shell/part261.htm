<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Completing Things Other Than Files</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part260.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part262.htm">Next &gt;</a></p><p class="s35" style="padding-left: 40pt;text-indent: 0pt;text-align: left;"><a name="bookmark482">Completing Things Other Than Files</a></p><p style="padding-top: 5pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">We showed you examples of completing filenames in the section “Building Pathnames by Completion” in Chapter 1 and at the beginning of this chapter. Filenames are not the only thing that can be completed, though. For example, if a word starts with a <span class="s33">$</span>, the shell will inter- pret it as a variable reference so it makes sense to complete variable names after a $. This both <span class="s33">bash </span>and <span class="s33">zsh </span>will duly do:</p><p class="s33" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">% <b>echo $OS</b>&lt;tab&gt;</p><p style="padding-top: 8pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">expands to</p><p class="s33" style="padding-top: 8pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">% <b>echo $OSTYPE</b></p><p style="padding-top: 8pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">For another example, try completion after a tilde (<span class="s33">~</span>). As you might expect, this will complete usernames. <span class="s33">bash </span>will also complete hostnames taken from <span class="s33">/etc/hosts </span>if the current word contains an <span class="s33">@ </span>character. For this to work, you will have to make sure the <span class="s33">hostcomplete </span>option has not been turned off.</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">Sometimes, you might want to complete usernames, variables, or hostnames when the current word doesn’t start with the requisite character. To do this <span class="s33">bash </span>provides a number of separate key bindings that you can use instead of Tab. These include Esc ~ for completing user- names, Esc $ to complete variable names, and Esc @ to complete hostnames. Additionally, there is Esc !, which will complete the names of commands, and Esc /, which will complete filenames. In the following example, we use Esc @ to complete the remaining characters of a hostname:</p><p class="s29" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark513"><span class="s27">234 </span></a>CHAPTER 10 <span class="s28">■ </span>COMPLETION </p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s33" style="padding-left: 42pt;text-indent: 0pt;text-align: left;">bash$ <b>telnet loc</b>&lt;escape&gt;&lt;@&gt;</p><p class="s67" style="padding-top: 1pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">➤ <span class="s33">telnet localhost</span></p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">Before programmable completion was added, this was about the limit of what <span class="s33">bash </span>could do. Programmable completion allows the shell to see that the <span class="s33">telnet </span>command is being used and so complete hostnames, just with the Tab key. <span class="s33">zsh </span>does not have key combinations like these set up by default, but they can be enabled. Some of the completion functions define <span class="s33">zle </span>editor functions and become available after <span class="s33">compinit </span>has run. One such editor function is</p><p class="s33" style="padding-left: 41pt;text-indent: 0pt;line-height: 10pt;text-align: left;">_bash_complete-word <span class="p">and to use it all you need to do is bind the keys. For example:</span></p><p class="s33" style="padding-top: 8pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">bindkey &#39;\e!&#39; _bash_complete-word</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part260.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part262.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
