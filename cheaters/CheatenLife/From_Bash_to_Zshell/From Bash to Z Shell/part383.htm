<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Case Study I: Multiple Tasks in Widgets</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part382.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part384.htm">Next &gt;</a></p><h4 style="padding-left: 40pt;text-indent: 0pt;text-align: left;"><a name="bookmark714">Case Study I: Multiple Tasks in Widgets</a></h4><p style="padding-top: 6pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: justify;">Many widgets occur in pairs, for example <span class="s33">backward-char </span>and <span class="s33">forward-char</span>, bound by default to the Left and Right Arrow keys. Often your own widgets will be in pairs, too. You now know how to write two separate functions to implement such widgets. However, it’s often neater in such</p><p class="s29" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><span class="s27">356 </span>CHAPTER 14 <span class="s28">■ </span>WRITING EDITOR CO MMANDS </p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 115%;text-align: left;">cases to write a single function to implement both widgets. That’s particularly true if they have code in common. However, even if there is very little in common between the two widgets, it’s much easier to keep the implementation of the two widgets consistent when the code is in a single function.</p><p style="padding-left: 62pt;text-indent: 0pt;line-height: 10pt;text-align: left;">To demonstrate this feature, we’ll create functions like <span class="s33">delete-word </span>and</p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;line-height: 115%;text-align: left;">backward-delete-word<span class="p">, but where a “word” is everything up to the next or previous whitespace character. We’ll interpret this simply, so the whitespace will have this effect even if it’s quoted.</span></p><p style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">Let’s name the function <span class="s33">delete-space-word</span>, which will be autoloaded, as usual, and the two widgets <span class="s33">delete-space-word </span>(for deleting the word following the cursor) and</p><p class="s33" style="padding-left: 41pt;text-indent: 0pt;line-height: 115%;text-align: left;">backward-delete-space-word<span class="p">. Again, we’ll assume it’s in a file in your function path. To tell the shell about it, we need to execute the following:</span></p><p class="s33" style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;line-height: 115%;text-align: left;">autoload delete-space-word zle -N delete-space-word</p><p class="s33" style="padding-left: 41pt;text-indent: 0pt;line-height: 10pt;text-align: left;">zle -N backward-delete-space-word delete-space-word</p><p style="padding-top: 8pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">Now here’s the body of the function <span class="s33">delete-space-word</span>:</p><p class="s33" style="padding-top: 8pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"># <i>Set up the options for the function</i></p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;line-height: 115%;text-align: left;">emulate -L zsh setopt extended_glob</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s33" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">#  <i>Test  whether  we  are  the  forward  or  backward  widget.</i></p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">if [[ $WIDGET = backward-* ]]; then</p><p class="s33" style="padding-top: 1pt;padding-left: 51pt;text-indent: 0pt;text-align: left;"># <i>Backward: remove any whitespace from end of left buffer</i></p><p class="s33" style="padding-top: 1pt;padding-left: 51pt;text-indent: 0pt;text-align: left;">LBUFFER=${LBUFFER%%[[:space:]]#}</p><p class="s33" style="padding-top: 1pt;padding-left: 51pt;text-indent: 0pt;text-align: left;"># <i>Now remove non-whitespace before that</i></p><p class="s33" style="padding-top: 1pt;padding-left: 51pt;text-indent: 0pt;text-align: left;">LBUFFER=${LBUFFER%%[^[:space:]]#}</p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">else</p><p class="s33" style="padding-top: 1pt;padding-left: 51pt;text-indent: 0pt;text-align: left;"># <i>Forward: remove any whitespace from start of right buffer</i></p><p class="s33" style="padding-top: 1pt;padding-left: 51pt;text-indent: 0pt;text-align: left;">RBUFFER=${RBUFFER##[[:space:]]#}</p><p class="s33" style="padding-top: 1pt;padding-left: 51pt;text-indent: 0pt;text-align: left;"># <i>Now remove non-whitespace after that</i></p><p class="s33" style="padding-top: 1pt;padding-left: 51pt;text-indent: 0pt;text-align: left;">RBUFFER=${RBUFFER##[^[:space:]]#}</p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">fi</p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: justify;">There are three parts to the function. First, we set up some options. We are going to need <span class="s33">extended_glob </span>for the patterns; to avoid making assumptions about what options are normally set, we set the <span class="s33">zsh </span>default options locally using <span class="s33">emulate</span>.</p><p style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">Next, we need to test which widget we are implementing. The special variable <span class="s33">WIDGET </span>contains this information. We simply test if the name starts with <span class="s33">backward-</span>. The widget could have a different name, as long as the first word is <span class="s33">backward </span>for a widget going backward. This is the standard <span class="s33">zsh </span>naming scheme.</p><p style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: justify;">Finally comes the actual code for changing the buffer in the two cases. Because they’re so similar, we’ve decided to bundle them together in a single function. While there’s no need for them to be together, putting them there means that if you ever change the behavior you’ll see right away what needs to be done for both.</p><p style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">We use the standard variable substitutions to remove the first part of the right buffer, if we’re moving forward, or the last part of the left buffer, if we’re moving backward. We explained those in the section “Patterns” in Chapter 12. The doubled <span class="s33">## </span>and <span class="s33">%% </span>ensure that we remove the</p><p class="s29" style="padding-top: 3pt;padding-left: 241pt;text-indent: 0pt;text-align: left;"><a name="bookmark734">CHAP TER 14 </a><span class="s28">■ </span>WRITING EDITOR COMMANDS <span class="s27">357</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">longest possible match, from the head of the string or the tail of the string, respectively. The character classes with a <span class="s33"># </span>afterward match any number of occurrences of space characters or, with the <span class="s33">^</span>, any character other than a space character.</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">The reason there are two statements in each branch of the <span class="s33">if </span>is to mimic another piece of standard shell behavior when handling words. First, it deletes any whitespace between the cursor and the next (or previous) word. Only then does it look for the word and delete that.</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: justify;">As an exercise, you can add code that uses <span class="s33">NUMERIC </span>to delete multiple words at once. If you want to be really sophisticated, you can use a negative value for <span class="s33">NUMERIC </span>to switch the forward and backward behaviors. This is what the built-in widgets do, though you may never have noticed.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part382.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part384.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
