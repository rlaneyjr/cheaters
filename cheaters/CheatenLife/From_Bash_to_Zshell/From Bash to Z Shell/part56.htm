<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Using the Results (via Aliases and Functions)</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part55.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part57.htm">Next &gt;</a></p><h4 style="padding-left: 76pt;text-indent: 0pt;text-align: left;"><a name="bookmark90">Using the Results (via Aliases and Functions)</a></h4><p style="padding-top: 6pt;padding-left: 76pt;text-indent: 0pt;line-height: 115%;text-align: left;">Finally, here are a couple of ways to use the <span class="s33">proglist </span>file. Let’s make a shell function (for Bourne shells) and an alias (for C shells) named <span class="s33">findpgm </span>(“find program”) that searches for program names containing a particular string of characters. We’ll search with the <span class="s33">grep </span>program, but you might choose to use another search program—for instance, a “soundex” search program to find words that “sound like” the program name you enter. This is Unix, so there are lots of choices, and most programs’ command lines will simply “drop in” to replace <span class="s33">grep</span>.</p><p style="padding-left: 76pt;text-indent: 18pt;line-height: 115%;text-align: left;">Assuming that your data file is in your home directory, an alias like this should do the job on <span class="s33">tcsh </span>and <span class="s33">csh</span>:</p><p class="s33" style="padding-top: 6pt;padding-left: 76pt;text-indent: 0pt;text-align: left;">alias findpgm &#39;grep &quot;\!^&quot; ~/proglist | column&#39;</p><p style="padding-top: 8pt;padding-left: 76pt;text-indent: 18pt;line-height: 115%;text-align: left;">(We introduced aliases in the section “Command Lines” in Chapter 1.) This alias takes advantage of the C shell tilde abbreviation (<span class="s33">~</span>) for your home directory. The bizarre-looking string <span class="s33">\!^ </span>is actually a history reference (see the section “History” in Chapter 1) that expands into the first argument on the command line when you use the alias. If you don’t have <span class="s33">column</span>, you can use whatever other column-making program you used earlier.</p><p style="padding-left: 76pt;text-indent: 20pt;line-height: 115%;text-align: left;">Next, let’s see the corresponding Bourne shell function. (The <span class="s33">$1 </span>expands into the first argument you give when you use the function. For instance, when you run <span class="s33">findpgm edit</span>, <span class="s33">$1 </span>from your function code would expand into <span class="s33">edit</span>. See the section “Positional Parameters” in Chapter 13.) Here’s the function:</p><p class="s33" style="padding-top: 6pt;padding-left: 76pt;text-indent: 0pt;text-align: left;">findpgm()</p><p class="s33" style="padding-top: 1pt;padding-left: 76pt;text-indent: 0pt;text-align: left;">{</p><p class="s33" style="padding-top: 1pt;padding-left: 85pt;text-indent: 0pt;text-align: left;">grep &quot;$1&quot; $HOME/proglist | column</p><p class="s33" style="padding-top: 1pt;padding-left: 76pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-top: 8pt;padding-left: 94pt;text-indent: 0pt;text-align: left;">You can type the alias or function at your shell prompt to test it. If you want to keep it, add</p><p style="padding-top: 1pt;padding-left: 76pt;text-indent: 0pt;text-align: left;">it to the appropriate shell startup file in your home directory. Let’s see this work:</p><p class="s33" style="padding-top: 8pt;padding-left: 76pt;text-indent: 0pt;text-align: left;">%  <b>findpgm  edit</b></p><p class="s33" style="padding-top: 1pt;padding-left: 76pt;text-indent: 0pt;line-height: 115%;text-align: left;">gedit                  gnome-edit-properties-capplet       kedit                  kmenuedit gnome-edit         gxedit                                                 kiconedit           mcedit</p><p class="s29" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark116"><span class="s27">52 </span></a>CHAPTER 2 <span class="s28">■ </span>USING SHELL FEATURES TOGETHER </p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">We’ve covered a lot of material in this chapter. The point here isn’t to show you everything there is to know about writing loops and tests in the shell. It’s to show that, with some simple shell commands and features—many you also might use sometimes at a command line—you can write a series of commands that automates some tedious work.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part55.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part57.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
