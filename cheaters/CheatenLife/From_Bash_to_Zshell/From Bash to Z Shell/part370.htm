<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>The bash Debugger</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part369.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part371.htm">Next &gt;</a></p><p class="s35" style="padding-left: 42pt;text-indent: 0pt;text-align: left;"><a name="bookmark662">The bash Debugger</a></p><p style="padding-top: 5pt;padding-left: 42pt;text-indent: 0pt;line-height: 115%;text-align: left;">For some problems, the trace information just doesn’t given you enough information about the state of the program at a particular point during its execution. In such a situation, you may want to revert to using a traditional debugger.</p><p style="padding-left: 41pt;text-indent: 18pt;line-height: 114%;text-align: left;">There are a few such debuggers available. A <span class="s33">ksh </span>debugger has been around for some time. <span class="s33">bash </span>users will find themselves in a better position—in the <span class="s33">examples </span>directory within the <span class="s33">bash </span>source, you will find the <span class="s33">bashdb </span>script. There are also enhancements to this script, including changes to <span class="s33">bash </span>itself, available from a separate <span class="s33">bashdb </span>project. See Appendix B for more infor- mation on obtaining this. Many of the changes from the <span class="s33">bashdb </span>project have been merged into <span class="s33">bash </span>version 3 but we would still recommend downloading <span class="s33">bashdb </span>directly.</p><p style="padding-left: 41pt;text-indent: 17pt;line-height: 115%;text-align: left;">The interface for the <span class="s33">bash </span>debugger is modeled on the <span class="s33">dbx </span>and <span class="s33">gdb </span>debuggers, which you may know of from debugging compiled programs. So you may find the interface to be quite familiar.</p><p style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">To use the debugger, you simply run <span class="s33">bashdb </span>with the name of the script as a parameter. It will then prompt you with the current line in the script and its line number. Using commands you can step through the script, print the values of variables, set breakpoints, and do other things you would expect to be able to do in a normal debugger. Table 13-2 shows some of the most common commands. This is taken from a recent version of the <span class="s33">bash </span>debugger, which may differ from what you have. In any case, you can always run <span class="s33">help </span>to get a list of available commands.</p><p class="s29" style="padding-top: 3pt;padding-left: 249pt;text-indent: 0pt;text-align: left;"><a name="bookmark701">CHAPTER 13 </a><span class="s28">■ </span>SCRIPTING AND FUNCTION S <span class="s27">345</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s13" style="padding-bottom: 4pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">Table 13-2. <span class="s32">Common bash Debugger Commands</span></p><p style="padding-left: 40pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="504" height="1" alt="image" src="Image_283.png"/></span></p><p class="s48" style="padding-bottom: 2pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">Command Purpose</p><p style="padding-left: 40pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="504" height="1" alt="image" src="Image_284.png"/></span></p><p class="s61" style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">break <span class="s51">List breakpoints or set one at the specified line</span></p><p class="s61" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">continue <span class="s51">Continue running until the next breakpoint or the end of the script</span></p><p class="s61" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">delete <span class="s51">Delete a breakpoint</span></p><p class="s61" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">list <span class="s51">List sections of the script</span></p><p class="s61" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">next <span class="s51">Single step, stepping over function calls or sourced files</span></p><p class="s61" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">print <span class="s51">Print the values of variables</span></p><p class="s61" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">step <span class="s51">Single step, stepping into function calls or sourced files</span></p><p class="s61" style="padding-top: 5pt;padding-bottom: 4pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">help <span class="s51">Find out about the available commands</span></p><p style="padding-left: 40pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="504" height="1" alt="image" src="Image_285.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 114%;text-align: left;">Note that many commands can be shortened to their first letter. So you can use “<span class="s33">n</span>” instead of “<span class="s33">next</span>” or “<span class="s33">s</span>” instead of “<span class="s33">step</span>”.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part369.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part371.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
