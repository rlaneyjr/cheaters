<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Finding Other Files</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part192.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part194.htm">Next &gt;</a></p><p class="s35" style="padding-left: 40pt;text-indent: 0pt;text-align: left;"><a name="bookmark358">Finding Other Files</a></p><p style="padding-top: 5pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">Suppose you know that a file lives somewhere under a particular directory, for example your home directory, but you can’t pinpoint the exact location. The usual way of finding the file is to use the <span class="s33">find </span>command. Unfortunately, this command has a rather bizarre syntax. Here’s how to find a file called <span class="s33">addrs.txt </span>under your home directory:</p><p class="s33" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">% <b>find ~ -name addrs.txt -print</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">/home/pws/text/addrs.txt</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">/home/pws/text/writing/addrs.txt</p><p style="padding-top: 8pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">The command accepts as input a whole series of options, some (like <span class="s33">-name</span>) with an argu- ment, some (like <span class="s33">-print</span>) without. It starts at the directory you give first, in this case <span class="s33">~</span>, and descends through all the directories below it, examining each file for a potential match, including subdirectories. The match criteria are determined by the supplied options, with each option representing a test. The option <span class="s33">-name </span>causes <span class="s33">find </span>to compare each filename with the argument that follows the option. If it matches, the test succeeds, and <span class="s33">find </span>goes on to <span class="s33">-print</span>. That doesn’t look like a test, and in fact it always acts as if the test were true. It has the side effect of printing the filename including the directory portion of the name. The <span class="s33">~ </span>is expanded to <span class="s33">/home/pws </span>in this output. (That was done by the shell before the command executed.)</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">The <span class="s33">find </span>command allows you to use patterns, but you must remember to put quotes around them so that the shell doesn’t expand them to the name of files in the current directory. Here’s an example of how you might find this confusing. Suppose you’re looking for files ending in <span class="s33">.c </span>with the pattern <span class="s33">*.c</span>. You issue the following (incorrect) command:</p><p class="s33" style="padding-top: 6pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">% <b>find . -name *.c -print</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">./testprog.c</p><p style="padding-top: 8pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: justify;">Only one file was found, but you are sure there are more in subdirectories. What happened? The shell expanded the pattern <span class="s33">*.c </span>to <span class="s33">testprog.c </span>and then passed this argument to <span class="s33">find</span>. So the command only searched for files called <span class="s33">testprog.c</span>, and there was only one. Let’s do it properly by quoting the pattern:</p><p class="s29" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><span class="s27">176 </span>CHAPTER 8 <span class="s28">■ </span>FILES AND DIRECTORIES </p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s33" style="padding-left: 42pt;text-indent: 0pt;text-align: left;">% <b>find . -name &#39;*.c&#39; -print</b></p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">./Src/main.c</p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">./Src/options.c</p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">./Src/utils.c</p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">./testprog.c</p><p style="padding-top: 8pt;padding-left: 42pt;text-indent: 18pt;line-height: 115%;text-align: left;">Now <span class="s33">find </span>has been given the pattern as an argument, as you wanted. Once you’ve got the idea of <span class="s33">find</span>, you can read the manual for more of the long list of tests it can perform. We’ll show you a few more examples.</p><p style="padding-left: 42pt;text-indent: 18pt;line-height: 115%;text-align: left;">First, let’s consider how to test for the type of a file, in this case for a directory. Let’s look for all directories called <span class="s33">tmp</span>. This time, we’ll tell <span class="s33">find </span>to output more detailed information about the file. We can do this by using the option <span class="s33">-ls</span>, which produces output similar to the command <span class="s33">ls  -l</span>, although with a few extra pieces of information. The output depends on the version of <span class="s33">find</span>; in the example we show, from GNU <span class="s33">find</span>, the first number on the left is the inode we mentioned earlier in our discussion of hard links:</p><p class="s33" style="padding-top: 6pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">% <b>find ~ -name tmp -type d -ls</b></p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">1114154 4 drwxrwxr-x 21 pws users 4096 Sep 14 19:05 /home/pws/tmp</p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">508128 4 drwxr-xr-x 2 pws users 4096 Feb 25 2003 /home/pws/.gimp-1.2/tmp</p><p style="padding-top: 8pt;padding-left: 42pt;text-indent: 18pt;line-height: 115%;text-align: left;">The next example shows how you can make <span class="s33">find </span>choose one of a set of alternatives. This is most useful when the files you are searching for could have different names that aren’t easily written in a single pattern. This example looks for some types of file that might have been generated by compiling on a Windows system:</p><p class="s33" style="padding-top: 7pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">% <b>find . \( -name &#39;*.exe&#39; -or -name &#39;*.obj&#39; \) -print</b></p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">./src/main.obj</p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">./src/output.obj</p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">./bin/program.exe</p><p style="padding-top: 8pt;padding-left: 42pt;text-indent: 18pt;line-height: 115%;text-align: justify;">The code now includes parentheses with backslashes in front and <span class="s33">-or </span>in the middle. (The parentheses are quoted because they are special to the shell.) The effect is that the expression in parentheses is considered true if either of the two <span class="s33">-name </span>tests is true. You can have extra</p><p class="s33" style="padding-left: 42pt;text-indent: 0pt;line-height: 10pt;text-align: left;">-or<span class="p">’s, or extra levels of parentheses, if you need them.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="toc">&nbsp;</p><div class="toc"><a class="toc0" href="part194.htm">Using find to Execute a Command</a><a class="toc0" href="part195.htm">Running find in a Pipeline</a><a class="toc0" href="part196.htm">The locate Command</a></div><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part192.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part194.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
