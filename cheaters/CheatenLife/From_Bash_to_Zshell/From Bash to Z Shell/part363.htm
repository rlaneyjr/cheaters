<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Replacing Built-in Commands</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part362.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part364.htm">Next &gt;</a></p><p class="s35" style="padding-left: 42pt;text-indent: 0pt;text-align: left;"><a name="bookmark655">Replacing Built-in Commands</a></p><p style="padding-top: 5pt;padding-left: 42pt;text-indent: 0pt;line-height: 115%;text-align: left;">We are not limited to traps and special functions if we want to intercept an operation within in the shell. By replacing a built-in command with a function, we can extend the built-in by adding extra functionality to it. Our function can go away and do whatever it wants before calling the real built-in.</p><p style="padding-left: 42pt;text-indent: 18pt;line-height: 115%;text-align: left;">If you want to create a function that replaces a built-in, the main thing you need to be aware of is the order in which the shell resolves a command. In <span class="s33">bash </span>and <span class="s33">zsh</span>, functions come before built-ins, so we just need to create a function with the same name. This opens a way to make up for the lack of a <span class="s33">chpwd </span>function in <span class="s33">bash</span>: we just need to have a wrapper function named <span class="s33">cd</span>. You would also need to do the same for <span class="s33">pushd </span>and <span class="s33">popd</span>, if you use them.</p><p style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">Note that <span class="s33">ksh </span>resolves built-ins before functions. Aliases are resolved before built-ins, though, so you can use an alias to call your function:</p><p class="s33" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 115%;text-align: left;">newcd() { … } alias cd=newcd</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: justify;">Instead of showing you yet again how to modify the title bar, we’ll do something different. In the section “Special zsh Directory Features” in Chapter 8 we showed how <span class="s33">zsh</span>’s <span class="s33">cd </span>command does a form of search and replace on the current directory if it’s passed two arguments. So what we’ll do here is extend <span class="s33">bash</span>’s <span class="s33">cd </span>command to do the same.</p><p class="s33" style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">cd() {</p><p class="s33" style="padding-top: 1pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">if (( $# &gt; 1 )); then</p><p class="s33" style="padding-top: 1pt;padding-left: 68pt;text-indent: -9pt;line-height: 115%;text-align: left;">if [[ $PWD = *$1* ]]; then builtin cd ${PWD/$1/$2}</p><p class="s33" style="padding-left: 59pt;text-indent: 0pt;line-height: 10pt;text-align: left;">else</p><p class="s33" style="padding-top: 1pt;padding-left: 68pt;text-indent: 0pt;text-align: left;">echo &quot;$FUNCNAME: string not in pwd: $1&quot;</p><p class="s33" style="padding-top: 1pt;padding-left: 50pt;text-indent: 8pt;line-height: 115%;text-align: left;">fi else</p><p class="s33" style="padding-left: 59pt;text-indent: 0pt;line-height: 10pt;text-align: left;">builtin cd &quot;$1&quot;</p><p class="s33" style="padding-top: 1pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">fi</p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-top: 8pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">The first thing this does is to check if it was given more than one argument. If not, the real</p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;line-height: 115%;text-align: justify;">cd <span class="p">is called. You need to precede this command with </span>builtin<span class="p">; otherwise the function will call itself. In the first branch of the </span>if <span class="p">statement we handle two arguments. The </span>PWD <span class="p">variable contains the current directory so we can apply a substitution on that. It also prints an error message if the first argument doesn’t appear in the current directory.</span></p><p style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">You can improve this function in a few ways. It doesn’t take much effort to get its return status right for one thing. It also doesn’t handle options to <span class="s33">cd </span>properly. To deal with them, you may want to refer back to the section “Option Parsing” earlier in this chapter. Alternatively, if you have a copy of the <span class="s33">bash </span>source, have a look in the <span class="s33">examples </span>directory and you will find a decent version of this function.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part362.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part364.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
