<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>The Directory Stack</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part202.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part204.htm">Next &gt;</a></p><p class="s35" style="padding-left: 42pt;text-indent: 0pt;text-align: left;"><a name="bookmark368">The Directory Stack</a></p><p style="padding-top: 5pt;padding-left: 42pt;text-indent: 0pt;line-height: 115%;text-align: left;">You sometimes find that you are switching between many different directories to do your work. To help you, <span class="s33">bash </span>and <span class="s33">zsh </span>have a <i>directory stack</i>. This is a list of directories you’ve visited, where the first in the list is the current directory. The shell then provides a simple way to switch to other directories in the list. The name “stack” is used because the last thing you put in is the first to come out: you can think of a pile of books where the nearest to hand is the one you last put on top.</p><p style="padding-left: 42pt;text-indent: 18pt;line-height: 115%;text-align: left;">The two basic commands are <span class="s33">pushd </span>and <span class="s33">popd</span>, which add a directory or remove the last directory added:</p><p class="s33" style="padding-top: 7pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">% <b>pwd</b></p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">/home/pws</p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">% <b>pushd zsh/projects/zshbook</b></p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">~/zsh/projects/zshbook ~</p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">% <b>pushd ~/elisp</b></p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">~/elisp ~/zsh/projects/zshbook ~</p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">% <b>popd</b></p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">~/zsh/projects/zshbook ~</p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">% <b>popd</b></p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">~</p><p class="s29" style="padding-top: 3pt;padding-left: 263pt;text-indent: 0pt;text-align: left;">CHAPTER 8 <span class="s28">■ </span>FILES AND D I RECTORIES <span class="s27">183</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">Each time you add something to or take something off the stack, the shell shows you the new stack; the current directory is always the one at the left of the list. If you forget what’s on it, the command <span class="s33">dirs </span>will show the stack in exactly the same form. You can execute the command <span class="s33">dirs -v </span>to show an enumerated list, one entry per line. This is useful since the numbers can be used to refer to the directories with one of the shorthand forms using <span class="s33">~</span>. Here’s an example where we use the directory stack and then print the value of the item numbered 2:</p><p class="s33" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">zsh% <b>dirs -v</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">0 ~/src/zsh</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">1 ~/tmp</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">2 ~/zsh/projects/zshbook zsh% <b>echo ~2</b></p><p class="s33" style="padding-left: 40pt;text-indent: 0pt;line-height: 10pt;text-align: left;">/home/pws/zsh/projects/zshbook</p><p style="padding-top: 8pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">Many times you probably find you’re switching between a small group of directories in an apparently random order. The <span class="s33">pushd </span>commandcan help with that, too. If you type <span class="s33">pushd </span>on its own, it will swap the two directories on the top of the stack. This is similar to what <span class="s33">cd - </span>does, except <span class="s33">cd </span>has no knowledge of the stack and only affects the current directory at the stack and nothing else. For example, if you use <span class="s33">pushd </span>to switch to a directory, then <span class="s33">cd - </span>to switch to the original directory, you end up with the same directory on the stack twice. This can be quite confusing, so we suggest you try not to mix <span class="s33">pushd </span>and <span class="s33">cd - </span>unless you have a good idea of the effect you are attempting to achieve. The following example shows the result of what we have just described. To avoid the problem, you should replace the <span class="s33">cd - </span>with <span class="s33">pushd </span>if you want to switch around the first two directories on the stack, or <span class="s33">popd </span>if you want to remove the first directory completely:</p><p class="s33" style="padding-top: 6pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">% <b>dirs</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">~/tmp ~/src/zsh</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">% <b>pushd ~/zsh/projects/zshbook</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">~/zsh/projects/zshbook ~/tmp ~/src/zsh</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">% <b>cd -</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">~/tmp</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">% <b>dirs</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">~/tmp ~/tmp ~/src/zsh</p><p style="padding-top: 8pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">You can also type <span class="s33">pushd </span>with a number beginning with a <span class="s33">+ </span>or <span class="s33">- </span>(those are necessary, to stop the argument from looking like a real directory name). This brings the <i>number</i>th directory to the top of the stack, making it the current directory. With a plus, the numbers count from the left, where the current directory is <span class="s33">+0 </span>(yes, that works, though it’s not extremely useful). With a minus, numbers count from the right, where the last directory is <span class="s33">-0</span>. This is not very sound mathematically, perhaps, but easy to remember because of the symmetry.</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">In <span class="s33">zsh</span>, when you use <span class="s33">+</span><i>number </i>or <span class="s33">-</span><i>number </i>the entire directory stack is cycled around to bring the directory you ask for to the top. For example:</p><p class="s29" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark396"><span class="s27">184 </span></a>CHAPTER 8 <span class="s28">■ </span>FILES AND DIRECTORIES </p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s33" style="padding-left: 42pt;text-indent: 0pt;text-align: left;">% <b>dirs</b></p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">~/one ~/two ~/three ~/four</p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">% <b>pushd +2</b></p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">~/three ~/four ~/one ~/two</p><p style="padding-top: 8pt;padding-left: 42pt;text-indent: 18pt;line-height: 115%;text-align: left;">In other words, if you think of the stack as having the first entry following the last entry in a loop, the order itself doesn’t change but only which directory is first. This behavior can be quite confusing, and it is not the way <span class="s33">bash </span>and other shells work. They simply pull the directory to which you’re referring to the top of the stack. That has the following effect:</p><p class="s33" style="padding-top: 7pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">% <b>dirs</b></p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">~/one ~/two ~/three ~/four</p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">% <b>pushd +2</b></p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">~/three ~/one ~/two ~/four</p><p style="padding-top: 8pt;padding-left: 42pt;text-indent: 18pt;line-height: 114%;text-align: justify;">The remainder of the stack apart from the entry <span class="s33">~/three </span>stayed in the same order. There is a function <span class="s33">pushd </span>in the directory <span class="s33">Functions/Example </span>of the <span class="s33">zsh </span>source distribution that imple- ments <span class="s33">pushd </span>in the same way as other shells.</p><p style="padding-left: 41pt;text-indent: 18pt;line-height: 114%;text-align: left;">The fact that <span class="s33">pushd </span>shows you the new stack makes it relatively stress free. If you want to get the adrenalin pumping, <span class="s33">zsh </span>has an option <span class="s33">pushd_silent </span>that stops the stack from being printed unless you ask explicitly with <span class="s33">dirs</span>.</p><p style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">A useful option is <span class="s33">auto_pushd</span>. If it’s turned on, a <span class="s33">cd </span>or an <span class="s33">auto_cd </span>causes the new directory to be pushed onto the top of the stack. You can combine this with setting the variable <span class="s33">DIRSTACKSIZE </span>to a number that gives the maximum size of the stack, so that you don’t overload the stack with too many entries. If the stack becomes too large, the ones at the far end from the current directory start to fall off when new directories are added.</p><p style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: justify;">Another useful option in connection with <span class="s33">pushd </span>is <span class="s33">pushd_ignore_dups</span>. When this is set, you never have the same directory name on the stack more than once. This feature is useful for the forgetful among us who are always putting directories onto the stack that are already there. It also works well with the <span class="s33">auto_pushd </span>option.</p><p style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: justify;">In <span class="s33">zsh </span>and recent versions of <span class="s33">bash</span>, you can refer to directories on the stack using a form of the <span class="s33">~ </span>notation. In this case you use a tilde followed by the number you would need as an argu- ment to <span class="s33">pushd </span>to make that directory the current one. This time, though, you can omit any plus sign between the tilde and the number:</p><p class="s33" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">% <b>dirs</b></p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">~/one ~/two ~/three</p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">% <b>echo ~2</b></p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">~/two</p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">The bash array <span class="s33">DIRSTACK </span>and the <span class="s33">zsh </span>array <span class="s33">dirstack </span>give you access to the stack from vari- ables. These variables are useful for writing your own functions. For <span class="s33">zsh </span>you need the add-on module <span class="s33">zsh/parameters</span>; it may well already be loaded because it’s used by the completion system. Otherwise, use <span class="s33">zmodload -i zsh/parameters </span>to load it. (The <span class="s33">-i </span>option stops the command from complaining if the module is already loaded, which is harmless.) The arrays’ elements correspond to the directories on the directory stack in order, current directory first.</p><p class="s29" style="padding-top: 3pt;padding-left: 263pt;text-indent: 0pt;text-align: left;"><a name="bookmark397">CHAPTER 8 </a><span class="s28">■ </span>FILES AND D I RECTORIES <span class="s27">185</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part202.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part204.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
