<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Summary</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part370.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part372.htm">Next &gt;</a></p><h4 style="padding-left: 40pt;text-indent: 0pt;text-align: left;"><a name="bookmark663">Summary</a></h4><p style="padding-top: 6pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">While much of this book has focused on using the shell interactively, in this chapter we have explained many aspects of a shell’s noninteractive mode. In this mode, the shell accepts commands from a script or function instead of the user typing commands manually.</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">At the beginning of this chapter, we showed you how to make your scripts more intelligent than is possible with a simple list of commands by making decisions within the script to control the flow of execution through a script. We showed the syntax for other constructs allowed in shell code such as loops and functions, enabling you to write full programs using the shell. The next major section of the chapter explained how to pass information in and out of a shell program. In particular, we showed how to take information that is input in the form of shell arguments or lines of text and make sense of it by breaking it into its component parts.</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">One of the aims of this chapter was to demonstrate how you can use shell code to extend the base functionality of the shell. We showed how to intercept signals, built-in commands, and some other special events to insert shell code to modify the shell’s behavior. We also demonstrated how to extend the shell’s filename generation facility by adding your own glob qualifiers. In the following chapter we will continue the theme of extending the shell’s basic facilities by showing you how to write shell code to extend the <span class="s33">zsh </span>line editor. We’ll return to <span class="s33">bash </span>at the beginning of the final chapter when we discuss completion functions. Completion functions rely heavily on the use of shell code and many of the shell features discussed in this chapter.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="589" height="200" alt="image" src="Image_286.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s41" style="padding-top: 5pt;padding-left: 40pt;text-indent: 0pt;text-align: left;"><a name="bookmark702">C H A P T E R 1 4</a></p><p class="s42" style="padding-top: 9pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">■ ■ ■</p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part370.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part372.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
