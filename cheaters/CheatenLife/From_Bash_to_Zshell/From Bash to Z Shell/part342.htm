<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Case Statement</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part341.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part343.htm">Next &gt;</a></p><p class="s35" style="padding-left: 42pt;text-indent: 0pt;text-align: left;"><a name="bookmark634">Case Statement</a></p><p style="padding-top: 5pt;padding-left: 42pt;text-indent: 0pt;line-height: 115%;text-align: left;">Sometimes, it can be useful to evaluate a value against a series of possibilities. You can do this with the <span class="s33">case </span>statement. For example, it is common in startup files to do different things depending on the terminal type. A <span class="s33">case </span>statement is useful in this situation because <span class="s33">$TERM </span>can be compared against a series of possible values. One characteristic that differs among different terminals is the escape sequences generated by function keys. In this example, we bind the appropriate sequence for the Insert key.</p><p class="s33" style="padding-top: 7pt;padding-left: 51pt;text-indent: -9pt;line-height: 115%;text-align: left;">case $TERM in (aixterm|iris-ansi*)</p><p class="s33" style="padding-left: 59pt;text-indent: 0pt;line-height: 10pt;text-align: left;">bindkey  &#39;\e[139q&#39;  overwrite-mode</p><p class="s33" style="padding-top: 1pt;padding-left: 51pt;text-indent: 0pt;text-align: left;">;;</p><p class="s33" style="padding-top: 1pt;padding-left: 51pt;text-indent: 0pt;text-align: left;">(xterm|dtterm)</p><p class="s33" style="padding-top: 1pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">bindkey  &#39;\e[2~&#39;     overwrite-mode</p><p class="s33" style="padding-top: 1pt;padding-left: 38pt;text-indent: 0pt;text-align: center;">;;</p><p class="s33" style="padding-top: 1pt;padding-left: 33pt;text-indent: 0pt;text-align: center;">esac</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 42pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="504" height="1" alt="image" src="Image_262.png"/></span></p><p class="s21" style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;line-height: 114%;text-align: justify;">■<span class="s23">Tip </span><span class="s19">You will often see case statements where the patterns don’t have the opening parenthesis, for example xterm|dtterm). This is an older version of the syntax. Text editors, and sometimes even the shell itself, prefer to find matching parentheses, so we suggest you use the form presented in this section.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 42pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="507" height="1" alt="image" src="Image_263.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s33" style="padding-top: 6pt;padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: justify;"><span class="p">The parentheses enclosing each of the patterns are a necessary part of the syntax. Also of particular note, especially to </span>bash <span class="p">users, is that alternatives always work in </span>case <span class="p">patterns. You don’t need the special </span>@(<span class="s32">pat1</span>|<span class="s32">pat2</span>) <span class="p">syntax.</span></p><p style="padding-left: 41pt;text-indent: 18pt;line-height: 114%;text-align: left;">Each pattern is tried in turn until one matches. If you want a catch-all condition at the end, use the pattern <span class="s33">*</span>. The double semicolon is used to terminate the commands for each branch of the <span class="s33">case </span>statement. If you want a particular case to fall through and also run the commands for the next case, <span class="s33">ksh </span>and <span class="s33">zsh </span>allow you to use <span class="s33">;&amp; </span>instead. For example, let’s suppose we want to extend our previous example to handle the <span class="s33">rxvt </span>terminal program. <span class="s33">rxvt </span>generates the same escape sequence for the Insert key as <span class="s33">xterm </span>but differs in other areas. For instance, <span class="s33">rxvt </span>generates</p><p class="s33" style="padding-left: 41pt;text-indent: 0pt;line-height: 114%;text-align: justify;">\eOD <span class="p">for Ctrl-Left Arrow. We can add a branch to the </span>case <span class="p">statement to bind this key for </span>rxvt <span class="p">but also, by using </span>;&amp; <span class="p">to terminate the branch, have execution continue into the </span>xterm <span class="p">branch. The resulting </span>case <span class="p">statement is as follows:</span></p><p class="s29" style="padding-top: 3pt;padding-left: 249pt;text-indent: 0pt;text-align: left;"><a name="bookmark671">CHAPTER 13 </a><span class="s28">■ </span>SCRIPTING AND FUNCTION S <span class="s27">315</span></p><p class="s33" style="padding-top: 24pt;padding-left: 49pt;text-indent: -9pt;line-height: 115%;text-align: left;">case $TERM in (aixterm|iris-ansi*)</p><p class="s33" style="padding-left: 58pt;text-indent: 0pt;line-height: 10pt;text-align: left;">bindkey  &#39;\e[139q&#39;  overwrite-mode</p><p class="s33" style="padding-top: 1pt;padding-left: 49pt;text-indent: 0pt;text-align: left;">;;</p><p class="s33" style="padding-top: 1pt;padding-left: 49pt;text-indent: 0pt;text-align: left;">(rxvt)</p><p class="s33" style="padding-top: 1pt;padding-left: 58pt;text-indent: 0pt;text-align: left;">bindkey  &#39;^[OD&#39;       backward-word</p><p class="s33" style="padding-top: 1pt;padding-left: 49pt;text-indent: 0pt;line-height: 115%;text-align: left;">;&amp; (xterm|dtterm)</p><p class="s33" style="padding-left: 58pt;text-indent: 0pt;line-height: 10pt;text-align: left;">bindkey  &#39;\e[2~&#39;     overwrite-mode</p><p class="s33" style="padding-top: 1pt;padding-left: 38pt;text-indent: 0pt;text-align: center;">;;</p><p class="s33" style="padding-top: 1pt;padding-left: 29pt;text-indent: 0pt;text-align: center;">esac</p><p style="padding-top: 8pt;padding-left: 58pt;text-indent: 0pt;text-align: left;">You don’t need to place the pattern, commands, and terminating semicolons on separate</p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">lines. Where there is only one command, it is common to put them together on a single line. Let’s revise one of the branches of the previous example:</p><p class="s33" style="padding-top: 7pt;padding-left: 49pt;text-indent: 0pt;text-align: left;">(xterm|dtterm) bindkey &#39;\e[2~&#39; overwrite-mode;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part341.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part343.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
