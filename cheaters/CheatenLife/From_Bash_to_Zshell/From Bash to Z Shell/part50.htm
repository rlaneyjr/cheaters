<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>for and foreach Loops</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part49.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part51.htm">Next &gt;</a></p><h4 style="padding-left: 40pt;text-indent: 0pt;text-align: left;"><a name="bookmark84">for and foreach Loops</a></h4><p style="padding-top: 6pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">If you want to, you can tack on the rest of the command line that you used before—the two <span class="s33">grep</span>s and so on—to build a <span class="s33">proglist </span>file from all directories in your <span class="s33">PATH </span>list. But this is a good place to start looking at another way to do operations on a series of directories (or files—or, actually, <i>any </i>words). The shell’s <i>loops </i>let you repeat a set of commands over and over.</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">Let’s review: we want to make a list of the programs in each directory in the <span class="s33">PATH</span>. The Bourne shell’s <span class="s33">for </span>loop, and the C shell’s <span class="s33">foreach </span>loop, were designed for this kind of job. They accept a list of words (for example, directory pathnames) and a series of commands to perform on each of those words.</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: justify;">(Another kind of loop, described in the section “More Looping” in Chapter 13, is the <span class="s33">while </span>loop. It runs a command line, tests for success, and then, if the command succeeded, runs the commands from the loop body.)</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">Here’s a simple example. Let’s say you want to make a copy of all files in the current directory. The copy should have the same filename, but with “OLD-” added to the start. You could type</p><p class="s29" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark104"><span class="s27">40 </span></a>CHAPTER 2 <span class="s28">■ </span>USING SHELL FEATURES TOGETHER </p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 42pt;text-indent: 0pt;line-height: 115%;text-align: left;">these commands on a command line. (Or, as we’ll see later, you could save them as a script or function so they’re easier to repeat.) First let’s see the loops in action. Then we’ll explain:</p><p class="s33" style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">$ <b>ls</b></p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">afile bfile cfile dfile</p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">$ <b>for f in *</b></p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">&gt; <b>do</b></p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">&gt; <b>echo &quot;copying ${f} to OLD-${f}&quot;</b></p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">&gt; <b>cp -i &quot;${f}&quot; &quot;OLD-${f}&quot;</b></p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">&gt; <b>done</b></p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;line-height: 115%;text-align: justify;">copying afile to OLD-afile copying bfile to OLD-bfile copying cfile to OLD-cfile copying dfile to OLD-dfile</p><p class="s33" style="padding-bottom: 2pt;padding-left: 41pt;text-indent: 0pt;line-height: 10pt;text-align: justify;">$ <b>ls</b></p><table style="border-collapse:collapse;margin-left:39.4991pt" cellspacing="0"><tr style="height:11pt"><td style="width:52pt"><p class="s49" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">OLD-afile</p></td><td style="width:56pt"><p class="s49" style="padding-left: 8pt;text-indent: 0pt;line-height: 10pt;text-align: left;">OLD-bfile</p></td><td style="width:54pt"><p class="s49" style="padding-left: 6pt;text-indent: 0pt;line-height: 10pt;text-align: left;">OLD-cfile</p></td><td style="width:50pt"><p class="s49" style="padding-left: 6pt;text-indent: 0pt;line-height: 10pt;text-align: left;">OLD-dfile</p></td></tr><tr style="height:11pt"><td style="width:52pt"><p class="s49" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">afile</p></td><td style="width:56pt"><p class="s49" style="padding-left: 8pt;text-indent: 0pt;line-height: 10pt;text-align: left;">bfile</p></td><td style="width:54pt"><p class="s49" style="padding-left: 6pt;text-indent: 0pt;line-height: 10pt;text-align: left;">cfile</p></td><td style="width:50pt"><p class="s49" style="padding-left: 6pt;text-indent: 0pt;line-height: 10pt;text-align: left;">dfile</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 59pt;text-indent: 0pt;text-align: left;">Here’s the same loop written for C-type shells (like <span class="s33">tcsh</span>):</p><p class="s33" style="padding-top: 8pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">% <b>foreach f (*)</b></p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">? <b>echo &quot;copying ${f} to OLD-${f}&quot;</b></p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">? <b>cp -i &quot;${f}&quot; &quot;OLD-${f}&quot;</b></p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">? <b>end</b></p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;line-height: 115%;text-align: justify;">copying afile to OLD-afile copying bfile to OLD-bfile copying cfile to OLD-cfile copying dfile to OLD-dfile</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 59pt;text-indent: 0pt;text-align: left;">Let’s look at the Bourne-type <span class="s33">for </span>loop step by step:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 72pt;text-indent: -12pt;line-height: 114%;text-align: left;"><span class="s13">1. </span>The first line starts with the command <span class="s33">for</span>, the name of a <i>shell variable </i>(here we’ve picked <span class="s33">f</span>), and the word <span class="s33">in</span>.</p><p style="padding-top: 6pt;padding-left: 72pt;text-indent: -12pt;line-height: 114%;text-align: left;"><span class="s13">2. </span>End the first line with one or more words. For this example, we’ve used the wildcard <span class="s33">*</span>— which, as we saw in the section “Building Pathnames with Wildcards” in Chapter 1, the shell replaces with a list of all names in the current directory. (You can also type the words yourself; for instance, if you’d only wanted to copy <span class="s33">afile </span>and <span class="s33">dfile</span>, you could have typed <span class="s33">for f in afile dfile </span>instead of using the wildcard.) Press Return.</p><p style="padding-top: 6pt;padding-left: 72pt;text-indent: -12pt;line-height: 114%;text-align: left;"><span class="s13">3. </span>The shell will print a secondary prompt, <span class="s33">&gt;</span>. Type <span class="s33">do</span>, and press Return again. (Pressing Return after the <span class="s33">do </span>is optional; you can type a command on the same line as <span class="s33">do</span>, separated by a space. We’ve used Return for neatness.)</p><p style="padding-top: 6pt;padding-left: 72pt;text-indent: -12pt;line-height: 115%;text-align: left;"><span class="s13">4. </span>Type the command lines you want to run, pressing Return after each one. The shell will run this set of commands, over and over, once for each of the words on the first line. Anywhere you want to use the word in one of these commands, type <span class="s33">$ </span>followed by the name of the shell variable. (It’s safest to put curly braces around the variable’s name, as we have here—but it’s usually only required if there are other letters or numbers directly</p><p class="s29" style="padding-top: 3pt;padding-left: 224pt;text-indent: 0pt;text-align: left;"><a name="bookmark105">CHAPTER 2 </a><span class="s28">■ </span>USING SHELL FEATURES TOGETHER <span class="s27">41</span></p><p style="padding-top: 24pt;padding-left: 70pt;text-indent: 0pt;line-height: 115%;text-align: justify;">after the variable name. It’s also usually safest to put double quotes around the variable name; see the section “Control Shell Interpretation with Quoting” in Chapter 3 for more.) We’ve indented each command line to make it stand out, but you don’t need to do this.</p><p style="padding-top: 6pt;padding-left: 70pt;text-indent: -12pt;line-height: 114%;text-align: left;"><span class="s13">5. </span>Finally, type <span class="s33">done </span>on a line by itself. This tells the shell that you’ve finished the loop; it will start to execute the commands in order from <span class="s33">do </span>to <span class="s33">done</span>, once for each word.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="507" height="1" alt="image" src="Image_072.png"/></span></p><p class="s21" style="padding-top: 4pt;padding-left: 40pt;text-indent: 0pt;line-height: 111%;text-align: left;">■<span class="s23">Note </span><span class="s19">Some programmers prefer to put both the for and do on the same line, separated by a semicolon (;), like this:</span></p><p class="s33" style="padding-top: 8pt;padding-left: 76pt;text-indent: 0pt;text-align: left;">$ <b>for f in * ; do</b></p><p class="s33" style="padding-top: 1pt;padding-left: 76pt;text-indent: 0pt;text-align: left;">&gt; <b>echo &quot;copying ${f} to OLD-${f}&quot;</b></p><p class="s33" style="padding-top: 1pt;padding-left: 76pt;text-indent: 0pt;text-align: left;">&gt; <b>cp -i &quot;${f}&quot; &quot;OLD-${f}&quot;</b></p><p class="s33" style="padding-top: 1pt;padding-left: 76pt;text-indent: 0pt;text-align: left;">&gt; <b>done</b></p><p class="s19" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;line-height: 119%;text-align: left;">You&#39;ll see that syntax in Parts 2 and 3 of this book. The note in the section “Control Flow” in Chapter 13 explains further.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="507" height="1" alt="image" src="Image_073.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: justify;">The C shell’s <span class="s33">foreach </span>loop, shown in the previous code snippet, follows the same pattern, but it’s a little easier to type than a <span class="s33">for </span>loop. There’s no word <span class="s33">in</span>; put the words inside the paren- theses instead. Instead of <span class="s33">done</span>, use <span class="s33">end</span>.</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">Let’s get back to our program-list example. We’ll give the list of directory names to a <span class="s33">for </span>loop, and we’ll use command substitution, as we did earlier. (The command line with <span class="s33">echo </span>and <span class="s33">tr </span>should look familiar.) Let’s start by simply echoing the directory names:</p><p class="s33" style="padding-top: 6pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">$ <b>for dir in `echo &quot;$PATH&quot; | tr &#39;:&#39; &#39; &#39;`</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">&gt; <b>do</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">&gt; <b>echo &quot;I got the name $dir&quot;</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">&gt; <b>done</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">I got the name /bin</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">I got the name /usr/bin</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">I got the name /usr/local/bin I got the name /proj/bin</p><p class="s33" style="padding-left: 40pt;text-indent: 0pt;line-height: 10pt;text-align: left;">$</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">The loop is running a single command, <span class="s33">echo</span>, which is writing lines of text to its standard output.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part49.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part51.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
