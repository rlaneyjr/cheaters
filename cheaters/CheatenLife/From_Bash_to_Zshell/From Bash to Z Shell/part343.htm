<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>More Looping</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part342.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part344.htm">Next &gt;</a></p><p class="s35" style="padding-left: 40pt;text-indent: 0pt;text-align: left;"><a name="bookmark635">More Looping</a></p><p style="padding-top: 5pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">In Chapter 2, the <span class="s33">for </span>loop was briefly introduced. The <span class="s33">for </span>loop is not the only type of loop you can use; it just happens to be the one that is most useful when using the shell interactively.</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 114%;text-align: left;">Like most programming languages, the shell offers a <span class="s33">while </span>loop. Its use is very similar to the <span class="s33">if </span>statement and looks like this:</p><p class="s33" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">while <span class="s32">condition</span>; do</p><p class="s32" style="padding-top: 1pt;padding-left: 49pt;text-indent: 0pt;text-align: left;">commands</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">done</p><p style="padding-top: 8pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">The condition is similar in structure to that used by the <span class="s33">if </span>statement. It is evaluated first and before each subsequent iteration of the loop. Looping only continues when the condition evaluates to true. There is a variant of this: the <span class="s33">until </span>loop, which is identical except that looping continues for as long as the condition is false.</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">Modern shells offer another type of <span class="s33">for </span>loop. It is modeled on the C language’s <span class="s33">for </span>loop and uses mathematical evaluation to determine whether the loop should continue execution. Consider the following example:</p><p class="s33" style="padding-top: 7pt;padding-left: 49pt;text-indent: -9pt;line-height: 115%;text-align: left;">for ((i=1;i&lt;5;i++)); do a[$i]=$i</p><p class="s33" style="padding-left: 40pt;text-indent: 0pt;line-height: 10pt;text-align: left;">done</p><p style="padding-top: 8pt;padding-left: 40pt;text-indent: 17pt;line-height: 115%;text-align: left;">This is another way of doing <span class="s33">a=( {1..4} )</span>. See the section “Generating Numbers with Braces” in Chapter 8 for an explanation of this form of expansion.</p><p class="s33" style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">zsh <span class="p">offers another loop construct, inherited from C shell. It is known as the </span>repeat <span class="p">loop and is very simple: you just supply a number and the loop runs that number of times. So for example, the following will remove the first five directory components from the beginning of a pathname:</span></p><p class="s33" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">repeat 5; p=${p#*/}</p><p class="s29" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark672"><span class="s27">316 </span></a>CHAPTER 13 <span class="s28">■ </span>SCRIPTIN G AND FUN CTIONS </p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 42pt;text-indent: 18pt;line-height: 115%;text-align: left;">Note that we have omitted the <span class="s33">do </span>and <span class="s33">done </span>keywords in this loop. If you have the <span class="s33">short_loops </span>option turned on, <span class="s33">zsh </span>allows you to do this with <span class="s33">for </span>and <span class="s33">repeat </span>loops if they contain only one command.</p><p style="padding-left: 42pt;text-indent: 18pt;line-height: 115%;text-align: left;">We mentioned that the condition for an <span class="s33">if </span>statement can contain more than one command and the status of the last command determines the result of the overall condition. The same applies to the condition for <span class="s33">while </span>and <span class="s33">until </span>loops. This feature is the reason why the <span class="s33">short_loops </span>option only works for <span class="s33">repeat </span>and <span class="s33">for </span>loops: a short-form <span class="s33">while </span>loop would be indistinguish- able from the beginning of a <span class="s33">while </span>loop containing more than one command as its condition. Using more than one command in the condition effectively allows you to have a loop with an exit condition in the middle because both the condition and loop body are run for each itera- tion of the loop. It is rarely used for that purpose, however, because, as we’ll see in the next section, the shell provides another way to exit from the middle of a loop.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="toc">&nbsp;</p><div class="toc"><a class="toc0" href="part344.htm">The break and continue Statements</a></div><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part342.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part344.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
