<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Globbing in Zsh</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part227.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part229.htm">Next &gt;</a></p><h4 style="padding-left: 40pt;text-indent: 0pt;text-align: left;"><a name="bookmark418">Globbing in Zsh</a></h4><p class="s33" style="padding-top: 6pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">zsh<span class="p">, like </span>bash<span class="p">, has special options for dealing with failed pattern matches:</span></p><p style="padding-top: 8pt;padding-left: 66pt;text-indent: -10pt;line-height: 115%;text-align: left;">• In the default state, the shell outputs an error message when a pattern on the command line doesn’t match a file. The command is not executed, and the shell waits for new input:</p><p class="s33" style="padding-top: 7pt;padding-left: 66pt;text-indent: 0pt;text-align: left;">zsh% <b>echo No*Such*File</b></p><p class="s33" style="padding-top: 1pt;padding-left: 66pt;text-indent: 0pt;text-align: left;">zsh: no matches found: No*Such*File</p><p style="padding-top: 8pt;padding-left: 66pt;text-indent: 0pt;line-height: 115%;text-align: justify;">Note that there was no output from <span class="s33">echo </span>because it was never executed. This can be quite useful since it enforces the habit of quoting pattern characters when you don’t want them to act as patterns.</p><p style="padding-top: 7pt;padding-left: 66pt;text-indent: -10pt;line-height: 115%;text-align: left;">• If you set the option <span class="s33">no_nomatch</span>, you have the standard <span class="s33">bash </span>behavior: any patterns that don’t match are passed to the command unchanged and no error is reported:</p><p class="s33" style="padding-top: 7pt;padding-left: 66pt;text-indent: 0pt;line-height: 115%;text-align: justify;">zsh% <b>setopt no_nomatch </b>zsh% <b>echo No*Such*File </b>No*Such*File</p><p style="padding-top: 7pt;padding-left: 66pt;text-indent: -10pt;line-height: 115%;text-align: left;">•   If you set the option <span class="s33">csh_null_glob</span>, standard C shell behavior is followed. If there are several patterns on the command line, at least one must match a file or files; in that case, any that don’t are removed from the argument list. If no pattern matches, an error is reported. This is a hybrid between <span class="s33">zsh</span>’s default and full <span class="s33">null_glob </span>behavior. This behavior often matches the user’s intentions. It’s common to need at least one argument to a command, but not to care which of a set of patterns successfully generated a filename.</p><p style="padding-top: 7pt;padding-left: 66pt;text-indent: -10pt;line-height: 115%;text-align: left;">• If you set the option <span class="s33">null_glob</span>, patterns that don’t match a file are unconditionally removed from the argument list. This is the same as the <span class="s33">bash </span>option <span class="s33">nullglob</span>. Note that the option <span class="s33">csh_null_glob </span>will be used if it is turned on as well as <span class="s33">null_glob</span>.</p><p class="s29" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark460"><span class="s27">212 </span></a>CHAPTER 9 <span class="s28">■ </span>PATTER N MATCHING </p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 60pt;text-indent: 0pt;text-align: left;">Suppose a directory contains some files that you’d like to match:</p><p class="s33" style="padding-top: 8pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">% <b>ls</b></p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">file1.h  file1.c</p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">% <b>echo file1.* file2.*</b></p><p class="s32" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">???</p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">% <b>echo file2.*</b></p><p class="s32" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">???</p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">The various ways the shell can handle this are summarized in Table 9-3. In the table, “Error” indicates that the shell prints a message saying the match failed and doesn’t execute the command.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s13" style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Table 9-3. <span class="s32">Options for Handling Failed Matches in zsh</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:42pt" cellspacing="0"><tr style="height:15pt"><td style="width:91pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s56" style="text-indent: 0pt;text-align: left;">Option</p></td><td style="width:148pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s62" style="padding-left: 35pt;text-indent: 0pt;text-align: left;">echo file1.* file2.*</p></td><td style="width:141pt;border-top-style:solid;border-top-width:1pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s62" style="padding-left: 14pt;text-indent: 0pt;text-align: left;">echo file2.*</p></td></tr><tr style="height:18pt"><td style="width:91pt;border-top-style:solid;border-top-width:1pt"><p class="s57" style="padding-top: 3pt;text-indent: 0pt;text-align: left;">Default</p></td><td style="width:148pt;border-top-style:solid;border-top-width:1pt"><p class="s57" style="padding-top: 3pt;padding-left: 35pt;text-indent: 0pt;text-align: left;">Error</p></td><td style="width:141pt;border-top-style:solid;border-top-width:1pt"><p class="s57" style="padding-top: 3pt;padding-left: 14pt;text-indent: 0pt;text-align: left;">Error</p></td></tr><tr style="height:18pt"><td style="width:91pt"><p class="s58" style="padding-top: 3pt;text-indent: 0pt;text-align: left;">no_nomatch</p></td><td style="width:148pt"><p class="s58" style="padding-top: 3pt;padding-left: 35pt;text-indent: 0pt;text-align: left;">file1.c file1.h file2.*</p></td><td style="width:141pt"><p class="s58" style="padding-top: 3pt;padding-left: 14pt;text-indent: 0pt;text-align: left;">file2.*</p></td></tr><tr style="height:17pt"><td style="width:91pt"><p class="s58" style="padding-top: 3pt;text-indent: 0pt;text-align: left;">csh_null_glob</p></td><td style="width:148pt"><p class="s58" style="padding-top: 3pt;padding-left: 35pt;text-indent: 0pt;text-align: left;">file1.c file1.h</p></td><td style="width:141pt"><p class="s57" style="padding-top: 3pt;padding-left: 14pt;text-indent: 0pt;text-align: left;">Error</p></td></tr><tr style="height:17pt"><td style="width:91pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s58" style="padding-top: 2pt;text-indent: 0pt;text-align: left;">null_glob</p></td><td style="width:148pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s58" style="padding-top: 2pt;padding-left: 35pt;text-indent: 0pt;text-align: left;">file1.c file1.h</p></td><td style="width:141pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s57" style="padding-top: 2pt;padding-left: 14pt;text-indent: 0pt;text-align: left;">Empty argument list</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;"><span class="s33">zsh </span>also gives you a way of switching on the option <span class="s33">null_glob </span>for a single command. This means that if that pattern doesn’t match a file, it will be removed, regardless of how other command-line arguments are handled. To get this effect, you put <span class="s33">(N) </span>after the pattern. This is a <i>glob qualifier</i>; see the section “Glob Qualifiers in zsh,” later in this chapter.</p><p style="padding-left: 42pt;text-indent: 17pt;line-height: 115%;text-align: left;">If <span class="s33">zsh </span>can’t understand a pattern—for example, the argument contains a <span class="s33">[ </span>with no matching <span class="s33">]</span>—it will usually show a message and not execute the command. This is typically a good thing, particularly when you are learning about patterns. However, if you are lazy about quoting special characters, you can set the option <span class="s33">no_bad_pattern</span>. This causes the shell to pass any pattern it doesn’t understand to the command without altering it. The following example shows what happens first with the option off, then with it on:</p><p class="s33" style="padding-top: 6pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">zsh% <b>echo Options [a to d]</b></p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">zsh: bad pattern: [a</p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;line-height: 115%;text-align: justify;">zsh% <b>setopt no_bad_pattern </b>zsh% <b>echo Options [a to d] </b>Options [a to d]</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="toc">&nbsp;</p><div class="toc"><a class="toc0" href="part229.htm">Special Patterns in zsh</a><a class="toc1" href="part230.htm">Grouping Alternatives</a><a class="toc1" href="part231.htm">Recursive Searching</a><a class="toc1" href="part232.htm">Matching Numeric Ranges</a><a class="toc0" href="part233.htm">Extended Globbing in zsh</a><a class="toc1" href="part234.htm">Negated Matches</a><a class="toc1" href="part235.htm">Pattern Exceptions</a><a class="toc1" href="part236.htm">Multiple Matches</a><a class="toc1" href="part237.htm">Eliminating a Directory from a Recursive Pattern Match</a></div><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part227.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part229.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
