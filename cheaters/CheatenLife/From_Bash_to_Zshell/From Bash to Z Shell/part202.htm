<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Shorthand for Referring to Directories</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part201.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part203.htm">Next &gt;</a></p><p class="s35" style="padding-left: 40pt;text-indent: 0pt;text-align: left;"><a name="bookmark367">Shorthand for Referring to Directories</a></p><p style="padding-top: 5pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">We’ve seen the short way of referring to home directories, <span class="s33">~ </span>for your own and <span class="s33">~bob </span>for <span class="s33">bob</span>’s home directory. There are many uses of <span class="s33">~ </span>for referring to directories. We summarize all these uses in Table 8-1.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s32" style="padding-top: 4pt;padding-bottom: 4pt;padding-left: 40pt;text-indent: 0pt;text-align: left;"><span class="s13">Table 8-1. </span>Uses of <span class="s45">~ </span>for Referring to Directories</p><p style="padding-left: 40pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="426" height="1" alt="image" src="Image_177.png"/></span></p><p class="s48" style="padding-bottom: 2pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">Example Meaning</p><p style="padding-left: 40pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="426" height="1" alt="image" src="Image_178.png"/></span></p><p class="s61" style="padding-top: 2pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">~ <span class="s51">The user’s own home directory</span></p><p class="s61" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">~pws <span class="s51">The home directory of user </span>pws</p><p class="s61" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">~var <span class="s51">The directory path given by the variable </span>var <span class="s51">(</span>zsh <span class="s51">only).</span></p><p class="s61" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">~+ <span class="s51">The current directory, the same as </span>$PWD</p><p class="s61" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">~- <span class="s51">The previous directory, the same as </span>$OLDPWD</p><p class="s61" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">~+2 <span class="s51">The second directory on the directory stack</span></p><p class="s61" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">~2 <span class="s51">A shorter form for the second directory on the directory stack</span></p><p class="s61" style="padding-top: 5pt;padding-bottom: 4pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">~-0 <span class="s51">The final directory on the directory stack</span></p><p style="padding-left: 40pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="426" height="1" alt="image" src="Image_179.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: justify;">Both <span class="s33">bash </span>and <span class="s33">zsh </span>understand the syntax <span class="s33">~+ </span>to refer to the current directory. It’s a slightly shorter way of saying <span class="s33">$PWD</span>. Like all the family of substitutions beginning with <span class="s33">~</span>, it only works if that character is at the start of the word and isn’t quoted.</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 114%;text-align: left;">Also, <span class="s33">~- </span>refers to the directory you were in just before the current one. (This is possibly more useful than <span class="s33">~+ </span>since you don’t usually need to refer to the current directory directly on the command line. The syntax should remind you of <span class="s33">cd -</span>, which would change to that same directory.)</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">In <span class="s33">zsh </span>(but not <span class="s33">bash</span>), you can actually give a name to <i>any </i>directory, not just users’ home directories. To do this, set a variable to a full directory path. When you refer to that variable with a <span class="s33">~ </span>in front, it substitutes the directory:</p><p class="s33" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">zsh% <b>zb=~/zsh/projects/zshbook</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">zsh% <b>print ~zb</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">/home/pws/zsh/projects/zshbook</p><p class="s29" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark395"><span class="s27">182 </span></a>CHAPTER 8 <span class="s28">■ </span>FILES AND DIRECTORIES </p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">In the section “A Few Simple Tricks” in Chapter 7, we mentioned that when a directory is given a name the prompt escape <span class="s33">%~ </span>will show the name of the directory with the <span class="s33">~ </span>in front. This saves the space, which would be taken up by a long directory name. However, you need to refer to the directory name as in the previous example before the prompt will use the short form. There’s a common trick for this: Use the command <span class="s33">:</span>, which does nothing but expand its argu- ments; see the explanation in the section “Parsed Comments” in Chapter 13. Here’s an example:</p><p class="s33" style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;line-height: 115%;text-align: justify;">zsh% <b>zs=~/src/zsh/Src </b>zsh% <b>cd ~/src/zsh/Src </b>zsh% <b>PS1=&quot;%~%# &quot;</b></p><p class="s33" style="padding-left: 41pt;text-indent: 0pt;line-height: 10pt;text-align: justify;">~/src/zsh/Src%  <b>:  ~zs</b></p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">~zs%</p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">(Remember the space between the colon and the <span class="s33">~zs</span>.) Here, we set the variable <span class="s33">zs </span>to the path to a directory, then changed to that directory. We then set the prompt to include <span class="s33">%~ </span>in order to show named directories in the short form. To begin with, the prompt shows the short form for the home directory <span class="s33">~</span>, but doesn’t yet know about <span class="s33">~zs</span>. We refer to <span class="s33">~zs </span>with the colon command. Then the prompt abbreviates references to that directory. Usually, it is convenient to put the lines shown above (except for the line with the <span class="s33">cd </span>command) in your <span class="s33">.zshrc </span>file.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part201.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part203.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
