<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Exporting Functions</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part357.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part359.htm">Next &gt;</a></p><p class="s35" style="padding-left: 40pt;text-indent: 0pt;text-align: left;"><a name="bookmark650">Exporting Functions</a></p><p class="s33" style="padding-top: 5pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">bash <span class="p">allows functions to be exported. This means that function definitions are kept in memory so when a new shell starts, they can be loaded quickly. The </span>declare <span class="p">command applies to functions if passed the </span>-f <span class="p">option so that can be combined with </span>-x <span class="p">for exporting. Consider the following example:</span></p><p class="s33" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">bash$ <b>foo() {</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">&gt; <b>echo in foo</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">&gt; <b>}</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">bash$ <b>declare -fx foo</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">bash$ <b>bash </b>bash$ <b>foo </b>in foo bash$ <b>zsh </b>zsh% <b>foo</b></p><p class="s33" style="padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">zsh: command not found: foo zsh% <b>echo $foo</b></p><p class="s33" style="padding-left: 40pt;text-indent: 0pt;line-height: 10pt;text-align: left;">() { echo in foo</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-top: 8pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">As we can see, what <span class="s33">bash </span>is actually doing when running a command is treating the function as if it was a normal environment variable that begins with <span class="s33">()</span>. When the second instance of <span class="s33">bash </span>executes, it sees this environment variable and handles it specially, creating a function. However, when we run any other program such as <span class="s33">zsh</span>, we see nothing other than a strangely named environment variable. If you initialize your functions in your <span class="s33">.bash_profile </span>file, they will then propagate to subshells without each subshell rereading them.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part357.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part359.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
