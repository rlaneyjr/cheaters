<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Exit Statuses</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part350.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part352.htm">Next &gt;</a></p><p class="s35" style="padding-top: 4pt;padding-left: 42pt;text-indent: 0pt;text-align: left;"><a name="bookmark643">Exit Statuses</a></p><p style="padding-top: 5pt;padding-left: 42pt;text-indent: 0pt;line-height: 115%;text-align: justify;">The <i>exit status </i>of a command is the one form of output that is sent directly back to the code from which the command was called. We’ve talked a lot about the exit status of commands before. When any Unix command finishes, it returns a number to indicate its status when it finished. We’ve seen how to determine and use the exit status of commands, but how do we indicate our exit status from a shell script?</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 42pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="504" height="1" alt="image" src="Image_273.png"/></span></p><p class="s21" style="padding-top: 4pt;padding-left: 42pt;text-indent: 0pt;line-height: 114%;text-align: justify;">■<span class="s23">Tip </span><span class="s19">When a command is killed by a signal, the exit status is 128 plus the signal number. In both bash and zsh, you can translate the exit status into the signal’s name by using the -l option to kill. For example, to see that an exit status of 130 corresponds to the INT signal we can execute the following:</span></p><p class="s33" style="padding-top: 7pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">%  <b>kill  -l  130</b></p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">INT</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 42pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="504" height="1" alt="image" src="Image_274.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">Normally when a function or shell script finishes, it passes on the exit status of the last command executed. It is important to be aware of this because it can often cause your shell script to return 1 even when it finishes successfully. To avoid this, you need to explicitly specify your exit status. From a shell script you do this with the <span class="s33">exit </span>command. For example, to exit with a status of 0, you would use the following:</p><p class="s33" style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">exit 0</p><p class="s29" style="padding-top: 3pt;padding-left: 249pt;text-indent: 0pt;text-align: left;"><a name="bookmark681">CHAPTER 13 </a><span class="s28">■ </span>SCRIPTING AND FUNCTION S <span class="s27">325</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 58pt;text-indent: 0pt;text-align: left;">This will exit the script immediately even if there are more commands following in the script.</p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">The <span class="s33">exit </span>command terminates the currently running shell process. Functions don’t run in a separate process so if you try this from a function, it will cause your shell to exit. Functions, therefore, have a separate command: <span class="s33">return</span>. For this reason, the status after leaving a function is often referred to as the <i>return status</i>. The <span class="s33">return </span>command is used in the same way as <span class="s33">exit</span>; thus, to return from a function with a status of 1, you would write</p><p class="s33" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">return 1</p><p style="padding-top: 8pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">That finishes our coverage of output, and for the rest of this section, we’ll consider input to programs. We’ll start with the positional parameters. These refer to the arguments passed to a command when it is called. In some respects, they can be thought of as the opposite of the exit status: information is passed between the command and the point at which it is called but in the opposite direction.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part350.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part352.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
