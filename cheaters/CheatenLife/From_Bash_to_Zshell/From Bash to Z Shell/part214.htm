<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Multiple Redirections</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part213.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part215.htm">Next &gt;</a></p><p class="s35" style="padding-left: 42pt;text-indent: 0pt;text-align: left;"><a name="bookmark379">Multiple Redirections</a></p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 115%;text-align: left;">Sometimes you find you want the same output to go to multiple files. A particularly common example is to send data to the terminal as well as to a log file. The standard way of achieving this is by piping the output to <span class="s33">tee</span>, a command that is not part of the shell. The following example shows the output of a command being sent to the terminal as well as to the file <span class="s33">file1.log</span>. If you added other files as arguments to <span class="s33">tee</span>, the output would be sent to all the files as well as to the terminal:</p><p class="s33" style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">% <b>echo &quot;*** Logging started at $(date) ***&quot; | tee file1.log</b></p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">*** Logging started at Mon Jul 26 22:38:28 BST 2004 ***</p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">% <b>cat file1.log</b></p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">*** Logging started at Mon Jul 26 22:38:28 BST 2004 ***</p><p class="s29" style="padding-top: 3pt;padding-left: 263pt;text-indent: 0pt;text-align: left;">CHAPTER 8 <span class="s28">■ </span>FILES AND D I RECTORIES <span class="s27">193</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: justify;"><span class="s33">zsh </span>extends redirections so you can output to (or input from) more than one file without an external program. This feature is called <i>multios</i>, which is also the name of the option that controls it. It’s on by default; execute <span class="s33">unsetopt multios </span>to turn it off.</p><p style="padding-left: 58pt;text-indent: 0pt;line-height: 10pt;text-align: left;">Outputting to multiple files works like this:</p><p class="s33" style="padding-top: 8pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">zsh% <b>echo &quot;*** Logging started at $(date) ***&quot; &gt;file1.log &gt;file2.log</b></p><p style="padding-top: 8pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">Look in both files and you will see the same output. The shell copies the output to all files that have been opened on standard output. (The feature works on other file descriptors.) If you want to output to the terminal as well as another file, as in the example with <span class="s33">tee</span>, one of the redirections should be <span class="s33">&gt;/dev/tty</span>.</p><p style="padding-left: 58pt;text-indent: 0pt;line-height: 10pt;text-align: left;">Note that a pipe is treated as another use of standard output:</p><p class="s33" style="padding-top: 8pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">zsh% <b>echo Script started. &gt;logfile | sed &#39;s/started/stopped/&#39;</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">Script stopped. zsh% <b>cat logfile </b>Script started.</p><p style="padding-top: 7pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">The output went to the file as well as to the pipe, where a substitution was performed on it. Unless you realize the shell treats pipes like other redirections, it’s easy to assume that this is a bug.</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">You can also perform multiple input redirection using multios. Multiple redirections from input files make the shell concatenate the files in the order given:</p><p class="s33" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">zsh% <b>cat filein1</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">These are results from the first run. zsh% <b>cat filein2</b></p><p class="s33" style="padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">More results here, from the second run. zsh% <b>cat &lt;filein1 &lt;filein2</b></p><p class="s33" style="padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">These are results from the first run. More results here, from the second run.</p><p style="padding-top: 7pt;padding-left: 58pt;text-indent: 0pt;text-align: left;">We used <span class="s33">cat </span>to show the output, but in this case it was the shell that concatenated the files.</p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">All the program did was read its standard input; <span class="s33">zsh </span>fed it one file after the other.</p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">There’s a slight problem with output multios that you might notice if you use them in scripts or functions. (Those squeamish about how processes are handled should skip to the next section now.) Consider an example where you want to record the output for a command in a file, while also appending the output to a file with the output of every time you’ve run the program:</p><p class="s33" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">./mycommand &gt;record.txt &gt;&gt;allrecords.txt</p><p class="s29" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark404"><span class="s27">194 </span></a>CHAPTER 8 <span class="s28">■ </span>FILES AND DIRECTORIES </p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">After <span class="s33">mycommand </span>has finished executing, the files may still not have had the output written to them. To see why, you need to know that the shell has to create an additional process for each redirection to copy the output to all the files in turn. The shell waits for <span class="s33">mycommand </span>to finish before executing the next command—but it doesn’t wait for the processes, which are copying data to the two files to finish. They can take a little longer.</p><p style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">In versions of <span class="s33">zsh </span>from 4.2, the problem has been fixed for commands that run inside the shell. This apparently bizarre limitation is because the shell then has direct control over the processes forked to handle the multio output, and can wait for them to finish. You can then avoid the problem for external programs (those found by looking in your <span class="s33">PATH</span>) and for all commands in older versions of <span class="s33">zsh </span>like this:</p><p class="s33" style="padding-top: 6pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">{  ./mycommand  }  &gt;record.txt  &gt;&gt;allrecords.txt</p><p style="padding-top: 8pt;padding-left: 42pt;text-indent: 18pt;line-height: 115%;text-align: justify;">The braces are an instruction to the shell to run a list of commands (or just one, in this case). The redirections apply to the braces as a whole, so the shell will wait for output to be written before it executes whatever command follows the line we’ve shown.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part213.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part215.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
