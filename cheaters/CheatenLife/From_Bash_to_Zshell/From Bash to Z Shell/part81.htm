<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Basic Moving and Deleting</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part80.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part82.htm">Next &gt;</a></p><p class="s18" style="padding-left: 40pt;text-indent: 0pt;text-align: left;"><a name="bookmark157">Basic Moving and Deleting</a></p><p style="padding-top: 5pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">Simple move and delete keys for single characters are nearly all either special keys or keys with Ctrl held down. The most obvious are in Table 4-1.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s13" style="padding-top: 8pt;padding-bottom: 4pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">Table 4-1. <span class="s32">Simple Move and Delete Keys</span></p><p style="padding-left: 40pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="505" height="1" alt="image" src="Image_102.png"/></span></p><p class="s48" style="padding-bottom: 2pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">Key Purpose</p><p style="padding-left: 40pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="505" height="1" alt="image" src="Image_103.png"/></span></p><p class="s51" style="padding-top: 3pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">Backspace or Erase Delete previous character</p><p class="s51" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">Ctrl-d Delete character under cursor</p><p class="s51" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">Left Arrow or Ctrl-b Move to previous character</p><p class="s51" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">Right Arrow or Ctrl-f Move to next character</p><p class="s51" style="padding-top: 7pt;padding-left: 162pt;text-indent: -122pt;line-height: 109%;text-align: left;">Ctrl-t Transpose the character with the previous one (see the sidebar “Transposing Characters”)</p><p class="s51" style="padding-top: 5pt;padding-bottom: 4pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">Ctrl-v Insert the next character literally (explained later)</p><p style="padding-left: 40pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="505" height="1" alt="image" src="Image_104.png"/></span></p><p class="s29" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark195"><span class="s27">80 </span></a>CHAPTER 4 <span class="s28">■ </span>EN TERING AND ED ITING THE CO MMAND LINE </p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 42pt;text-indent: 18pt;line-height: 115%;text-align: left;">You use Ctrl-v to put onto the command line a character that would otherwise be an editing key. One common use for this is to insert a Tab character. On its own, Tab performs completion. If you want to insert a Tab character, you need to press Ctrl-v-Tab.</p><p style="padding-left: 42pt;text-indent: 18pt;line-height: 115%;text-align: left;">Note that the Delete key on a full-size PC keyboard is not the same as Erase or Backspace. You might expect it to delete the next character, as it often does under Windows. See the section “Configuration and Key Binding: readline and zle” in this chapter for help with this. (We’re describing the most common case on a PC-style keyboard. Some older Unix keyboards may behave differently.)</p><p style="padding-left: 42pt;text-indent: 18pt;line-height: 115%;text-align: left;">It’s sometimes useful to remember Ctrl-b and Ctrl-f if you find yourself using an odd keyboard where the shell is confused by the cursor keys.</p><p style="padding-left: 60pt;text-indent: 0pt;line-height: 10pt;text-align: left;">The key Ctrl-d is often rather overworked:</p><p style="padding-top: 8pt;padding-left: 67pt;text-indent: -10pt;line-height: 115%;text-align: left;">• If there are characters after the cursor, Ctrl-d deletes the first one, as we showed in Table 4-1.</p><p style="padding-top: 7pt;padding-left: 67pt;text-indent: -10pt;line-height: 115%;text-align: justify;">• In <span class="s33">zsh</span>, if you press Ctrl-d at the end of a line, it will probably show you a list of files. This is part of the shell’s completion facility, described in Chapter 10. (This is a feature taken from the C shell.)</p><p style="padding-top: 7pt;padding-left: 67pt;text-indent: -10pt;line-height: 115%;text-align: left;">• In both <span class="s33">bash </span>and <span class="s33">zsh</span>, typing Ctrl-d on an empty line may even cause the shell to exit! That’s because traditionally Unix treats Ctrl-d as “end-of-file” (EOF), a message from the user that they have finished sending input. Both shells have mechanisms for suppressing this. Here, <span class="s33">bash</span>’s is more powerful. If you set the following, then <span class="s33">bash </span>will only exit if you press Ctrl-d ten times in a row:</p><p class="s33" style="padding-top: 7pt;padding-left: 67pt;text-indent: 0pt;text-align: left;">bash$ <b>IGNOREEOF=10</b></p><p style="padding-top: 8pt;padding-left: 67pt;text-indent: 0pt;text-align: left;">In <span class="s33">zsh</span>, the equivalent effect is achieved by setting an option, as follows:</p><p class="s33" style="padding-top: 8pt;padding-left: 67pt;text-indent: 0pt;text-align: left;">zsh% <b>setopt ignore_eof</b></p><p style="text-indent: 0pt;text-align: left;"><span><img width="62" height="147" alt="image" src="Image_105.png"/></span></p><p class="s40" style="padding-top: 3pt;padding-left: 113pt;text-indent: 0pt;text-align: center;">TRANSPOSING CHARACTERS</p><p class="s40" style="padding-top: 3pt;padding-left: 113pt;text-indent: 0pt;text-align: center;">TRANSPOSING CHARACTERS</p><p style="text-indent: 0pt;text-align: left;"/><p class="s40" style="padding-top: 3pt;padding-left: 113pt;text-indent: 0pt;text-align: center;">TRANSPOSING CHARACTERS</p><p style="padding-top: 8pt;padding-left: 67pt;text-indent: 0pt;line-height: 115%;text-align: left;">However, in <span class="s33">zsh </span>the value 10 is fixed. This needs to be a finite number so that the shell can exit if the terminal has completely gone away. In that case the shell will read EOF characters continuously, and it would be unfortunate if it kept on doing so forever.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s33" style="padding-top: 6pt;padding-left: 9pt;text-indent: 0pt;line-height: 115%;text-align: left;">It may not be obvious quite what Ctrl-t, bound to the command transpose-chars, is doing. If you type it at the end of the line, it transposes the previous two characters, so repeating it swaps them back and forth.</p><p class="s33" style="padding-left: 9pt;text-indent: 0pt;line-height: 115%;text-align: left;">However, if you do it early in the line, it swaps the character under the cursor with the one before it, then moves the cursor on. The point of this rather complicated behavior is that pressing Ctrl-t repeatedly has the effect of marching a character further and further up the line. This is useful if more than one character were out of place. Of course, in that case deleting it and inserting it somewhere else may be easier.</p><p class="s33" style="padding-top: 6pt;padding-left: 9pt;text-indent: 0pt;line-height: 115%;text-align: left;">It may not be obvious quite what Ctrl-t, bound to the command transpose-chars, is doing. If you type it at the end of the line, it transposes the previous two characters, so repeating it swaps them back and forth.</p><p class="s33" style="padding-left: 9pt;text-indent: 0pt;line-height: 115%;text-align: left;">However, if you do it early in the line, it swaps the character under the cursor with the one before it, then moves the cursor on. The point of this rather complicated behavior is that pressing Ctrl-t repeatedly has the effect of marching a character further and further up the line. This is useful if more than one character were out of place. Of course, in that case deleting it and inserting it somewhere else may be easier.</p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"/><p class="s33" style="padding-top: 6pt;padding-left: 9pt;text-indent: 0pt;line-height: 115%;text-align: left;">It may not be obvious quite what Ctrl-t, bound to the command transpose-chars, is doing. If you type it at the end of the line, it transposes the previous two characters, so repeating it swaps them back and forth.</p><p class="s33" style="padding-left: 9pt;text-indent: 0pt;line-height: 115%;text-align: left;">However, if you do it early in the line, it swaps the character under the cursor with the one before it, then moves the cursor on. The point of this rather complicated behavior is that pressing Ctrl-t repeatedly has the effect of marching a character further and further up the line. This is useful if more than one character were out of place. Of course, in that case deleting it and inserting it somewhere else may be easier.</p><p class="s29" style="padding-top: 3pt;padding-left: 188pt;text-indent: 0pt;text-align: left;"><a name="bookmark196">CHAPTER 4 </a><span class="s28">■ </span>EN TERING AND ED ITING THE CO MMAND LIN E <span class="s27">81</span></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part80.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part82.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
