<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Eliminating a Directory from a Recursive Pattern Match</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part236.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part238.htm">Next &gt;</a></p><p class="s18" style="padding-left: 40pt;text-indent: 0pt;text-align: left;"><a name="bookmark427">Eliminating a Directory from a Recursive Pattern Match</a></p><p style="padding-top: 5pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">You might expect a pattern like <span class="s33">(files/*)# </span>to match a hierarchy of directories in the form <span class="s33">files/A/files/B</span>, repeated indefinitely. However, this doesn’t work. The shell doesn’t apply the pattern inside the parentheses correctly when it spans multiple directories. There is one special case that does work: when there is only one slash in the parentheses, and it appears right before the closing parenthesis. Therefore, <span class="s33">(file*/)#*.txt </span>matches a directory tree where each path component except the final one starts with the string <span class="s33">file</span>—for example, <span class="s33">filesA-Z/filesA-M/filesG-M/FISH.txt</span>. Because the single <span class="s33"># </span>at the end indicates zero or more repetitions, the pattern will also match a file ending in <span class="s33">.txt </span>in the current directory. Doubling the <span class="s33"># </span>has its usual effect of ensuring that the expression in parentheses matches at least once. You can see that <span class="s33">(*/)# </span>has the same effect as <span class="s33">**/</span>. In fact, <span class="s33">**/ </span>is simply shorthand.</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">Repeating patterns for directories probably looks rather strange and not very useful. Actually, there are cases where it can help you. Here’s one: CVS (Concurrent Versioning System) is a very common tool for keeping control of different versions of files laid out in a directory hierarchy. It’s used by <span class="s33">zsh </span>as well as many other software projects. The tool maintains its own information about files in each directory in a special subdirectory called <span class="s33">CVS</span>. For example, the following output displays some of the directories in the current <span class="s33">zsh </span>tree, printed one per line for clarity:</p><p class="s33" style="padding-top: 6pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">zsh% <b>print -l Src/**/</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">Src/ Src/Builtins/ Src/Builtins/CVS/ Src/CVS/ Src/Modules/ Src/Modules/CVS/ Src/Zle/ Src/Zle/CVS/</p><p style="padding-top: 7pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: justify;">We’ve employed a trick that has yet to be introduced. You can place a <span class="s33">/ </span>at the end of a file pattern, causing <span class="s33">zsh </span>to match solely directories. Note that the shell always outputs the slash at the end of each directory path. Those <span class="s33">CVS </span>directories just contain the special files; they’re a bit of a nuisance if we only want the directories containing files specific to the <span class="s33">zsh </span>project. Here’s how to prune the list:</p><p class="s33" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">zsh% <b>print -l Src/(^CVS/)#</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">Src/ Src/Builtins/ Src/Modules/ Src/Zle/</p><p class="s29" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark467"><span class="s27">220 </span></a>CHAPTER 9 <span class="s28">■ </span>PATTER N MATCHING </p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 60pt;text-indent: 0pt;text-align: left;">In this example, we used <span class="s33">^ </span>to make the directory pattern anything other than <span class="s33">CVS</span>.</p><p style="padding-top: 1pt;padding-left: 42pt;text-indent: 18pt;line-height: 115%;text-align: left;">As the previous output made clear, the directory names generated by the pattern include a <span class="s33">/ </span>at the end for each directory matched, including the final directory. That means you don’t need to add another slash when you want to find a file in the directory that’s matched by the <span class="s33">(^CVS/)#</span>. For example, <span class="s33">Src/(^CVS/)#zle_tricky.c </span>matches the file <span class="s33">Src/Zle/zle_tricky.c</span>.</p><p style="padding-left: 42pt;text-indent: 18pt;line-height: 115%;text-align: left;">There is no equivalent in <span class="s33">zsh </span>for the <span class="s33">ksh </span>and <span class="s33">bash </span>pattern ?(<i>pat</i>), which matches zero or one occurrences of a pattern—unless you turn on the option <span class="s33">ksh_glob </span>and use <span class="s33">?(</span><i>pat</i><span class="s33">)</span>; we don’t recommend <span class="s33">ksh_glob </span>unless you really prefer that syntax. However, you can do it in the same number of characters by using <span class="s33">(</span><i>pat</i><span class="s33">|)</span>. That doesn’t even require extended globbing. This expression consists of two alternatives: either it matches <i>pat</i>, or it matches nothing at all.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part236.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part238.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
