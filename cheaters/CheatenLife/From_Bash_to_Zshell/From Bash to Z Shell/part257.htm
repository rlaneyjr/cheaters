<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Completion</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part256.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part258.htm">Next &gt;</a></p><p class="s17" style="padding-top: 9pt;padding-left: 40pt;text-indent: 0pt;text-align: left;"><a name="bookmark478">Completion</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h2 style="padding-top: 23pt;padding-left: 40pt;text-indent: 0pt;line-height: 88%;text-align: left;">S<span class="p">hell completion started out in the C shell as a way to save the user effort when typing out long filenames. The user types the first few characters of a filename and presses a special key</span></h2><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">such as Tab or Esc. The shell then <i>completes </i>the remaining characters of the filename. Consider the following example:</p><p class="s33" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">% <b>ls</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">index.html intro.html links.html</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">% <b>cat l</b>&lt;tab&gt;</p><p style="padding-top: 8pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">expands to</p><p class="s33" style="padding-top: 8pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">% <b>cat links.html</b></p><p style="padding-top: 8pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: justify;">As you can see, I want to review <span class="s33">links.html</span>, and I only had to type the first letter and then press the Tab key, prompting the shell to complete the filename for me. It’s quite a convenient feature indeed!</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">Modern shells have extended this basic idea well beyond its original scope. All manner of things can be completed: filenames, usernames, options, email addresses, words taken from the shell history, and anything else you can possibly imagine. When multiple completion candi- dates exist, the list of possibilities can be displayed, accompanied by descriptive explanations, and an interactive menu can be used to select among the possibilities. Also, it doesn’t stop at merely completing extra characters: anything that involves intelligently interpreting your current command line to do something useful can be done—correcting typos and expanding patterns, for example.</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">Much of this control requires specific instructions to be written for each Unix command. <span class="s33">tcsh </span>was the first shell to offer such a capability, i.e., <i>programmable completion</i>, using a built- in with special syntax. <span class="s33">zsh </span>followed with a system based around a similar built-in, but this has since been superseded by a much more flexible system using shell functions. For <span class="s33">bash</span>, programmable completion is still a relatively new and immature feature. <span class="s33">bash </span>also utilizes shell functions. We will cover how to write such completion functions in Chapter 15. In this chapter, we will show you how to make use of the many functions that have already been written and how to configure them to work in the way that suits you best. Specifically, in this chapter we’ll cover the following topics:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s27" style="padding-left: 39pt;text-indent: 0pt;text-align: right;">231</p><p class="s29" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark511"><span class="s27">232 </span></a>CHAPTER 10 <span class="s28">■ </span>COMPLETION </p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 67pt;text-indent: -10pt;line-height: 115%;text-align: left;">• Enabling the full power of the <span class="s33">bash </span>and <span class="s33">zsh </span>completion systems. We’ll introduce many of the features this will make available to you.</p><p style="padding-top: 7pt;padding-left: 67pt;text-indent: -10pt;line-height: 115%;text-align: left;">• Configuring the display of completion matches. This includes coverage of how to enable the <span class="s33">zsh </span>feature of displaying descriptions alongside completion matches.</p><p style="padding-top: 7pt;padding-left: 67pt;text-indent: -10pt;line-height: 115%;text-align: left;">• Exploring the different ways in which completion can be configured to behave. This includes presenting interactive menus, expanding patterns, and correcting typos.</p><p style="padding-top: 7pt;padding-left: 57pt;text-indent: 0pt;text-align: left;">• Learning ways to control how the shell chooses the candidate completion matches.</p><p style="padding-top: 8pt;padding-left: 67pt;text-indent: -10pt;line-height: 115%;text-align: left;">• Seeing how the shell copes with some awkward situations. This includes removal of unwanted suffix characters and the case where one of the completion matches does not need any extra characters to be inserted.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="toc">&nbsp;</p><div class="toc"><a class="toc0" href="part258.htm">Getting Started with Completion</a><a class="toc1" href="part259.htm">bash_completion</a><a class="toc1" href="part260.htm">zsh’s compinit</a><a class="toc1" href="part261.htm">Completing Things Other Than Files</a><a class="toc1" href="part262.htm">A Brief Tour of Programmable Completion</a><a class="toc1" href="part263.htm">Completing Parts of Words</a><a class="toc1" href="part264.htm">Configuring Completion</a><a class="toc0" href="part265.htm">Listing and Formatting Possible Matches</a><a class="toc1" href="part266.htm">Listing Matches</a><a class="toc1" href="part267.htm">Altering the Appearance of the List</a><a class="toc1" href="part268.htm">Formatting Messages</a><a class="toc1" href="part269.htm">Grouping Related Matches</a><a class="toc1" href="part270.htm">Per-match Descriptions</a><a class="toc1" href="part271.htm">Handling Lots of Matches</a><a class="toc0" href="part272.htm">Types of Completion</a><a class="toc1" href="part273.htm">Menu Completion</a><a class="toc1" href="part274.htm">Menu Selection</a><a class="toc1" href="part275.htm">Expanding Variables and Patterns</a><a class="toc1" href="part276.htm">Approximate Completion</a><a class="toc0" href="part277.htm">Controlling Matching</a><a class="toc1" href="part278.htm">Case-Insensitive Matching</a><a class="toc1" href="part279.htm">Prefix Completion</a><a class="toc1" href="part280.htm">Partial Completion</a><a class="toc0" href="part281.htm">Reducing the Number of Matches</a><a class="toc1" href="part282.htm">Excluding Certain File Types</a><a class="toc1" href="part283.htm">Ignoring Matches Based on Other Criteria</a><a class="toc1" href="part284.htm">Completing Ignored Matches</a><a class="toc1" href="part285.htm">Requiring Prefixes</a><a class="toc1" href="part286.htm">Defining Different Words to Complete</a><a class="toc0" href="part287.htm">Automatically Added Suffixes</a><a class="toc0" href="part288.htm">Exact Ambiguous Matches</a><a class="toc0" href="part289.htm">Summary</a></div><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part256.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part258.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
