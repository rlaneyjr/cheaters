<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Modifiers</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part129.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part131.htm">Next &gt;</a></p><p class="s35" style="padding-left: 42pt;text-indent: 0pt;text-align: left;"><a name="bookmark256">Modifiers</a></p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 115%;text-align: justify;">The third part of a history substitution is a “modifier” because it modifies the word you’ve picked out so far. This is particularly useful for extracting parts of filenames. The two most useful sorts of modifier are those that work on files and those that do substitutions. In <span class="s33">zsh</span>, these modifiers are useful in other places we’ll discuss later in the section.</p><p style="padding-left: 41pt;text-indent: 17pt;line-height: 115%;text-align: left;">Modifiers that deal with filenames assume a standard Unix-style path. This means if you’re working under Cygwin you won’t get the right effect from Windows-style paths with backslashes. Let’s assume we’ve just executed the line</p><p class="s33" style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">%  <b>ls  -l  /home/pws/zsh/sourceforge/zsh/Src/Zle/zle_main.c</b></p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">...file  details...</p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">Then we can get three effects on that second argument to <span class="s33">ls</span>, the head (directory part) of the filename:</p><p class="s33" style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">%  <b>ls  !:2:h</b></p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">ls  /home/pws/zsh/sourceforge/zsh/Src/Zle</p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">...directory  contents  ...</p><p style="padding-top: 8pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">Next we can get the tail (nondirectory part):</p><p class="s33" style="padding-top: 8pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">%  <b>echo  !-2:2:t  &gt;&gt;source_files.lis</b></p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">echo  zle_main.c  &gt;&gt;source_files.lis</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 59pt;text-indent: 0pt;text-align: left;">Then we can remove the suffix:</p><p class="s33" style="padding-top: 8pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">% <b>echo !-3:2:r</b></p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">echo  /home/pws/zsh/sourceforge/zsh/Src/Zle/zle_main</p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">/home/pws/zsh/sourceforge/zsh/Src/Zle/zle_main</p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 17pt;line-height: 115%;text-align: left;">Often you remove the suffix in order to replace it with another one. Here we strip <span class="s33">.c </span>and add <span class="s33">.o </span>to turn a C source file into the compiler output file:</p><p class="s33" style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">%  <b>ls  -l  !-4:2:r.o</b></p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">ls  -l  /home/pws/zsh/sourceforge/zsh/Src/Zle/zle_main</p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">...file  details  for  the  .o  file,  if  it  exists</p><p class="s29" style="padding-top: 3pt;padding-left: 247pt;text-indent: 0pt;text-align: left;">CHAPTER 6 <span class="s28">■ </span>MORE AB OU T SHELL HISTOR Y <span class="s27">129</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 58pt;text-indent: 0pt;text-align: left;">You can combine modifiers, but you need to repeat the colon each time:</p><p class="s33" style="padding-top: 8pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">% <b>echo !-5:2:t:r.o &gt;&gt;object_files.lis</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">echo zle_main.o &gt;&gt;object_files.lis</p><p style="padding-top: 8pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">The modifiers are evaluated from left to right. This is important to know when you have <span class="s33">:h </span>and <span class="s33">:t </span>in the same expression. Almost certainly any <span class="s33">:t </span>should come after any <span class="s33">:h</span>, since <span class="s33">:t </span>removes all the slashes. Two <span class="s33">:h</span>’s in a row strip off two levels of path.</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">Substitutions are a bit hairier. If you know about <span class="s33">sed </span>or <span class="s33">perl</span>, or are a <span class="s33">vi </span>user who makes use of substitutions there, the form of a substitution will be familiar to you:</p><p class="s33" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">% <b>echo There\&#39;s no subsitute for hard work.</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">There&#39;s no substitute for hard work.</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">% <b>!!:s/substitute/accounting/</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">echo There\&#39;s no accounting for hard work. There&#39;s no accounting for hard work.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: justify;">The <span class="s33">/</span>’s delimit the text that is being replaced and the text it’s being replaced with. As you can see in that example, you don’t need to have a word selector before the modifier. The shell is smart enough to realize that if something that could be a word selector actually starts with <span class="s33">s </span>it must be a modifier instead. This is often useful with substitutions.</p><p style="padding-left: 58pt;text-indent: 0pt;line-height: 10pt;text-align: left;">Once you’ve done one substitution, you can repeat it with the command <span class="s33">&amp;</span>:</p><p class="s33" style="padding-top: 8pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">% <b>echo There are substitutes for butter.</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">There are substitutes for butter.</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">% <b>!!:&amp;</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">echo There are accountings for butter. There are accountings for butter.</p><p style="padding-top: 7pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">The substitution—replacing “substitute” for “accounting”—was remembered. It is kept until the next <span class="s33">:s</span>, or until you exit the shell. Note that there is only one set of search and replace data for all use of modifiers, including those not from the history mechanism we describe later.</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">The delimiters after <span class="s33">:s </span>don’t actually need to be slashes, just as long as they’re the same character three times. This is useful if you’re replacing chunks of a filename:</p><p class="s33" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">% <b>pr -h &quot;Study this carefully, ASAP&quot; Src/main.c | lpr -Pink</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">-rw-r--r-- 1 pws users 1362 Aug 2 2000 Src/main.c</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">% <b>!!:s&#39;Src/main.c&#39;Doc/zshexpn.1&#39;</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">+pr  -h  &quot;Study  this  carefully,  ASAP&quot;  Doc/zshexpn.1  |  lpr  -Pink</p><p style="padding-top: 8pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">(This formats a file for printing with the header shown and sends it to the printer called <span class="s33">ink</span>.) The quotes work here because history substitution occurs very early in processing, before the shell has looked for special characters.</p><p class="s29" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark275"><span class="s27">130 </span></a>CHAPTER 6 <span class="s28">■ </span>MORE ABOUT SHELL H I STORY </p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 60pt;text-indent: 0pt;text-align: left;">Changing something in the last line is so common that there’s a shorthand for it:</p><p class="s33" style="padding-top: 8pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">% <b>echo There\&#39;s no subsititute for hard work.</b></p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">% <b>^hard work^taste</b></p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;line-height: 115%;text-align: left;">echo There\&#39;s no substitute for taste. There&#39;s no substitute for taste.</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">In full there would be three <span class="s33">^</span>’s, just as you need three delimiters in a normal substitution. You can get away with two unless there’s more text. In that case, you can even have more modifiers:</p><p class="s33" style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">%  <b>echo  There\&#39;s  no  substitute  for  hard  work.</b></p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">There&#39;s no substitute for hard work.</p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">%  <b>^hard  work^taste^:s/substitute/accounting/</b></p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;line-height: 115%;text-align: left;">echo There\&#39;s no accounting for taste. There&#39;s no accounting for taste.</p><p style="padding-top: 7pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">Substitutions usually just substitute once in each line:</p><p class="s33" style="padding-top: 8pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">% <b>echo this line is not a large line</b></p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">this line is not a large line</p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">% <b>^line^lion</b></p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">echo this lion is not a large line</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 59pt;text-indent: 0pt;text-align: left;">The way to do global replacements is to use <span class="s33">:gs </span>in place of <span class="s33">:s</span>:</p><p class="s33" style="padding-top: 8pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">% <b>echo this line is not a large line</b></p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">this line is not a large line</p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">% <b>!!:gs/line/lion/</b></p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">echo this lion is not a large lion</p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">Unfortunately, there’s no way of doing this with the <span class="s33">^ </span>form. Remember the <span class="s33">g </span>should be placed in front. This is different from, for example, substitutions in sed or Perl. These languages have a similar syntax, although they use regular expressions to match the text to be replaced. However, in sed and Perl the <span class="s33">g </span>comes at the end.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="toc">&nbsp;</p><div class="toc"><a class="toc0" href="part131.htm">Other Uses of History Modifiers</a></div><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part129.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part131.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
