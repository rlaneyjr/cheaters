<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Accessing Array Elements</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part314.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part316.htm">Next &gt;</a></p><p class="s35" style="padding-left: 42pt;text-indent: 0pt;text-align: left;"><a name="bookmark580">Accessing Array Elements</a></p><p style="padding-top: 5pt;padding-left: 42pt;text-indent: 0pt;line-height: 115%;text-align: left;">Array variable expansions are written just like regular variable expansions except that they are followed by an index in brackets. The brackets are called the <i>subscript operator </i>and the index inside them is commonly referred to as the <i>subscript</i>. Let’s try it out using a simple subscript that consists of just <span class="s33">1</span>:</p><p class="s33" style="padding-top: 7pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">bash$ <b>arr=( one two three )</b></p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">bash$ <b>echo ${arr[1]}</b></p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">two</p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">If you try running the same commands in <span class="s33">zsh</span>, you will notice that you get a different result. This is because the first element of a <span class="s33">zsh </span>array is numbered 1 while <span class="s33">bash </span>starts from 0. This isn’t the only way in which <span class="s33">zsh </span>arrays are different. If you want <span class="s33">zsh </span>to act like <span class="s33">bash </span>or <span class="s33">ksh</span>, you can turn the <span class="s33">ksh_arrays </span>option on.</p><p style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">Note that we place braces around the expansion to force the index to be considered a part of it. <span class="s33">zsh </span>actually doesn’t require braces around array indexes so you can write</p><p class="s33" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">zsh% <b>echo $arr[1]</b></p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">Note that in array expansions, you can use further variable expansions for the index inside the brackets. This could be another array element. Mathematical expressions, which we’ll come to a little later, are even allowed inside the brackets. To demonstrate these two features, the following uses, as an array index, the result of adding 1 to the value of a variable named <span class="s33">offset</span>:</p><p class="s33" style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">zsh% <b>offset=1</b></p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">zsh% <b>echo $arr[1+$offset]</b></p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">two</p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">In <span class="s33">ksh</span>, regular string variables are actually treated as arrays containing just one element. For this reason, if you leave the subscript out in an array expansion, just the first element of the array will be expanded:</p><p class="s33" style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">$ <b>echo $arr</b></p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">one</p><p class="s33" style="padding-top: 8pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">bash <span class="p">behaves likewise. </span>zsh <span class="p">will expand all the elements of the array instead:</span></p><p class="s33" style="padding-top: 8pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">zsh% <b>echo $arr</b></p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">one two three</p><p style="padding-top: 8pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">If you want the same in <span class="s33">bash </span>you need to use one of two special forms: either <span class="s33">${arr[@]} </span>or</p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;line-height: 115%;text-align: left;">${arr[*]}<span class="p">. We’ll come to the differences between these in the section “Array Expansions” later in this chapter.</span></p><p style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">It is also possible to use array indexes in assignments. This allows you to change just one element of an array at a time. So, we could store the string “zwei” as element 1 of array <span class="s33">arr </span>with this command:</p><p class="s33" style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">arr[1]=zwei</p><p class="s29" style="padding-top: 3pt;padding-left: 314pt;text-indent: 0pt;text-align: left;"><a name="bookmark605">CHAPTER 12 </a><span class="s28">■ </span>VARIABLES <span class="s27">283</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">If the array <span class="s33">arr </span>doesn’t exist, it will be created. In <span class="s33">zsh</span>, you can even replace a range of values in an array”</p><p class="s33" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">arr[2,3]=( zwei drei )</p><p style="padding-top: 8pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">What this actually does is first remove elements <span class="s33">2 </span>and <span class="s33">3 </span>and then insert the new elements in the array. You don’t even need to insert as many elements as you remove. As a result of this, an element (or elements) can be deleted from an array in <span class="s33">zsh </span>by assigning <span class="s33">() </span>to them. So the following command will remove the second element of the <span class="s33">arr </span>array:</p><p class="s33" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">arr[2]=()</p><p class="s33" style="padding-top: 8pt;padding-left: 58pt;text-indent: 0pt;text-align: left;">zsh<span class="p">’s array ranges tend to be most useful when accessing an array. You can use the value</span></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">-1 <span class="p">to indicate the last element in the array, so the following retrieves all elements from the second to the last in an array:</span></p><p class="s33" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">zsh% <b>arr=( one two three )</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">zsh% <b>echo $arr[2,-1]</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">two three</p><p style="padding-top: 8pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">If you want to retrieve the last element of an array in <span class="s33">bash</span>, you can’t use an index of <span class="s33">-1</span>. Instead, you can make use of the <span class="s33"># </span>flag, which, as we saw earlier, allows you to retrieve the length of an array. So to retrieve the last element of an array you need the following:</p><p class="s33" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">bash$ <b>echo ${arr[${#arr}-1]}</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">three</p><p style="padding-top: 8pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">With ordinary variables, the <span class="s33"># </span>flag causes the expansion to return the length of the variable in characters. As the following demonstrates, this even works for an array element:</p><p class="s33" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">$ <b>echo ${arr[1]}</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">two</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">$ <b>echo ${#arr[1]}</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">3</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part314.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part316.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
