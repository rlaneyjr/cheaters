<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Asking the User for Input</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part355.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part357.htm">Next &gt;</a></p><p class="s18" style="padding-left: 42pt;text-indent: 0pt;text-align: left;"><a name="bookmark648">Asking the User for Input</a></p><p style="padding-top: 5pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">In this section, we will cover the special case where your script reads input typed by the user.</p><p style="padding-top: 1pt;padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">If you have tried using the <span class="s33">read </span>command without redirecting standard input from a file or pipe of some sort, you will see that it will use the regular standard input to the shell. You might want this if you intend your script to be used in a pipeline. In other circumstances, standard input will be the terminal device. In other words, reading from it will return a line of text typed by the user.</p><p style="padding-left: 60pt;text-indent: 0pt;line-height: 10pt;text-align: left;">For example, if you need to prompt the user for an e-mail address in a script, you might write</p><p class="s33" style="padding-top: 8pt;padding-left: 42pt;text-indent: 0pt;line-height: 115%;text-align: left;">echo -n &quot;Enter e-mail address: &quot; &gt;&amp;2 read -r address</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 18pt;line-height: 114%;text-align: left;">The <span class="s33">-r </span>option to <span class="s33">read </span>stands for raw. It prevents backslash escapes being interpreted in the input. Because displaying a prompt is very common, you can specify it directly from <span class="s33">read</span>. In <span class="s33">ksh </span>or <span class="s33">zsh</span>, this would be</p><p class="s33" style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">read -r &#39;address?Enter e-mail address: &#39;</p><p style="padding-top: 8pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">For <span class="s33">bash</span>, the prompt is specified with a <span class="s33">-p </span>option:</p><p class="s33" style="padding-top: 8pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">read  -r  -p  &#39;Enter  e-mail  address:  &#39;  address</p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 17pt;line-height: 115%;text-align: left;">If you use the <span class="s33">-e </span>option, <span class="s33">bash </span>will use readline. This means that you will get many of the features associated with entering information on the command line. For example, you will get filename completion and be able to recall lines from the history.</p><p style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: justify;">In <span class="s33">zsh</span>, the <span class="s33">read </span>command doesn’t have an equivalent option; <span class="s33">-e </span>does something entirely different. Instead, you can use the <span class="s33">vared </span>built-in, which does use the <span class="s33">zsh </span>line editor, for reading user input. For example:</p><p class="s33" style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">vared  -c  -p  &#39;Enter  e-mail  address:  &#39;  address</p><p style="padding-top: 8pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">The <span class="s33">-c </span>option creates the variable if it doesn’t already exist.</p><p style="padding-top: 1pt;padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">The <span class="s33">vared </span>built-in is also useful from an interactive shell as a way of editing the value of a variable. To see how it works, try this:</p><p class="s33" style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">% <b>vared PATH</b></p><p class="s29" style="padding-top: 3pt;padding-left: 249pt;text-indent: 0pt;text-align: left;"><a name="bookmark689">CHAPTER 13 </a><span class="s28">■ </span>SCRIPTING AND FUNCTION S <span class="s27">333</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: justify;">When you’re editing arrays with <span class="s33">vared</span>, the first character in <span class="s33">$IFS </span>is used to separate elements. This will normally be a space but it can be nice to use a newline instead. The following alias is useful for this:</p><p class="s33" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">alias  lvared=&quot;IFS=\$&#39;\n&#39;  vared&quot;</p><p style="padding-top: 8pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">To edit the path, you can then do <span class="s33">lvared path</span>. Each directory in the path will then be placed on a separate line.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part355.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part357.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
