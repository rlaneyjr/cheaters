<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Number Bases</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part320.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part322.htm">Next &gt;</a></p><p class="s35" style="padding-top: 9pt;padding-left: 40pt;text-indent: 0pt;text-align: left;"><a name="bookmark586">Number Bases</a></p><p style="padding-top: 5pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">Sometimes it can be useful to operate in bases other than decimal (base 10). Inputting numbers in other bases works in both <span class="s33">bash </span>and <span class="s33">zsh</span>. You can specify hexadecimal (base 16) and octal (base 8) using the standard C convention: writing <span class="s33">0x </span>(“zero x”) before a hex number and <span class="s33">0 </span>(“zero”) before an octal number. In the following example, we input the number 255 using each of those bases in turn (in other words, we show that both FF hex and 377 octal are equiv- alent to 255 decimal):</p><p class="s33" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">$ <b>echo $(( 0xff ))</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">255</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">$ <b>echo $(( 0377 ))</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">255</p><p style="padding-top: 8pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: justify;">Alternatively, you can specify an arbitrary base. The following example specifies 255 using base 12:</p><p class="s33" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">$ <b>echo $(( 12#193 ))</b></p><p style="padding-top: 8pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: justify;">The standard C convention for octal is disabled by default in <span class="s33">zsh</span>, though. This is because it is inconvenient when parsing strings with initial zeros as is common for time strings. You can enable this feature by turning on the <span class="s33">octal_zeroes </span>option.</p><p class="s29" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark614"><span class="s27">292 </span></a>CHAPTER 12 <span class="s28">■ </span>VARIABLES </p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s33" style="padding-left: 42pt;text-indent: 18pt;line-height: 115%;text-align: left;">zsh <span class="p">goes a step further and allows you to output numbers in a different base. There are two ways to do this. In an arithmetic expression, you can specify the output base in brackets. For example, the following outputs a number in hexadecimal:</span></p><p class="s33" style="padding-top: 7pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">% <b>echo $(( [#16] 255 ))</b></p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">16#FF</p><p style="padding-top: 8pt;padding-left: 42pt;text-indent: 18pt;line-height: 115%;text-align: left;">Alternatively, when you declare an integer variable, you can specify its output base with an argument to the <span class="s33">-i </span>option. The following example uses this method to output a number in hexadecimal:</p><p class="s33" style="padding-top: 7pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">% <b>declare -i 16 i=255</b></p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">% <b>echo $i</b></p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">16#FF</p><p style="padding-top: 8pt;padding-left: 42pt;text-indent: 18pt;line-height: 115%;text-align: left;">It is also possible to have the output using the standard C conventions. For this, you need to turn on <span class="s33">zsh</span>’s <span class="s33">c_bases </span>option. Observe the following:</p><p class="s33" style="padding-top: 7pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">% <b>setopt c_bases</b></p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">% <b>echo $(( [#16] 255 ))</b></p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">0xFF</p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">% <b>setopt octal_zeroes</b></p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">% <b>echo $(( [#8] 255 ))</b></p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">0307</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part320.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part322.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
