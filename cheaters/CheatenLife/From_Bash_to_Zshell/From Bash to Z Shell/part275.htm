<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Expanding Variables and Patterns</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part274.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part276.htm">Next &gt;</a></p><p class="s35" style="padding-left: 40pt;text-indent: 0pt;text-align: left;"><a name="bookmark496">Expanding Variables and Patterns</a></p><p style="padding-top: 5pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">If you look to see what editor command is bound to the Tab key, you will probably find that the command is called <span class="s33">expand-or-complete</span>. So what does the “expand” part of this do? Well, it expands just about anything on the command line that would otherwise later be expanded by the shell before the line is executed. This includes, among other things, variable substitution, history substitution, and command substitution. This lets you see the result of various substi- tutions before you commit to running a command line by pressing Return. Let’s demonstrate this feature:</p><p class="s33" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">% <b>echo $CFLAGS</b>&lt;tab&gt;</p><p class="s67" style="padding-top: 1pt;padding-left: 49pt;text-indent: 0pt;text-align: left;">➤ <span class="s33">echo -O2</span></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">% <b>echo `which less`</b>&lt;tab&gt;</p><p class="s67" style="padding-top: 1pt;padding-left: 49pt;text-indent: 0pt;text-align: left;">➤ <span class="s33">echo /usr/bin/less</span></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">% <b>echo =less</b>&lt;tab&gt;</p><p class="s67" style="padding-top: 1pt;padding-left: 49pt;text-indent: 0pt;text-align: left;">➤ <span class="s33">echo /usr/bin/less</span></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">% <b>echo !#</b>&lt;tab&gt;</p><p class="s67" style="padding-top: 1pt;padding-left: 49pt;text-indent: 0pt;text-align: left;">➤ <span class="s33">echo echo</span></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">% <b>echo /etc/z*</b>&lt;tab&gt;</p><p class="s67" style="padding-top: 1pt;padding-left: 49pt;text-indent: 0pt;text-align: left;">➤ <span class="s33">echo /etc/zlogin /etc/zprofile /etc/zshenv /etc/zshrc</span></p><p style="padding-top: 8pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">The third of these expansions (<span class="s33">=less</span>) uses a feature we haven’t yet seen. It’s explained in the section “Finding the Full Path to a Command in zsh” in Chapter 11.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="507" height="1" alt="image" src="Image_213.png"/></span></p><p class="s21" style="padding-top: 4pt;padding-left: 40pt;text-indent: 0pt;line-height: 114%;text-align: justify;">■<span class="s23">Tip </span><span class="s19">The undo key is often useful in conjunction with expansion. If you are a vi or Emacs user, you will prob- ably find it bound to a familiar key combination, and if not, you may want to bind it to whatever your text editor uses, Ctrl-z perhaps. As you use the more advanced aspects of completion, you will find it to be invaluable.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="507" height="1" alt="image" src="Image_214.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 58pt;text-indent: 0pt;text-align: left;">There is an alternative in the case of filename expansion (the last of these examples).</p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">Instead of expanding all the files, of which there could be many, menu completion can be used, allowing you to select just one of the possible files. To enable this, turn on the <span class="s33">glob_complete </span>option.</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">There is a better way of doing expansion based on shell functions. It is newer and has the advantage of being much more configurable. To enable it, the first thing you will want to do is disable the original, internal expansion. To do this, you need to bind the Tab key to the plain <span class="s33">complete-word </span>editor command. The Tab key actually produces a Ctrl-i in effect, so the command for this is</p><p class="s33" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">bindkey &#39;\C-i&#39; complete-word</p><p class="s29" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark525"><span class="s27">246 </span></a>CHAPTER 10 <span class="s28">■ </span>COMPLETION </p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">Different types of completion are handled by functions that are called <i>completers</i>. For expansion, there is a completer named <span class="s33">_expand</span>. So next we need to tell the completion system that we want to use it before doing normal completion. The default list of completers is actually</p><p class="s33" style="padding-left: 41pt;text-indent: 0pt;line-height: 115%;text-align: left;">_complete <span class="p">(which does normal completion) followed by </span>_ignored <span class="p">(covered in the section “Completing Ignored Matches,” later in this chapter). So the style we want is</span></p><p class="s33" style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">zstyle  &#39;:completion:::::&#39;  completer  _expand  _complete  _ignored</p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">We now have the completer enabled but we have a bit more work to do if we want it to behave in a useful manner. If you try expansion at this point then, assuming you’ve set up grouping of completion matches by their tag, you’ll see behavior similar to the following:</p><p class="s33" style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;line-height: 115%;text-align: left;">% <b>echo /etc/z*</b>&lt;tab&gt; <b>expansions</b></p><p class="s33" style="padding-left: 41pt;text-indent: 0pt;line-height: 10pt;text-align: left;">/etc/zlogin /etc/zlogout /etc/zprofile /etc/zshenv /etc/zshrc</p><p class="s46" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">all expansions</p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">/etc/zlogin /etc/zlogout /etc/zprofile /etc/zshenv /etc/zshrc</p><p class="s46" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">original</p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">/etc/z*</p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">Note that under the “all expansions” heading is a single long match containing all the files and not five separate matches. So if you select the single long match all the filenames will be inserted on the command line.</p><p style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">You probably don’t want it to offer all these matches, though. The original string is easily reached with <span class="s33">undo </span>anyway, and you probably only want one of the other two groups. Which of those you choose depends on whether you liked the <span class="s33">glob_complete </span>option or not. Fortunately, you can restrict which matches are added by their tag. First you need to know what tags the matches are added with. To help you with this, there is a <span class="s33">_complete_help </span>function. Let’s try it out with an example. Ctrl-x followed by h is usually bound to <span class="s33">_complete_help</span>, so that appears as <span class="s33">&lt;ctrl-x&gt;&lt;h&gt; </span>below:</p><p class="s33" style="padding-top: 6pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">% <b>echo /etc/z*</b>&lt;ctrl-x&gt;&lt;h&gt;</p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">tags in context :completion::expand:::</p><p class="s33" style="padding-top: 1pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">all-expansions expansions original (_expand)</p><p style="padding-top: 8pt;padding-left: 42pt;text-indent: 18pt;line-height: 115%;text-align: left;">This gives us the names of the tags used for the three groups we saw in the completion listing. If we just want to insert the one match with the <span class="s33">all-expansions </span>tag, we can then use this style:</p><p class="s33" style="padding-top: 7pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">zstyle &#39;:completion:*:expand:*&#39; tag-order all-expansions</p><p style="padding-top: 8pt;padding-left: 42pt;text-indent: 18pt;line-height: 115%;text-align: left;">The third component of the <span class="s33">zstyle </span>context is the name of the completer with the leading underscore omitted. In this case, we want our style to affect the <span class="s33">_expand </span>completer so we use <span class="s33">expand</span>. If you try expansion with this style, it should now just insert the list of files.</p><p style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: justify;">If you restricted it to just the <span class="s33">expansions </span>tag instead, you would achieve an effect similar to the <span class="s33">glob_complete </span>option. You can also combine more than one tag. For example, the following style is like <span class="s33">glob_complete </span>but the original string is included as a match:</p><p class="s33" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">zstyle  &#39;:completion:*:expand:*&#39;  tag-order  &#39;expansions  original&#39;</p><p class="s29" style="padding-top: 3pt;padding-left: 304pt;text-indent: 0pt;text-align: left;"><a name="bookmark526">CHAPTER 10 </a><span class="s28">■ </span>COMPLE TION <span class="s27">247</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 58pt;text-indent: 0pt;text-align: left;">Two styles allow you to limit the types of expansion:</p><p style="padding-top: 8pt;padding-left: 56pt;text-indent: 0pt;text-align: left;">• If you set <span class="s33">glob </span>to <span class="s33">false</span>, then filename generation (globbing) will not be done.</p><p style="padding-top: 8pt;padding-left: 56pt;text-indent: 0pt;text-align: left;">• If you set <span class="s33">substitute </span>to <span class="s33">false</span>, then most substitutions introduced by a <span class="s33">$ </span>are disabled.</p><p style="padding-top: 8pt;padding-left: 58pt;text-indent: 0pt;text-align: left;">So if you only want variables and not files to be expanded, you could use the style</p><p class="s33" style="padding-top: 8pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">zstyle &#39;:completion:*:expand:*&#39; glob false</p><p style="padding-top: 8pt;padding-left: 58pt;text-indent: 0pt;text-align: left;">This may be useful if you want to use another completer, <span class="s33">_match</span>, to handle glob patterns.</p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">You may notice that the expansion of variables and named directory references is not always done. If you press Tab immediately after a variable reference, it is expanded, but if you add a subsequent slash, completion carries on with no expansion having taken place. There are two styles, both on by default, that control this:</p><p style="padding-top: 7pt;padding-left: 56pt;text-indent: 0pt;text-align: left;">• <span class="s33">keep-prefix </span>preserves a tilde or variable expansion at the beginning of the word.</p><p style="padding-top: 8pt;padding-left: 66pt;text-indent: -10pt;line-height: 115%;text-align: left;">• <span class="s33">suffix </span>preserves a tilde or variable expansion if there are no further characters following the last one.</p><p style="padding-top: 7pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">As an example, try completion after <span class="s33">echo ~/.z*</span>. The expanded list of files will include the initial <span class="s33">~</span>. With <span class="s33">keep-prefix </span>disabled, the expansions would contain the full location of your home directory instead. The <span class="s33">suffix </span>style does not have as strong an effect. If you complete after <span class="s33">~/</span>, it will prevent expansion of the tilde, allowing normal completion to proceed. The subtleties of these styles are really quite complicated, and our advice would be not to try to understand them fully but to experiment until things work in a way that you like.</p><p style="padding-left: 58pt;text-indent: 0pt;line-height: 10pt;text-align: left;">The <span class="s33">_match </span>completer provides an alternative way to handle glob patterns in completion.</p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">Instead of performing filename expansion, the pattern is matched against the completion matches you would get from normal completion. So completion after <span class="s33">declare m*path </span>would add matching variables such as <span class="s33">mailpath</span>, <span class="s33">manpath</span>, and <span class="s33">module_path </span>as matches. <span class="s33">_match </span>is covered in more detail in the section “Stand-alone Completion Widgets” in Chapter 15.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part274.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part276.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
