<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Qualifiers for Ordering and Selecting</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part249.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part251.htm">Next &gt;</a></p><p class="s35" style="padding-left: 40pt;text-indent: 0pt;text-align: left;"><a name="bookmark440">Qualifiers for Ordering and Selecting</a></p><p class="s40" style="padding-top: 3pt;padding-left: 116pt;text-indent: 0pt;text-align: left;">THE ls COMMAND AND GLOBBING</p><p class="s40" style="padding-top: 3pt;padding-left: 116pt;text-indent: 0pt;text-align: left;">THE ls COMMAND AND GLOBBING</p><p style="text-indent: 0pt;text-align: left;"/><p class="s40" style="padding-top: 3pt;padding-left: 116pt;text-indent: 0pt;text-align: left;">THE ls COMMAND AND GLOBBING</p><p style="padding-top: 5pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">Normally the matches generated by globbing are sorted into the order of the names, with the effect of the option <span class="s33">numeric_glob_sort </span>taken into account. You can turn that option on for one pattern only with the qualifier <span class="s33">n</span>. However, sometimes you want to specify a different order— for example, sorting by the age of the files. You need to be careful if you list the files you’ve ordered using <span class="s33">ls</span>. In the sidebar “The ls Command and Globbing,” we briefly explain the inter- action between <span class="s33">ls </span>and globbing.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s33" style="padding-top: 6pt;padding-left: 9pt;text-indent: 0pt;line-height: 115%;text-align: left;">The ls command does its own ordering, so the files you pass as arguments may be output in a different order from the one in which they were listed on the command line. The default, as with the shell, is to sort the file- names according to the <i>collation sequence </i>specified by the locale; see the section “Internationalization and Locales,” earlier in this chapter. This determines how every character in the character set is related to every other. You can specify reverse chronological order with ls -t. There are other relevant options as well; execute man ls to see them. To keep the output in the order generated by the shell (as modified by any locale settings), many of the examples in this chapter use echo and print to output the names in the order the shell generates them.</p><p class="s33" style="padding-left: 9pt;text-indent: 0pt;line-height: 10pt;text-align: left;">The spacing in the output from ls is modified, too: ls usually uses formatted columns. So sometimes we use</p><p class="s33" style="padding-top: 1pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">echo just to make the output simpler.</p><p class="s33" style="padding-top: 1pt;padding-left: 9pt;text-indent: 0pt;line-height: 115%;text-align: left;">More generally, beginners often use ls where the shell can do everything on its own. Consider the examples in the section “for and foreach Loops” in Chapter 2: we didn’t need ls at all. Expressions like `ls` used to generate filenames are the wrong way to do it—use * instead.</p><p class="s33" style="padding-left: 9pt;text-indent: 0pt;line-height: 10pt;text-align: left;">The ls command comes into its own when you need specific information about files including directories.</p><p class="s33" style="padding-top: 1pt;padding-left: 9pt;text-indent: 0pt;line-height: 115%;text-align: left;">If you find you are using ls for some other reason, you might want to stop and think if using globbing would be simpler.</p><p class="s33" style="padding-top: 6pt;padding-left: 9pt;text-indent: 0pt;line-height: 115%;text-align: left;">The ls command does its own ordering, so the files you pass as arguments may be output in a different order from the one in which they were listed on the command line. The default, as with the shell, is to sort the file- names according to the <i>collation sequence </i>specified by the locale; see the section “Internationalization and Locales,” earlier in this chapter. This determines how every character in the character set is related to every other. You can specify reverse chronological order with ls -t. There are other relevant options as well; execute man ls to see them. To keep the output in the order generated by the shell (as modified by any locale settings), many of the examples in this chapter use echo and print to output the names in the order the shell generates them.</p><p class="s33" style="padding-left: 9pt;text-indent: 0pt;line-height: 10pt;text-align: left;">The spacing in the output from ls is modified, too: ls usually uses formatted columns. So sometimes we use</p><p class="s33" style="padding-top: 1pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">echo just to make the output simpler.</p><p class="s33" style="padding-top: 1pt;padding-left: 9pt;text-indent: 0pt;line-height: 115%;text-align: left;">More generally, beginners often use ls where the shell can do everything on its own. Consider the examples in the section “for and foreach Loops” in Chapter 2: we didn’t need ls at all. Expressions like `ls` used to generate filenames are the wrong way to do it—use * instead.</p><p class="s33" style="padding-left: 9pt;text-indent: 0pt;line-height: 10pt;text-align: left;">The ls command comes into its own when you need specific information about files including directories.</p><p class="s33" style="padding-top: 1pt;padding-left: 9pt;text-indent: 0pt;line-height: 115%;text-align: left;">If you find you are using ls for some other reason, you might want to stop and think if using globbing would be simpler.</p><p style="padding-left: 39pt;text-indent: 0pt;text-align: left;"/><p class="s33" style="padding-top: 6pt;padding-left: 9pt;text-indent: 0pt;line-height: 115%;text-align: left;">The ls command does its own ordering, so the files you pass as arguments may be output in a different order from the one in which they were listed on the command line. The default, as with the shell, is to sort the file- names according to the <i>collation sequence </i>specified by the locale; see the section “Internationalization and Locales,” earlier in this chapter. This determines how every character in the character set is related to every other. You can specify reverse chronological order with ls -t. There are other relevant options as well; execute man ls to see them. To keep the output in the order generated by the shell (as modified by any locale settings), many of the examples in this chapter use echo and print to output the names in the order the shell generates them.</p><p class="s33" style="padding-left: 9pt;text-indent: 0pt;line-height: 10pt;text-align: left;">The spacing in the output from ls is modified, too: ls usually uses formatted columns. So sometimes we use</p><p class="s33" style="padding-top: 1pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">echo just to make the output simpler.</p><p class="s33" style="padding-top: 1pt;padding-left: 9pt;text-indent: 0pt;line-height: 115%;text-align: left;">More generally, beginners often use ls where the shell can do everything on its own. Consider the examples in the section “for and foreach Loops” in Chapter 2: we didn’t need ls at all. Expressions like `ls` used to generate filenames are the wrong way to do it—use * instead.</p><p class="s33" style="padding-left: 9pt;text-indent: 0pt;line-height: 10pt;text-align: left;">The ls command comes into its own when you need specific information about files including directories.</p><p class="s33" style="padding-top: 1pt;padding-left: 9pt;text-indent: 0pt;line-height: 115%;text-align: left;">If you find you are using ls for some other reason, you might want to stop and think if using globbing would be simpler.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="toc">&nbsp;</p><div class="toc"><a class="toc0" href="part251.htm">Ordering Files</a></div><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part249.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part251.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
