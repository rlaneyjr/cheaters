<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>History Words</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part128.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part130.htm">Next &gt;</a></p><p class="s35" style="padding-left: 42pt;text-indent: 0pt;text-align: left;"><a name="bookmark255">History Words</a></p><p style="padding-top: 5pt;padding-left: 42pt;text-indent: 0pt;line-height: 115%;text-align: left;">There are two more arguments you can have in a history expansion: one to select the word in the history, the next to modify the retrieved text in some way. Neither needs to be there, but you can have all three. The arguments are separated by colons.</p><p style="padding-left: 42pt;text-indent: 18pt;line-height: 115%;text-align: left;">To restrict the retrieved text to one or more words in the history line, you can use one of the following:</p><p style="padding-top: 7pt;padding-left: 57pt;text-indent: 0pt;text-align: left;">• Numbers, where 0 is the command name and 1 is its first argument.</p><p style="padding-top: 8pt;padding-left: 57pt;text-indent: 0pt;text-align: left;">• <span class="s33">* </span>for everything except the command name.</p><p style="padding-top: 8pt;padding-left: 57pt;text-indent: 0pt;text-align: left;">• <span class="s33">$ </span>for the last argument on the command line.</p><p style="padding-top: 8pt;padding-left: 57pt;text-indent: 0pt;text-align: left;">• Two numbers, or a number and a <span class="s33">$</span>, with a <span class="s33">– </span>in between. This selects a range.</p><p class="s29" style="padding-top: 3pt;padding-left: 247pt;text-indent: 0pt;text-align: left;">CHAPTER 6 <span class="s28">■ </span>MORE AB OU T SHELL HISTOR Y <span class="s27">127</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: justify;">Let’s consider a few examples. The first line shows a simple <span class="s33">echo </span>command. Each of the other examples is to be typed immediately after that command line, so that in each case, <span class="s33">!! </span>refers to the same command line.</p><p class="s33" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">% <b>echo History is bunk.</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">History is bunk.</p><p class="s33" style="padding-top: 8pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">% <b>!!:0</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">echo</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">&lt;empty line&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s33" style="padding-left: 40pt;text-indent: 0pt;text-align: left;">% <b>!!:0-1</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">echo History History</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s33" style="padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">% <b>echo I said !!:$ </b>echo I said bunk. I said bunk.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s33" style="padding-left: 40pt;text-indent: 0pt;text-align: left;">% <b>echo The arguments were !!:*</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">echo  The  arguments  were  History  is  bunk. The  arguments  were  History  is  bunk.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s33" style="padding-left: 40pt;text-indent: 0pt;text-align: left;">% <b>echo And once again: !!:1-$</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">echo And once again: History is bunk. And once again: History is bunk.</p><p style="padding-top: 7pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: justify;">You can shorten the <span class="s33">!! </span>to a single <span class="s33">! </span>if it’s followed by one of these forms, so the first one could be reformatted like so:</p><p class="s33" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">% <b>!:0</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">echo</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">&lt;empty line&gt;</p><p style="padding-top: 8pt;padding-left: 58pt;text-indent: 0pt;text-align: left;">That only works with the colon after it. A <span class="s33">! </span>on its own is never substituted.</p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">In <span class="s33">zsh</span>, a single <span class="s33">! </span>refers to the last line you referred to, if you had previous history substitutions on the line. In other words,</p><p class="s33" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">% <b>perl -e &#39;printf &quot;%c\n&quot;, 65;&#39;</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">A</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">% <b>perl -e &#39;printf &quot;%c\n&quot;, 48;&#39;</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">0</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">% <b>perl !-2:* !:*</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">perl  -e  &#39;printf  &quot;%c\n&quot;,  65;&#39;  -e  &#39;printf  &quot;%c\n&quot;,  65;&#39; A</p><p class="s33" style="padding-left: 40pt;text-indent: 0pt;line-height: 10pt;text-align: left;">A</p><p class="s29" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark274"><span class="s27">128 </span></a>C HA P T E R 6 <span class="s28">■ </span>M OR E A B O U T S H EL L H I S T O R Y</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">The first set of arguments was inserted twice. (The example uses Perl to print out the char- acters corresponding to decimal numbers 65 and 48 in the ASCII character set.) You can turn this feature off by setting the shell option <span class="s33">csh_junkie_history</span>. It has that name because that’s the way <span class="s33">csh </span>does substitutions. (It was requested by <span class="s33">csh </span>addicts suffering withdrawal symp- toms.) <span class="s33">bash </span>does substitutions that way, too.</p><p style="padding-left: 42pt;text-indent: 18pt;line-height: 115%;text-align: justify;">That example shows that “words” in history are really command arguments—here, a full quoted expression. That’s true in all recent versions of <span class="s33">bash </span>and <span class="s33">zsh</span>. You need to use the line editor if you want to extract smaller pieces from a command line.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part128.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part130.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
