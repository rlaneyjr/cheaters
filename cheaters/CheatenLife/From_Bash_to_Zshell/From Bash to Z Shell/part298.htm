<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Command Substitution and Command Arguments</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part297.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part299.htm">Next &gt;</a></p><p class="s35" style="padding-left: 40pt;text-indent: 0pt;text-align: left;"><a name="bookmark549">Command Substitution and Command Arguments</a></p><p class="s33" style="padding-top: 5pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;"><span class="p">An expression in backquotes, </span>`<i>...</i>`<span class="p">, is equivalent to the same expression inside </span>$(<i>...</i>)<span class="p">. The second form wasn’t understood by older shells, so the first is still more commonly used. However, the second form is better if your shell supports it. (Backquotes are also called “backticks,” since they look a little bit more like ticks than quotes in many typefaces.)</span></p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">With simple substitutions it’s not obvious why the newer form is better. Here’s why: command substitution can include <i>any </i>set of shell commands. They might even include more command substitutions. If you use <span class="s33">$(</span><span class="s45">...</span><span class="s33">) </span>you don’t need to worry—the parentheses are always paired, so it will work without any changes to the commands inside. If you use backquotes, however, you will need to quote any backquotes inside.</p><p style="padding-left: 40pt;text-indent: 17pt;line-height: 115%;text-align: left;">Here’s an example complicated enough for the difference between the form with backquotes and the form with parentheses to be significant. It uses the command <span class="s33">strip</span>, which removes debugging information from executable files. It’s quite common for advanced Unix users to strip files in order to save disk space, provided they are sure they will not want to debug the programs:</p><p class="s33" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">strip $(file $(cat filenames) | grep &#39;not stripped&#39; | cut -d: -f1)</p><p style="padding-top: 8pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">This expands the contents of the file <span class="s33">filenames</span>, which contains a list of filenames. The shell runs the command <span class="s33">file </span>on this list. We pipe this output to <span class="s33">grep</span>, which looks for any files that have been marked “not stripped”. This message from <span class="s33">file </span>indicates an executable command that contains debugging symbols. We further pipe the output to <span class="s33">cut </span>to extract just the names of the files. The command substitution then passes the filenames to the <span class="s33">strip </span>command.</p><p style="padding-left: 58pt;text-indent: 0pt;line-height: 10pt;text-align: left;">If we’d used backquotes, the inner substitution would have had to be <span class="s33">\`cat filenames\`</span></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">to prevent the shell from thinking that <span class="s33">`file ` </span>was the command substitution. We’d have</p><p class="s33" style="padding-top: 8pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">strip `file \`cat filenames\` | grep &#39;not stripped&#39; | cut -d: -f1`</p><p style="padding-top: 8pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">That works, but if you use the form we recommend, it doesn’t need any backslashes for quoting.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="toc">&nbsp;</p><div class="toc"><a class="toc0" href="part299.htm">Quoted Command Substitution</a></div><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part297.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part299.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
