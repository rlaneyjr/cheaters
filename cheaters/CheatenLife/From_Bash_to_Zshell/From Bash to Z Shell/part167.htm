<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Variables in Prompts</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part166.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part168.htm">Next &gt;</a></p><p class="s35" style="padding-left: 42pt;text-indent: 0pt;text-align: left;"><a name="bookmark308">Variables in Prompts</a></p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 115%;text-align: left;">We have already mentioned that if you want variables or command substitutions to be expanded inside prompts you need to set the option <span class="s33">prompt_subst</span>. There’s one special case that works without that option: the variable <span class="s33">psvar</span>. It’s actually an array, so you assign to it in the form</p><p class="s33" style="padding-top: 7pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">psvar=(one two three four)</p><p style="padding-top: 8pt;padding-left: 42pt;text-indent: 18pt;line-height: 115%;text-align: left;">The shell can extract elements from the array into a prompt using the <span class="s33">%v </span>escape. You give this a number to tell it the element of <span class="s33">$psvar </span>you want. Hence:</p><p class="s33" style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">zsh% <b>print -rP &#39;%1v and a %2v&#39;</b></p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">one and a two</p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">This form works if you don’t have <span class="s33">prompt_subst </span>turned on, though you do need the option <span class="s33">prompt_percent </span>turned on. However, note that the element of <span class="s33">psvar </span>inserted is not further changed when it is put in the prompt; it is exactly the string that was assigned to the array, even if it contains <span class="s33">% </span>characters.</p><p style="padding-left: 42pt;text-indent: 18pt;line-height: 115%;text-align: left;">Some of the more interesting variable substitutions you might want to consider putting into prompts for one reason or another are <span class="s33">$SECONDS</span>, which tells you how many seconds the shell has been running; <span class="s33">$COLUMNS</span>, which tells you the width of the terminal; and <span class="s33">$RANDOM</span>, which is just a random number. That’s probably not all that useful on its own, but you can get some interesting fun effects by using it as part of an expression. This gives you a short random pattern at the start of a prompt (hit Return a few times to see it):</p><p class="s33" style="padding-top: 6pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">zsh% <b>expr=&#39;%$(( RANDOM &amp; 1 ))(?./.\\)&#39;</b></p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">zsh% <b>PS1=&quot;$expr$expr$expr$expr%# &quot;</b></p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">//\\%</p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">///\%</p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">\\\/%</p><p class="s33" style="padding-top: 8pt;padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;"><span class="p">The key is the arithmetic expression </span>$((<span class="s32">expr</span>))<span class="p">, which gets turned into either a one or zero with (roughly) equal probability. (We’ll meet shell arithmetic in the section “Numeric Variables</span></p><p class="s29" style="padding-top: 3pt;padding-left: 39pt;text-indent: 0pt;text-align: right;"><a name="bookmark334">CHAPTER 7 </a><span class="s28">■ </span>PROMPT S <span class="s27">157</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">and Arithmetic” in Chapter 12.) This requires the <span class="s33">prompt_subst </span>option. Any expression substi- tuted by virtue of that option may contain text for use in prompt escapes (this is different from the way <span class="s33">psvar </span>works). Here, the arithmetic expression produces either a one or a zero, which is used as an argument to the <span class="s33">? </span>condition code. Hence the resulting expression expands to either the first or the second piece of text, depending on the status of the last command. The doubled backslash, <span class="s33">\\</span>, is necessary because backslashes are used for quoting when <span class="s33">prompt_subst </span>is turned on. (The rules for <span class="s33">prompt_subst </span>are a lot like those for double quotes.)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part166.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part168.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
