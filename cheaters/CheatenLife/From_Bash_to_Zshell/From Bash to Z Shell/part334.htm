<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Reverse Indexing</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part333.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part335.htm">Next &gt;</a></p><p class="s35" style="padding-left: 42pt;text-indent: 0pt;text-align: left;"><a name="bookmark599">Reverse Indexing</a></p><p style="padding-top: 5pt;padding-left: 42pt;text-indent: 0pt;line-height: 115%;text-align: left;"><span class="s33">zsh </span>provides a number of mechanisms for searching arrays or doing reverse lookups. Alongside this we need to introduce yet another type of flag—the <i>subscript flag</i>. These look much like vari- able expansion flags except that they appear at the beginning of the subscript—the expression enclosed in brackets used for indexing into the array. You may find that you need to take care about quoting inside subscripts. The manual goes into a lot of detail on how subscripts are parsed, but as a general rule remember that they are interpreted in much the same way as if they were in double quotes.</p><p style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: justify;">With associative arrays, subscript flags allow elements to be found by specifying a pattern to match keys or values against. Normally associative arrays are looked up by their key, so we’ll try the reverse and look them up by value. Naturally enough, the flag for reverse lookups uses the letter <span class="s33">r</span>.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 10pt;text-align: left;">Now we just need a suitable associative array to search. <span class="s33">zsh</span>’s completion system uses the</p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;line-height: 115%;text-align: left;">_comps <span class="p">associative array to map commands to the functions that handle completion for them. It is useful to be able to search in it, so we’ll use that. If you haven’t enabled the completion system, you’ll need to refer back to Chapter 10 for details on how to do so.</span></p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 10pt;text-align: left;">So to perform a reverse lookup for the <span class="s33">_mail </span>function, we can do the following:</p><p class="s33" style="padding-top: 8pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">% <b>echo ${(k)_comps[(r)_mail]}</b></p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">mailx</p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">This tells us that <span class="s33">_mail </span>handles completion for <span class="s33">mailx</span>. Note how we have used the <span class="s33">k </span>variable expansion flag so that it returns the key and not the value. The subscript flags actually imply whether keys or values are returned by default, but it is worth remembering that you can always choose which you want by adding <span class="s33">(k) </span>or <span class="s33">(v) </span>as appropriate.</p><p style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">The <span class="s33">r </span>subscript flag causes it to stop searching after it finds the first match—<span class="s33">mailx </span>is not the only command handled by <span class="s33">_mail</span>. To see all matches, we need to use <span class="s33">R </span>instead:</p><p class="s33" style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">% <b>echo ${(k)_comps[(R)_mail]}</b></p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">mailx  mail  Mail  nail  zmail  mush</p><p class="s29" style="padding-top: 3pt;padding-left: 314pt;text-indent: 0pt;text-align: left;"><a name="bookmark625">CHAPTER 12 </a><span class="s28">■ </span>VARIABLES <span class="s27">303</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">As was mentioned, these flags allow patterns to be used in searching. In the previous example we used a literal word—“_<span class="s33">mail</span>”— but we could have just as easily used a pattern. Without using any subscript flag, you have the effect of matching the key against a literal word. If, however, we want to match the key against a pattern we need the <span class="s33">i </span>subscript flag. It allows a pattern to be used but doesn’t do the lookup in reverse. For instance:</p><p class="s33" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">% <b>echo ${(v)_comps[(i)ps*]}</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">_ps</p><p style="padding-top: 8pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">This gives us the name of a completion function that handles a command whose name starts with <span class="s33">ps</span>. The result is perhaps not surprising since there is a <span class="s33">_ps </span>function that completes PostScript files. If we used the <span class="s33">I </span>flag instead, it would search for all possible matches. Change the flag and try it again. You should see that some functions are listed more than once. If you’re using <span class="s33">zsh </span>4.2, there is a <span class="s33">u </span>variable expansion flag that is useful in this situation. It removes duplicates from the result (it stands for <i>unique</i>). Let’s add that in and observe the result:</p><p class="s33" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">% <b>echo ${(vu)_comps[(I)ps*]}</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">_ps _psutils _pspdf _pids _pscp</p><p style="padding-top: 8pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">Subscript flags can also be used for reverse lookups on ordinary arrays. This can be quite useful interactively for referring to a particular array element—its index is generally going to be a meaningless number but you are likely to have some idea of the value. For instance, suppose we want to remove the Java directory from the path. We could look at the path and count the index, but it is common to have a rough idea of the name of directory. In the case of Java, we might know that the name of the directory contains “j2sdk”. In the following example, we use a subscript flag to search for this and remove the directory from the path:</p><p class="s33" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">% <b>echo $path</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">/home/opk/bin /usr/local/bin /bin /usr/bin /usr/local/j2sdk1.3.1/bin /usr/games</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">% <b>path[(r)*j2sdk*]=()</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">% <b>echo $path</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">/home/opk/bin /usr/local/bin /bin /usr/bin /usr/games</p><p style="padding-top: 8pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">The second command there may be more typing than <span class="s33">path[5]=() </span>but you would need to look it up in order to know that it was, for example, the fifth element of the array.</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">There are more subscript flags, providing a number of further facilities, but this should have given you a good idea of the most useful features and some of the ways in which you can use them.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part333.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part335.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
