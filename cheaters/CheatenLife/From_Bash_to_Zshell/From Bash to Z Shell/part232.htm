<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Matching Numeric Ranges</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part231.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part233.htm">Next &gt;</a></p><p class="s18" style="padding-left: 40pt;text-indent: 0pt;text-align: left;"><a name="bookmark422">Matching Numeric Ranges</a></p><p class="s33" style="padding-top: 5pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">zsh <span class="p">can also match ranges of numbers. The syntax in general looks like this:</span></p><p class="s33" style="padding-top: 8pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">zsh% <b>ls</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">data1 data2 data3 data10 data20 data30 zsh% <b>echo data&lt;1-9&gt;</b></p><p class="s33" style="padding-left: 40pt;text-indent: 0pt;line-height: 10pt;text-align: left;">data1 data2 data3</p><p style="padding-top: 8pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">Either of the numbers can be omitted. In the simplest case, <span class="s33">&lt;-&gt;</span>, the expression matches any set of digits. It even matches a number that’s usually too large for shell arithmetic, because the shell doesn’t need to do arithmetic; it just needs to match all the digits it encounters without turning them into an integer. If the first number in the range is omitted, it’s taken as 0, and if the second in the range is omitted, it’s effectively infinity. If both numbers are given, the first must be less than the second and the pattern matches any number in that inclusive range:</p><p class="s33" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">zsh% <b>ls</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">data1 data2 data3 data10 data20 data30 zsh% <b>echo data&lt;1-9&gt;</b></p><p class="s33" style="padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">data1 data2 data3 zsh% <b>echo data&lt;10-&gt; </b>data10 data20 data30</p><p style="padding-top: 7pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">The first example is different from the corresponding brace expansion, <span class="s33">data{1..9}</span>. That would generate all nine of the expressions, regardless of which files existed. Numbers with leading zeroes can be matched (for example, <span class="s33">0010 </span>is treated by the shell in the same way as <span class="s33">10</span>), but other forms of numbers, such as negative integers or numbers with a decimal point, aren’t handled.</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">Usually files are sorted as strings, even if they contain numbers. However, it’s possible to set the option <span class="s33">numeric_glob_sort </span>so that any ranges of digits within the pattern are sorted numerically:</p><p class="s33" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">zsh% <b>echo file&lt;-&gt;</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">file1  file10  file2  file20  file3  file30 zsh%  <b>setopt  numericglobsort</b></p><p class="s33" style="padding-left: 40pt;text-indent: 0pt;line-height: 10pt;text-align: left;">zsh% <b>echo file&lt;-&gt;</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">file1  file2  file3  file10  file20  file30</p><p style="padding-top: 8pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: justify;">You may think this looks much more sensible. Note that this occurs any time the files are matched by the same pattern; it doesn’t matter whether you use the range syntax. This means <span class="s33">file* </span>would have worked just as well in that example.</p><p class="s29" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark464"><span class="s27">216 </span></a>CHAPTER 9 <span class="s28">■ </span>PATTER N MATCHING </p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part231.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part233.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
