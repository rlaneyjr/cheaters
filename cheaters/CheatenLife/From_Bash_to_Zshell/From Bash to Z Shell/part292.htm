<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Resuming Stopped and Background Jobs</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part291.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part293.htm">Next &gt;</a></p><p class="s35" style="padding-left: 42pt;text-indent: 0pt;text-align: left;"><a name="bookmark543">Resuming Stopped and Background Jobs</a></p><p style="padding-top: 5pt;padding-left: 42pt;text-indent: 0pt;line-height: 115%;text-align: left;">We explained that when you press Ctrl-z it stops the currently running job, returning you to the shell prompt. Then when you type <span class="s33">bg %</span><i>num</i>, where <i>num </i>is the number reported by the <span class="s33">jobs </span>command, the job resumes in the background.</p><p style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">In either of the two states—stopped or running in the background—you can use <span class="s33">fg </span>to bring the command into the foreground again. At that point, the command behaves just as if you’d never stopped it or put it in the background. When a job is running in the foreground, it has control of the terminal. Key combinations such as Ctrl-z or Ctrl-c always affect the fore- ground job.</p><p style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">This behavior is commonly used in conjunction with text editors. Many Unix users have a text editor running in the background all the time. When they want to use it, they run <span class="s33">fg </span>to bring it back to the foreground. When they want to execute some other command, they press Ctrl-z to go back to the shell prompt. This isn’t helpful if your text editor has a separate window on your display, however—there’s no point in stopping it when you switch to the shell window.</p><p style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">It’s a little more complicated if the command is actually running inside the shell. For example, job control with shell functions can be a problem (see Chapter 13). <span class="s33">zsh </span>tries to handle this by treating the function as if it were a separate command, so you can stop a function and put it into the background. However, there’s no way of bringing it back inside the shell that started it. You can use <span class="s33">fg </span>to bring it into the foreground, but it continues to run as a separate process. It’s essentially a <i>subshell</i>, which we describe in the section “Grouping and Subshells” in Chapter 13. <span class="s33">bash </span>doesn’t have that feature at the moment.</p><p style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">For people who frequently stop and restart foreground jobs, the shells provide a couple of shortcuts for doing this.</p><p style="padding-top: 6pt;padding-left: 67pt;text-indent: -10pt;line-height: 115%;text-align: left;">• You can use <span class="s33">fg </span>on its own to bring to the foreground the command that was most recently stopped or put in the background. The <span class="s33">jobs </span>command shows the job in question with a</p><p class="s33" style="padding-left: 67pt;text-indent: 0pt;line-height: 10pt;text-align: left;">+ <span class="p">after the job number.</span></p><p style="padding-top: 8pt;padding-left: 67pt;text-indent: -10pt;line-height: 115%;text-align: justify;">• Instead of <span class="s33">fg %</span><i>num</i>, you can simply type <span class="s33">%</span><i>num </i>on its own. The shell takes special account of any command beginning with <span class="s33">%</span>, and looks to see if it corresponds to a job to bring into the foreground.</p><p style="padding-top: 7pt;padding-left: 67pt;text-indent: -10pt;line-height: 115%;text-align: left;">• If your jobs all start with different command names, you can use the name of the command after the <span class="s33">% </span>to resume the job. For example, use <span class="s33">%vi </span>if the job is running the editor <span class="s33">vi</span>. (You don’t need any of the arguments to the command.) That means you don’t need to find out the job number.</p><p style="padding-top: 7pt;padding-left: 67pt;text-indent: -10pt;line-height: 115%;text-align: left;">• <span class="s33">bash </span>and <span class="s33">zsh </span>both support an option, <span class="s33">auto_resume</span>, that allows you to bring a job to the foreground by typing its name without % in front. In <span class="s33">bash</span>, it’s actually a shell variable that can be set to <span class="s33">exact </span>or <span class="s33">substring</span>. In <span class="s33">zsh</span>, it’s an ordinary shell option. Setting <span class="s33">auto_resume=substring </span>in <span class="s33">bash </span>means you don’t even need to type the full name of the job, just part of it. (That can lead to some odd effects if you’re not careful, though. Short command names can easily match a job by accident.) Let’s consider an example:</p><p class="s29" style="padding-top: 3pt;padding-left: 269pt;text-indent: 0pt;text-align: left;"><a name="bookmark564">CHAP TER 11 </a><span class="s28">■ </span>JO BS AND PROCESSES <span class="s27">263</span></p><p class="s33" style="padding-top: 24pt;padding-left: 66pt;text-indent: 0pt;line-height: 115%;text-align: left;">zsh% <b>stty susp &#39;^Z&#39; </b>zsh% <b>setopt auto_resume </b>zsh% <b>vi</b></p><p class="s46" style="padding-left: 66pt;text-indent: 0pt;line-height: 10pt;text-align: left;">&lt;ctrl-z&gt;</p><p class="s33" style="padding-top: 1pt;padding-left: 66pt;text-indent: 0pt;text-align: left;">zsh: 1535 suspended vi</p><p class="s33" style="padding-top: 1pt;padding-left: 66pt;text-indent: 0pt;text-align: left;">zsh% <b>vi</b></p><p class="s33" style="padding-top: 1pt;padding-left: 66pt;text-indent: 0pt;text-align: left;">[1] + continued vi</p><p style="padding-top: 8pt;padding-left: 66pt;text-indent: 0pt;line-height: 115%;text-align: left;">You may not see all those lines if <span class="s33">vi </span>clears the terminal when it starts and doesn’t restore it when you suspend it. The <span class="s33">stty </span>command ensures that Ctrl-z is the suspend key; refer to the section “Other Tips on Terminals” in Chapter 4 for an explanation of that. In <span class="s33">bash</span>, you can only auto-resume a job if it’s stopped, not if it’s running in the background. (The <span class="s33">jobs </span>command will tell you if you’re not sure which is the case.) In <span class="s33">zsh</span>, you can auto- resume jobs that are running in the background, too.</p><p style="padding-top: 7pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">Most job control commands don’t work in scripts or in any noninteractive shell. In partic- ular, the <span class="s33">%</span><i>num </i>syntax isn’t available. That’s because job control is based around a <i>controlling terminal</i>. The foreground job is the one that is attached to the terminal. That doesn’t apply in a script. You can still start background jobs by putting <span class="s33">&amp; </span>at the end, though. You just can’t ever bring them to the foreground after starting them.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="toc">&nbsp;</p><div class="toc"><a class="toc0" href="part293.htm">Use of the Terminal by Background Jobs</a></div><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part291.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part293.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
