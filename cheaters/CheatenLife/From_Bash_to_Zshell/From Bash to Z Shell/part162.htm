<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Showing Information About What the Shell Is Executing</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part161.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part163.htm">Next &gt;</a></p><p class="s18" style="padding-left: 40pt;text-indent: 0pt;text-align: left;"><a name="bookmark303">Showing Information About What the Shell Is Executing</a></p><p style="padding-top: 5pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">You’ve already learned about the <span class="s33">%_</span>reference for inserting the name of the activity or activities the shell is performing. This is the magic in <span class="s33">PS2 </span>that makes the shell display what syntactical structure it’s waiting to complete. The default <span class="s33">$PS2 </span>is <span class="s33">%_&gt;</span>. Remember that <span class="s33">PS2 </span>is the continuation</p><p class="s29" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark330"><span class="s27">152 </span></a>CHAPTER 7 <span class="s28">■ </span>PROMPTS </p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 42pt;text-indent: 0pt;line-height: 115%;text-align: left;">prompt; the shell outputs this when the first piece of output wasn’t a complete command, so that it is waiting for more.</p><p class="s33" style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">%_ <span class="p">is also useful in </span>PS4<span class="p">. This prompt is printed out when the shell is executing a script or function and the option </span>xtrace <span class="p">is turned on. We’ll see examples of this option in action in the section “Debugging Scripts” in Chapter 13. In this case, </span>%_ <span class="p">will output the names of shell constructs that are being executed, such as </span>if <span class="p">commands and </span>while <span class="p">or </span>for <span class="p">loops. However, a construct may be just about any complex piece of shell programming: not just </span>if <span class="p">blocks and loops, but also quotes and shell functions. </span>%_ <span class="p">is not present in </span>PS4 <span class="p">by default; the default value for </span>PS4 <span class="p">is</span></p><p class="s33" style="padding-left: 41pt;text-indent: 0pt;line-height: 115%;text-align: left;">+%N:%i&gt;<span class="p">. The </span>%N <span class="p">gives you the name of the function or script being executed. It works in normal prompts, but you will usually just get “zsh”, which isn’t very interesting. The </span>%i <span class="p">refers to the line in the function or script as it was read in. </span>%i <span class="p">is also effective in normal prompts, but note that the number it outputs increases when every prompt is output, including continuations of unfinished lines, and it starts at 1 when the shell starts. It’s not the same as the history number, which you can get with </span>%!<span class="p">.</span></p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 10pt;text-align: left;">You will probably find it useful to change <span class="s33">PS4 </span>to the following, for example:</p><p class="s33" style="padding-top: 8pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">PS4=&#39;+%N:%i:%_&gt;&#39;</p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: justify;">When the option <span class="s33">xtrace </span>is turned on (with <span class="s33">setopt xtrace</span>) inside a script or function, the value of <span class="s33">PS4 </span>is expanded. The value we have given it shows the name of that script or function, the line that is currently being executed, and a list of the types of any blocks of command that are currently being executed. For example:</p><p class="s33" style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">header:30:case&gt;  print  -n  -P  -  &#39;\e]2;%m:    %~\a&#39;</p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">This comes from a function called <span class="s33">header</span>, which puts the name of the computer and the current directory into an <span class="s33">xterm </span>title bar. The line number is 30, and the shell is in the middle of a <span class="s33">case </span>statement, a type of block that allows you to choose code to execute based on patterns (we’ll meet the <span class="s33">case </span>statement properly in the section “Case Statement” in Chapter 13). After the <span class="s33">&gt;</span>, the line being executed appears.</p><p style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">Like the directory escapes, <span class="s33">%_ </span>can take a number after the <span class="s33">%</span>, which here indicates the maximum number of constructs you want to know about. The number restricts the output to the most recent components.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part161.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part163.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
