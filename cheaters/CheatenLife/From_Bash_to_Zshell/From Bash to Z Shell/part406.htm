<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Exclusion Lists</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part405.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part407.htm">Next &gt;</a></p><p class="s18" style="padding-left: 40pt;text-indent: 0pt;text-align: left;"><a name="bookmark758">Exclusion Lists</a></p><p style="padding-top: 5pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">Completion is more effective when it only generates pertinent matches. So <span class="s33">_arguments </span>doesn’t complete options that have already been specified on the command line. Usually, it doesn’t make sense to provide the same option twice to a command. Sometimes, however, an option can be used more than once. An example of this is the <span class="s33">-xrm </span>option, which NEdit, as well as many other X programs, take. It allows an X resource value to be set. Such options can be specified by preceding the option specification with an asterisk (<span class="s33">*</span>). So the specification for the <span class="s33">-xrm </span>option is</p><p class="s33" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">&#39;*-xrm[specify  X  resource  value]:resource:_x_resource&#39;</p><p style="padding-top: 8pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">Furthermore, in some situations certain options are mutually exclusive: they can’t be used together. For example, NEdit has four options that select how line wrapping should work:</p><p class="s33" style="padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">-wrap<span class="p">, </span>-nowrap<span class="p">, </span>-autowrap<span class="p">, and </span>-noautowrap<span class="p">. It only makes sense to use one of these options. Exclusion lists can be used to specify those options that contradict or are incompatible with each other. They are listed in parentheses at the beginning of an option specification. For example, for </span>-wrap <span class="p">we would use</span></p><p class="s33" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">&#39;(-nowrap  -autowrap  -noautowrap)-wrap[use  continuous  wrap  mode]&#39;</p><p class="s29" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark799"><span class="s27">388 </span></a>C HA P T E R 15 <span class="s28">■ </span>W R I T I NG COMP LET I ON F UNCTI ON S</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 42pt;text-indent: 18pt;line-height: 115%;text-align: left;">What this actually specifies is that the listed options cannot follow <span class="s33">-wrap </span>on the command line so it is also necessary to specify <span class="s33">-wrap </span>in the exclusion list of the other three options. Occa- sionally, you may come across a command where the order in which options are specified is significant and so you won’t want to reciprocate the exclusions in that manner.</p><p style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">If you have an option that can only be used alone, you can specify “<span class="s33">-</span>” in the exclusion list for it to exclude all other options. For example, the specification for NEdit’s <span class="s33">-version </span>option is</p><p class="s33" style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">&#39;(-  *)-version[display  version  information]&#39;</p><p style="padding-top: 8pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">The asterisk in the exclusion list here also prevents files from being completed after <span class="s33">-version</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 42pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="507" height="1" alt="image" src="Image_301.png"/></span></p><p class="s21" style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;line-height: 117%;text-align: left;">■<span class="s23">Tip </span><span class="s19">If you want to see the full NEdit function, then you can execute less  $^fpath/_nedit(N). The (N) is a glob qualifier and has the effect of turning on filename generation to remove any expansions that don’t resolve to an existing file. If you have the rc_expand_param option enabled in your setup (see the section “Array Expansions” in Chapter 12), you can omit the caret (^) from the expansion. The real completion function is further complicated by the fact that it additionally handles NEdit’s client program.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 42pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="504" height="1" alt="image" src="Image_302.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">That’s about all there is to our completion for NEdit. However, there are a few more useful things you can do with <span class="s33">_arguments</span>. We mentioned at the beginning of the section that some commands allow single-letter options to be clumped together. If you pass the <span class="s33">-s </span>option to</p><p class="s33" style="padding-left: 41pt;text-indent: 0pt;line-height: 115%;text-align: left;">_arguments <span class="p">it will allow for that. Some commands such as </span>grep <span class="p">use the argument “</span>--<span class="p">” to specify the end of options and that no subsequent arguments should be treated as an option. Pass </span>-S <span class="p">to </span>_arguments <span class="p">and it will handle this. Other commands only allow options to precede their normal arguments. This you can specify with </span>-A  &quot;-*&quot;<span class="p">. It needs to know what constitutes an option argument, hence the pattern.</span></p><p style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">The <span class="s33">-s</span>, <span class="s33">-S</span>, and <span class="s33">-A </span>options should come first before any specifications of options to be completed. The same applies to other options to <span class="s33">_arguments </span>such as the <span class="s33">-C </span>option, which we saw earlier. If you want to specify one of these as an option to be completed, you have a few choices: either rearrange your option specifications so that they appear last, give them a description, or add a single argument containing a colon to mark the end of options to</p><p class="s33" style="padding-left: 41pt;text-indent: 0pt;line-height: 10pt;text-align: left;">_arguments<span class="p">.</span></p><p style="padding-top: 1pt;padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">Another thing that <span class="s33">_arguments </span>can do is automatically complete long options for commands that support the <span class="s33">--help </span>option. To make use of this, “<span class="s33">--</span>” should be given as an argument.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 10pt;text-align: left;">You’ll have to read the manual for details, but there are yet more things <span class="s33">_arguments </span>can do.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part405.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part407.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
