<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Step 3: Bind the Widget to a Key</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part376.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part378.htm">Next &gt;</a></p><p class="s35" style="padding-left: 40pt;text-indent: 0pt;text-align: left;"><a name="bookmark708">Step 3: Bind the Widget to a Key</a></p><p style="padding-top: 5pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">Now you just use <span class="s33">bindkey </span>as you would with a built-in widget, as we explained in the section “Configuration and Key Binding: readline and zle” in Chapter 4. If you don’t, you will have to execute the widget by pressing Esc x and then typing the full name of the widget. That’s fine for occasional use, but tedious if you’re intending to use the new command a lot. Again, you can add the appropriate command to <span class="s33">.zshrc</span>:</p><p class="s33" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">bindkey &#39;^xb&#39; backward-ten-characters</p><p style="padding-top: 8pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">If you’ve followed everything through, the next time you start the shell you can press Ctrl-x and then press b to move the cursor 10 characters back along the line.</p><p style="padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">The facilities normally available inside shell functions don’t allow you to control the line editor. For that, an additional mechanism is required. <span class="s33">zsh </span>actually provides two ways of controlling line editing: one by means of commands, and one by means of shell variables. We’ll introduce both in this section.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part376.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part378.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
