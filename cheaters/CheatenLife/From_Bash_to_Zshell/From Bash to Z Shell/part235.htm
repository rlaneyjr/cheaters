<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Pattern Exceptions</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part234.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part236.htm">Next &gt;</a></p><p class="s18" style="padding-left: 40pt;text-indent: 0pt;text-align: left;"><a name="bookmark425">Pattern Exceptions</a></p><p style="padding-top: 5pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: justify;">Sometimes you find yourself thinking along the lines, “I need a file that begins with <span class="s33">m</span>, as long as it doesn’t end in <span class="s33">.txt</span>”. Exceptions allow you to turn that thought directly into a pattern. In <span class="s33">zsh </span>you can specify exceptions to patterns. This means that you can give a shell a pattern that it must match, and also a pattern that it must not match. The syntax is the pattern that must be matched, followed by a tilde character, <span class="s33">~</span>, followed by the pattern that must not be matched.</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">In the first line of the following example, we show all files beginning with <span class="s33">m</span>. In the second line, we show files that begin with <span class="s33">m </span>but don’t end with <span class="s33">.txt</span>:</p><p class="s33" style="padding-top: 6pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">zsh% <b>echo m*</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">msg  msg.out  msg.txt zsh%  <b>echo  m*~*.txt </b>msg  msg.out</p><p style="padding-top: 7pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">The <span class="s33">~ </span>operator works a little differently from the <span class="s33">^ </span>operator we met earlier. You can see that by rewriting the last example using <span class="s33">^</span>. In the following example, <span class="s33">m </span>matches the start of the word. Then we write <span class="s33">^*.txt </span>to specify that the rest of the word should be anything except a string ending with <span class="s33">.txt</span>:</p><p class="s33" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">zsh% <b>echo m^*.txt</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">msg msg.out</p><p style="padding-top: 8pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">Compare this with the pattern <span class="s33">m*~*.txt</span>, where the parts before and after the tilde both referred to the whole word. We think that the example with <span class="s33">~ </span>is a little clearer.</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">Note that everything to the right of the <span class="s33">~</span>, including the slashes, is treated as one pattern. Therefore, a <span class="s33">* </span>in the portion after the <span class="s33">~ </span>can match across multiple directories. So, for example:</p><p class="s33" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">zsh% <b>echo **/*.c</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">config.c Src/Lib/Utils/prog.c zsh% <b>echo **/*.c~Src/* </b>config.c</p><p style="padding-top: 7pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: justify;">The shell looked for all files ending in <span class="s33">.c </span>in all subdirectories. When it finished generating the list of files, it checked each filename against the pattern <span class="s33">Src/*</span>, and if it matched, it omitted those entries from the result.</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">You can eliminate any directory in the middle with a particular name using an exclusion pattern. In the following example, we’re looking (searching recursively) for a file in a subdirec- tory, and the file’s name must begin with an uppercase letter. We specify that no directory called <span class="s33">CVS </span>can occur in the middle of the path to that file:</p><p class="s33" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">grep **/[A-Z]*~*/CVS/*</p><p style="padding-top: 8pt;padding-left: 40pt;text-indent: 20pt;line-height: 115%;text-align: left;">This way of excluding directories doesn’t work if the directory is at the start or end of the pattern, because of the slashes around the directory name (<span class="s33">/CVS/)</span>. The slashes were necessary to stop other names that included the string <span class="s33">CVS </span>from matching. We’ll meet a more powerful way of eliminating particular directories from a match in the section “Eliminating a Directory from a Recursive Pattern Match,” later in this chapter.</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">Some text editors produce backup files ending in a <span class="s33">~</span>. These don’t cause any problem—a tilde right at the end of a word isn’t considered special, because “excluding nothing” is useless. However, be careful when the backup files are numbered; Emacs, for example, generates names</p><p class="s29" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><span class="s27">218 </span>C HA P T E R 9 <span class="s28">■ </span>P A T T ER N M A T C H I N G</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 115%;text-align: justify;">such as <span class="s33">prompt.c.~1.11.~ </span>(a backup of version <span class="s33">1.11 </span>of the file <span class="s33">prompt.c</span>). You would need to quote the tilde in the middle when referring to the file. If you use completion to get the file- name (typically by typing <span class="s33">prompt.c.&lt;tab&gt;</span>), this will be done for you; in fact, the completion system will quote the tilde at the end as well, which is unnecessary but harmless.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part234.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part236.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
