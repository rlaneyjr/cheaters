<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Background Processing</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part60.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part62.htm">Next &gt;</a></p><p class="s35" style="padding-left: 40pt;text-indent: 0pt;text-align: left;"><a name="bookmark121">Background Processing</a></p><p style="padding-top: 5pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">The shell has a handy feature called <i>background processing </i>for programs that you don’t need to interact with in the terminal. Background processes are actually a feature of Unix, not just of shells. The shells just make them easy to use.</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">If you want to start a program and get another shell prompt right away, put the program into the background. The easiest way to do that is by adding an ampersand (<span class="s33">&amp;</span>) to the end of the command line. The shell will start the process, output a job number (explained later) and the PID, then give you another prompt right away, like this:</p><p class="s33" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">%  <b>mozilla  &amp;</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">[1] 9989</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">%</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">Now you have two processes running simultaneously: the shell and Mozilla. If you also want to do some editing with the <span class="s33">xemacs </span>editor (which opens its own window), you could also start it in the background:</p><p class="s33" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">% <b>xemacs &amp;</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">[2] 10023</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">%</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 58pt;text-indent: 0pt;text-align: left;">To view a list of the background jobs you’ve run from this shell, use the shell’s built-in</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">jobs <span class="p">command:</span></p><p class="s33" style="padding-top: 8pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">%  <b>jobs</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">[1]     Running                               mozilla</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">[2] Running xemacs</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">%</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">Background processing is great for a program that makes its own window, like Mozilla or <span class="s33">xemacs</span>, because the shell can do something else for you while it waits for the process to finish. If the program writes any output to the terminal (to its standard output or standard error, as explained in the section “Writing Output to Files: Redirection” in Chapter 2), that output still typically goes to the terminal, so you’ll see it there. (Background output can make a confusing jumble on the screen if you’re doing something else in the foreground at the same time. The</p><p class="s29" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark132"><span class="s27">58 </span></a>C HA P T E R 3 <span class="s28">■ </span>M OR E S H EL L F E A T U R E S</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 42pt;text-indent: 0pt;line-height: 115%;text-align: left;">Unix command <span class="s33">stty  tostop </span>can prevent this jumble, but it’s an advanced command that you probably shouldn’t use unless you understand the shell’s job control features. The section “Resuming Stopped and Background Jobs” in Chapter 11 has more information.)</p><p style="padding-left: 42pt;text-indent: 20pt;line-height: 115%;text-align: left;">It doesn’t make sense to run a program in the background if it needs to read from the terminal (or terminal window) where it’s running. Only one process can read from the keyboard (or whatever the standard input is) at a time.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part60.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part62.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
