<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Using a Different Completer</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part427.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part429.htm">Next &gt;</a></p><p class="s35" style="padding-left: 42pt;text-indent: 0pt;text-align: left;"><a name="bookmark780">Using a Different Completer</a></p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 115%;text-align: left;">It is possible to have the functionality of a completer available on another key besides Tab. Common candidates for this are <span class="s33">_correct</span>, <span class="s33">_match</span>, and <span class="s33">_expand</span>. This is especially useful with any completer that isn’t listed in your default <span class="s33">completer </span>style and, therefore, isn’t already invoked by Tab. There is also an <span class="s33">_all_matches </span>completer that is useful to have bound to a key. It inserts all possible matches generated by another completer.</p><p style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">The <span class="s33">compinit </span>function binds your Tab key to a function named <span class="s33">_main_complete</span>, which sets up all the fundamental parts of compsys. Using a function named <span class="s33">_generic</span>, you can have this set up from your own widgets. <span class="s33">_generic </span>puts the name of your widget at the beginning of the zstyle context and calls <span class="s33">_main_complete</span>.</p><p style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">As an example, we’ll take the <span class="s33">_match </span>completer. First we’ll create our widget, associate it with <span class="s33">_generic, </span>and bind a key to it:</p><p class="s33" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 115%;text-align: left;">zle -C match-word complete-word _generic bindkey &#39;\e*&#39; match-word</p><p style="padding-top: 7pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">Now we need to specify which completer to use. The name of our widget, in this case</p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">match-word<span class="p">, gets added to the current context by </span>_generic <span class="p">so we can restrict the style by that:</span></p><p class="s33" style="padding-top: 8pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">zstyle  &#39;:completion:match-word::::&#39;  completer  _match</p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">That, in essence, is all there is to it. Remember that you aren’t limited to just one completer here. You might want to list <span class="s33">_all_matches </span>before <span class="s33">_match </span>and perhaps <span class="s33">_ignored </span>after it, for instance.</p><p style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: justify;">There may be other styles you may want to use to fine-tune the behavior of this widget. For instance, the <span class="s33">_match </span>completer looks up the <span class="s33">match-original </span>style to control whether it should place a <span class="s33">* </span>at the cursor position when generating matches.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part427.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part429.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
