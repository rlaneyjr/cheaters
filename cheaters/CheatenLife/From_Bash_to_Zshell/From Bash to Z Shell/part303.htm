<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>The =(…) Substitution</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part302.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part304.htm">Next &gt;</a></p><p class="s18" style="padding-left: 42pt;text-indent: 0pt;text-align: left;"><a name="bookmark554">The =(…) Substitution</a></p><p class="s33" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 115%;text-align: left;"><span class="p">The </span>&lt;(<span class="s32">commands</span>) <span class="p">form has its limitations. It is implemented to be as efficient as possible, with various consequences:</span></p><p style="padding-top: 7pt;padding-left: 67pt;text-indent: -10pt;line-height: 115%;text-align: left;">• The shell doesn’t wait for the <i>commands </i>to finish before running the main command line. The command reading from the file needs to wait until data is ready. This usually works fine: in Unix jargon the read operation <i>blocks </i>until the data is ready or the program generating it exits.</p><p style="padding-top: 7pt;padding-left: 67pt;text-indent: -10pt;line-height: 115%;text-align: justify;">• The file whose name is substituted on the command line is a special file: either a named pipe, or a file of the form <span class="s33">/dev/fd/</span><i>num</i>, which we introduced in the section “File Descriptors as Files” in Chapter 8.</p><p style="padding-top: 7pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">We can see the special file being substituted by using <span class="s33">echo </span>as in the following example:</p><p class="s33" style="padding-top: 8pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">% echo &lt;( true )</p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">/dev/fd/12</p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: justify;">The shell opens a new file descriptor for the output of the commands in the parentheses. In this case, it has used <span class="s33">12</span>. Sometimes, however, you need a regular file, not a special file. That’s because the special files are streams of data, which when read are forgotten. Some commands need to be able to go backwards and read earlier parts of the file. (This is called a <i>seek </i>operation.)</p><p class="s33" style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: justify;"><span class="p">To get around this problem, </span>zsh <span class="p">provides the substitution </span>=(<span class="s32">commands</span>)<span class="p">. You use this in the same way as </span>&lt;(<span class="s32">commands</span>)<span class="p">; however, the shell creates a regular file to hold the output of </span><span class="s32">commands</span><span class="p">. Usually this is in the temporary directory </span>/tmp<span class="p">, but with the permissions set so that no one else can read it. It is removed automatically by the shell as soon as the main command finishes.</span></p><p style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">A common use for this substitution is to view the output of a command using a text editor. This can allow you to make some changes to a command’s output from your favorite text editor before you cut and paste it to another program that has limited editing capabilities. Other common features of text editors such as color syntax highlighting can also be a reason for using</p><p class="s29" style="padding-top: 3pt;padding-left: 269pt;text-indent: 0pt;text-align: left;"><a name="bookmark571">CHAP TER 11 </a><span class="s28">■ </span>JO BS AND PROCESSES <span class="s27">271</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">them instead of a pager. For example, to view the output of the <span class="s33">indent </span>command (which formats source code), you might do the following:</p><p class="s33" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">emacs =(indent -st &lt; <span class="s32">file</span>)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part302.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part304.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
