<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Prompts for Spell Checking</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part169.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part171.htm">Next &gt;</a></p><p class="s35" style="padding-left: 42pt;text-indent: 0pt;text-align: left;"><a name="bookmark311">Prompts for Spell Checking</a></p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 115%;text-align: left;">We haven’t yet mentioned <span class="s33">zsh</span>’s ability to perform spell checking. The shell can correct the first word of the name of a command, if you misspell it, and it can correct words in the name of a file. This feature is taken from <span class="s33">tcsh</span>. It’s fairly simple; there’s a much more sophisticated way of performing spelling correction that is available as part of the function-based completion system, which we’ll meet in the section “Approximate Completion” in Chapter 10.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 10pt;text-align: left;">You can activate spell checking in various ways:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 72pt;text-indent: -12pt;line-height: 114%;text-align: left;"><span class="s13">1.  </span>By pressing Esc-s, which tells the line editor to correct the word. However, you are probably better off relying on the completion system. If you have it loaded, you can use Ctrl-x-c to correct the word. This is usually bound to the editor function <span class="s33">_correct_word</span>.</p><p style="padding-top: 6pt;padding-left: 72pt;text-indent: -12pt;line-height: 115%;text-align: left;"><span class="s13">2.  </span>By setting the option <span class="s33">correct</span>. Then when you press Return the shell looks at the command word, and if it doesn’t recognize it as a command it tries to find a correction, which it then offers to you.</p><p class="s29" style="padding-top: 3pt;padding-left: 39pt;text-indent: 0pt;text-align: right;"><a name="bookmark336">CHAPTER 7 </a><span class="s28">■ </span>PROMPT S <span class="s27">159</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 70pt;text-indent: -12pt;line-height: 114%;text-align: left;"><span class="s13">3. </span>By setting the option <span class="s33">correct_all</span>. This is like <span class="s33">correct</span>, but it checks arguments after the command. However, it simply assumes they are files, and tries to correct the words to filenames. Often this isn’t what you want.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">In the second and third cases, the shell prompts you for what to do using the variable <span class="s33">SPROMPT</span>, which is processed just as we’ve discussed earlier. However, there are two additional prompt escapes: <span class="s33">%R </span>turns into the original string, the one the shell wants to correct, and <span class="s33">%r </span>turns into what it wants to correct it to.</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">The default value is <span class="s33">zsh:  correct  &#39;%R&#39;  to  &#39;%r&#39;  [nyae]?</span>. The letters in square brackets indicate the letters you can type. Your options are</p><p class="s46" style="padding-top: 7pt;padding-left: 58pt;text-indent: 0pt;text-align: left;">n<span class="s36">: </span><span class="p">Reject the correction and leave the word alone.</span></p><p class="s46" style="padding-top: 8pt;padding-left: 58pt;text-indent: 0pt;text-align: left;">y<span class="s36">: </span><span class="p">Accept the correction.</span></p><p class="s46" style="padding-top: 8pt;padding-left: 58pt;text-indent: 0pt;line-height: 115%;text-align: left;">a<span class="s36">: </span><span class="p">Abort the entire operation and start from scratch—this still causes the line to be added to the command history.</span></p><p class="s46" style="padding-top: 7pt;padding-left: 58pt;text-indent: 0pt;text-align: left;">e<span class="s36">: </span><span class="p">Return to edit the line again.</span></p><p style="padding-top: 8pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">The last one is a good choice if you did make a spelling mistake but the correction offered isn’t the right one.</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">The built-in spelling correction system’s corrections are based on the layout of the keyboard; it will try to find nearby letters to correct the spelling. If your keyboard is not the standard English-language “qwerty” keyboard, this is less useful, though there is a shell option <span class="s33">dvorak </span>for users of the Dvorak layout.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part169.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part171.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
