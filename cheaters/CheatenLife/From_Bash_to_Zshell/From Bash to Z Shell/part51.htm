<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>More About for Loops</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part50.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part52.htm">Next &gt;</a></p><h4 style="padding-left: 40pt;text-indent: 0pt;text-align: left;"><a name="bookmark85">More About for Loops</a></h4><p style="padding-top: 6pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">Let’s extend the example from the previous section by saving the lines of output into a file. In a later section, we’ll process this saved output.</p><p class="s29" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark106"><span class="s27">42 </span></a>CHAPTER 2 <span class="s28">■ </span>USING SHELL FEATURES TOGETHER </p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 42pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="504" height="1" alt="image" src="Image_074.png"/></span></p><p class="s21" style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;line-height: 117%;text-align: left;">■<span class="s23">Note </span><span class="s19">Programmers tend to use Bourne shells instead of tcsh or csh. One reason is the technique we’ll demonstrate in this section: redirecting the input or output of all commands in a loop. So we’ll show only Bourne shell syntax for the remainder of this chapter. You can start a Bourne shell temporarily, for the rest of this chapter, as we start to build a shell program. Simply type the shell’s name (like sh) at a prompt. At the end of the chapter, type exit to end the Bourne shell and return to your original shell.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 42pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="504" height="1" alt="image" src="Image_075.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 42pt;text-indent: 18pt;line-height: 115%;text-align: left;">Just as you can redirect the standard output of a command to a file, you can redirect the standard output of a <span class="s33">for </span>loop to a file. Simply add the redirection after the word <span class="s33">done</span>. This collects the standard output of every command, from every pass through the loop:</p><p class="s33" style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">$ <b>for dir in `echo &quot;$PATH&quot; | tr &#39;:&#39; &#39; &#39;`</b></p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">&gt; <b>do</b></p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">&gt; <b>echo &quot;I got the name $dir&quot;</b></p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">&gt; <b>done &gt; testfile</b></p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">$ <b>cat testfile</b></p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">I got the name /bin</p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">I got the name /usr/bin</p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;line-height: 115%;text-align: left;">I got the name /usr/local/bin I got the name /proj/bin</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">Now let’s do something more useful. We’ll replace <span class="s33">echo </span>with <span class="s33">ls</span>—which will list the directories’ contents, one by one, instead of just outputting the directory names.</p><p style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">When <span class="s33">ls </span>lists a single directory, it doesn’t output the directory name or a blank line before it lists what’s in the directory. So our <span class="s33">testfile </span>should get a list of all program names in all directories in the <span class="s33">PATH</span>, without needing the <span class="s33">grep </span>filters we used before.</p><p style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">(If you don’t want to retype the whole loop, check the section “Command-Line Editing” in Chapter 1. Your shell may support editing entire loops at once. If it doesn’t, you can put the loop in a file, as we’ll do soon, and edit that file.) Here’s the loop and its output; Figure 2-4 has a diagram showing the series of <span class="s33">ls </span>outputs being collected in <span class="s33">testfile</span>:</p><p class="s33" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">$ <b>for dir in `echo &quot;$PATH&quot; | tr &#39;:&#39; &#39; &#39;`</b></p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">&gt; <b>do</b></p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">&gt; <b>ls $dir</b></p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">&gt; <b>done &gt; testfile</b></p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">$  <b>less  testfile</b></p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;line-height: 115%;text-align: left;">arch ash awk</p><p class="s33" style="padding-left: 41pt;text-indent: 4pt;line-height: 115%;text-align: left;">... X11 [</p><p class="s33" style="padding-left: 46pt;text-indent: 0pt;line-height: 10pt;text-align: left;">...</p><p class="s29" style="padding-top: 3pt;padding-left: 224pt;text-indent: 0pt;text-align: left;"><a name="bookmark107">CHAPTER 2 </a><span class="s28">■ </span>USING SHELL FEATURES TOGETHER <span class="s27">43</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 42pt;text-indent: 0pt;text-align: left;"><span><img width="244" height="321" alt="image" src="Image_076.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s13" style="padding-left: 40pt;text-indent: 0pt;text-align: left;">Figure 2-4. <span class="s32">Loop running multiple ls processes, their outputs redirected to a file</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: justify;">We’re almost there. We need to sort all of the <span class="s33">ls </span>outputs. Where does the <span class="s33">sort </span>command fit? It needs to read all of the program names that <span class="s33">ls </span>writes. So we’ll pipe the output of the <span class="s33">for </span>loop to <span class="s33">sort</span>, then redirect the <span class="s33">sort </span>output to the <span class="s33">proglist </span>file:</p><p class="s33" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">$ <b>for dir in `echo &quot;$PATH&quot; | tr &#39;:&#39; &#39; &#39;`</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">&gt; <b>do</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">&gt; <b>ls $dir</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">&gt; <b>done | sort &gt; proglist</b></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 58pt;text-indent: 0pt;text-align: left;">(Read the <span class="s33">proglist </span>file if you want to check it.)</p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">We’ve got a pretty good system here, but it could be better. The directories listed in <span class="s33">PATH </span>don’t necessarily have only programs in them. They may also have subdirectories and text files. (For instance, if you look back at our <span class="s33">/usr/bin </span>listings, you’ll see <i>X11</i>. It’s a subdirectory, not a program.) That’s not a big problem, but let’s look at a way to solve it.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part50.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part52.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
