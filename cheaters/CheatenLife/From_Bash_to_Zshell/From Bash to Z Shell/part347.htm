<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Functions and Variable Scope</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part346.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part348.htm">Next &gt;</a></p><p class="s35" style="padding-left: 42pt;text-indent: 0pt;text-align: left;"><a name="bookmark639">Functions and Variable Scope</a></p><p style="padding-top: 5pt;padding-left: 42pt;text-indent: 0pt;line-height: 115%;text-align: left;">Though they are sometimes known as <i>procedures </i>or <i>subroutines</i>, <i>functions </i>are a feature of nearly all programming languages. Functions allow programs to be divided into separate blocks and for the details of one part of the program to be hidden from another. In the shell, functions are often used for creating interactive shortcuts. We have seen this use of functions already, but shell functions can also be used within scripts or even within other functions; instead of control returning to the command line when the function finishes, execution continues with the next line after the function call. Functions are a feature common to all modern <span class="s33">sh</span>-compatible shells, but C shell and early versions of the Bourne shell don’t support them.</p><p style="padding-left: 60pt;text-indent: 0pt;line-height: 10pt;text-align: left;">Defining a function is very simple. Reiterating the example from Chapter 2:</p><p class="s33" style="padding-top: 8pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">findpgm() {</p><p class="s33" style="padding-top: 1pt;padding-left: 51pt;text-indent: 0pt;text-align: left;">grep &quot;$1&quot; $HOME/proglist | column</p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-top: 8pt;padding-left: 60pt;text-indent: 0pt;text-align: left;">There are actually two different syntaxes used for functions. We could instead write</p><p class="s33" style="padding-top: 8pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">function findpgm {</p><p class="s33" style="padding-top: 1pt;padding-left: 51pt;text-indent: 0pt;text-align: left;">grep &quot;$1&quot; $HOME/proglist | column</p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-top: 8pt;padding-left: 60pt;text-indent: 0pt;text-align: left;">The reason for this is historical: the <span class="s33">name() {} </span>syntax was added to the Bourne shell by</p><p style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;line-height: 115%;text-align: justify;">Steve Bourne at around the same time as David Korn added the <span class="s33">function name {} </span>syntax to the Korn shell. Only the former syntax is defined in the POSIX specification, but either will work in modern shells.</p><p class="s29" style="padding-top: 3pt;padding-left: 249pt;text-indent: 0pt;text-align: left;"><a name="bookmark677">CHAPTER 13 </a><span class="s28">■ </span>SCRIPTING AND FUNCTION S <span class="s27">321</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 17pt;line-height: 115%;text-align: justify;">One thing to be aware of if you write <span class="s33">ksh </span>scripts<span class="s43">2 </span>is that in <span class="s33">ksh </span>the two syntaxes have different semantics. With the latter syntax, variables and traps (we’ll discuss traps later) are local to the function, making the functions more script-like. This reflects the difference in how they were implemented in the two shells.</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 114%;text-align: left;">In both <span class="s33">bash </span>and <span class="s33">zsh</span>, all functions follow the simpler semantics. You have to state explicitly if you want local variables or traps. Note that the positional parameters (such as <span class="s33">$1</span>) are always local, though. Local variables are declared using the <span class="s33">local </span>built-in, which is yet another variant of <span class="s33">declare</span>.</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: justify;">Local variables in both <span class="s33">bash </span>and <span class="s33">zsh </span>have what is called <i>dynamic scope</i>. This means that if you call another function, it will be able to see all of the calling function’s local variables. To see what I mean, try this:</p><p class="s33" style="padding-top: 7pt;padding-left: 49pt;text-indent: -9pt;line-height: 115%;text-align: left;">function inner { echo $var</p><p class="s33" style="padding-left: 40pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s33" style="padding-left: 49pt;text-indent: -9pt;line-height: 115%;text-align: left;">function  outer  { local  var=local</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s33" style="padding-top: 4pt;padding-left: 49pt;text-indent: 0pt;text-align: left;">inner</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s33" style="padding-top: 4pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">var=global outer</p><p style="padding-top: 7pt;padding-left: 40pt;text-indent: 18pt;line-height: 114%;text-align: left;">If you run this in <span class="s33">bash </span>or <span class="s33">zsh</span>, it will print <span class="s33">local</span>: the <span class="s33">inner </span>function sees the <span class="s33">outer </span>function’s local variable. In <span class="s33">ksh93</span>, the situation is different. First, the <span class="s33">local </span>command needs to be replaced with <span class="s33">typeset</span>. More significant is that <span class="s33">ksh93 </span>uses <i>static scoping</i>, which means it will print <span class="s33">global</span>. The behavior of <span class="s33">typeset </span>in <span class="s33">ksh93 </span>is similar to that of the <span class="s33">my </span>keyword in Perl. <span class="s33">ksh88 </span>used <i>dynamic scoping </i>like <span class="s33">bash </span>and <span class="s33">zsh</span>.</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">Note that there is no such thing as a local function. If you declare a function inside another function, it will be available globally.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part346.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part348.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
