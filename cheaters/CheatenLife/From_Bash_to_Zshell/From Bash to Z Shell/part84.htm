<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Searching the Command History</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part83.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part85.htm">Next &gt;</a></p><p class="s18" style="padding-left: 42pt;text-indent: 0pt;text-align: left;"><a name="bookmark160">Searching the Command History</a></p><p style="padding-top: 5pt;padding-left: 42pt;text-indent: 0pt;line-height: 115%;text-align: left;">One very common task involves searching backwards through the command history to find something you entered before. There are various shortcuts that let you avoid having to scroll up through the history until you see it.</p><p class="s29" style="padding-top: 3pt;padding-left: 188pt;text-indent: 0pt;text-align: left;"><a name="bookmark198">CHAPTER 4 </a><span class="s28">■ </span>EN TERING AND ED ITING THE CO MMAND LIN E <span class="s27">83</span></p><p style="padding-top: 24pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">First, there are easy ways to get to the very top and very bottom of the history, although they don’t perform searches. These are shown in Table 4-4.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s13" style="padding-top: 7pt;padding-bottom: 4pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">Table 4-4. <span class="s32">Moving to the Start and End of the History</span></p><p style="padding-left: 40pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="354" height="1" alt="image" src="Image_112.png"/></span></p><p class="s48" style="padding-bottom: 2pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">Key Purpose</p><p style="padding-left: 40pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="354" height="1" alt="image" src="Image_113.png"/></span></p><p class="s51" style="padding-top: 3pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">Esc&lt; Go to the start of the command history</p><p class="s51" style="padding-top: 6pt;padding-bottom: 4pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">Esc&gt; Go to the end of the command history</p><p style="padding-left: 40pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="357" height="1" alt="image" src="Image_114.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: justify;">Next, there are real searches. You have various ways to tell the shell what to search for. The easiest to use are the “incremental” searches, shown in Table 4-5. These search for the nearest string in the history that matches everything you’ve typed. The whole line is searched.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s13" style="padding-top: 4pt;padding-bottom: 4pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">Table 4-5. <span class="s32">Incremental Searches</span></p><p style="padding-left: 40pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="405" height="1" alt="image" src="Image_115.png"/></span></p><p class="s48" style="padding-bottom: 2pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">Key Purpose</p><p style="padding-left: 40pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="401" height="1" alt="image" src="Image_116.png"/></span></p><p class="s51" style="padding-top: 3pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">Ctrl-r Search backward incrementally</p><p class="s51" style="padding-top: 5pt;padding-bottom: 4pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">Ctrl-s Search forward incrementally (also Ctrl-x-s in <span class="s61">zsh</span>)</p><p style="padding-left: 40pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="401" height="1" alt="image" src="Image_117.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">Normally, Ctrl-r is more useful since you start at the end of the history and want to search back through it.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="571" height="211" alt="image" src="Image_118.png"/></span></p><p class="s40" style="padding-top: 11pt;padding-left: 157pt;text-indent: 0pt;text-align: left;">THE NO_FLOW_CONTROL OPTION</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s33" style="padding-top: 6pt;padding-left: 8pt;text-indent: 0pt;line-height: 115%;text-align: left;">We’ve offered Ctrl-x-s as an alternative version of Ctrl-s, which is made available in zsh. (So is Ctrl-x-r, but you don’t need that so often.) The problem is that very often the terminal is set up so that Ctrl-s and Ctrl-q perform flow control: another feature provided by the terminal itself, not the shell. We talk about other such features in the sidebar “The Terminal Driver.” When you press Ctrl-s, any output to the terminal, including anything you type, is stopped. When you press Ctrl-q, it starts up again and you can see what you typed. In zsh you can fix this by setting the shell option no_flow_control. This doesn’t stop the use of Ctrl-s and Ctrl-q in external programs, to let you see something which is scrolling past quickly, so it’s fairly safe. (You may find if your terminal output is very fast they don’t have an instant effect even then.) There’s another, clumsier way of getting control using the stty command, which we’ll explain near the end of this chapter.</p><p class="s33" style="padding-top: 6pt;padding-left: 8pt;text-indent: 0pt;line-height: 115%;text-align: left;">We’ve offered Ctrl-x-s as an alternative version of Ctrl-s, which is made available in zsh. (So is Ctrl-x-r, but you don’t need that so often.) The problem is that very often the terminal is set up so that Ctrl-s and Ctrl-q perform flow control: another feature provided by the terminal itself, not the shell. We talk about other such features in the sidebar “The Terminal Driver.” When you press Ctrl-s, any output to the terminal, including anything you type, is stopped. When you press Ctrl-q, it starts up again and you can see what you typed. In zsh you can fix this by setting the shell option no_flow_control. This doesn’t stop the use of Ctrl-s and Ctrl-q in external programs, to let you see something which is scrolling past quickly, so it’s fairly safe. (You may find if your terminal output is very fast they don’t have an instant effect even then.) There’s another, clumsier way of getting control using the stty command, which we’ll explain near the end of this chapter.</p><p style="padding-left: 40pt;text-indent: 0pt;text-align: left;"/><p class="s33" style="padding-top: 6pt;padding-left: 8pt;text-indent: 0pt;line-height: 115%;text-align: left;">We’ve offered Ctrl-x-s as an alternative version of Ctrl-s, which is made available in zsh. (So is Ctrl-x-r, but you don’t need that so often.) The problem is that very often the terminal is set up so that Ctrl-s and Ctrl-q perform flow control: another feature provided by the terminal itself, not the shell. We talk about other such features in the sidebar “The Terminal Driver.” When you press Ctrl-s, any output to the terminal, including anything you type, is stopped. When you press Ctrl-q, it starts up again and you can see what you typed. In zsh you can fix this by setting the shell option no_flow_control. This doesn’t stop the use of Ctrl-s and Ctrl-q in external programs, to let you see something which is scrolling past quickly, so it’s fairly safe. (You may find if your terminal output is very fast they don’t have an instant effect even then.) There’s another, clumsier way of getting control using the stty command, which we’ll explain near the end of this chapter.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">Let’s consider an example depicting the effects of Ctrl-r. Suppose you’ve typed the three lines I used as an example earlier:</p><p class="s29" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark199"><span class="s27">84 </span></a>CHAPTER 4 <span class="s28">■ </span>EN TERING AND ED ITING THE CO MMAND LINE </p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s33" style="padding-left: 42pt;text-indent: 0pt;text-align: left;">%  <b>echo  this  is  the  first  line</b></p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">this is the first line</p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">% <b>echo and this is the second</b></p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">and  this  is  the  second</p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">% <b>echo but this is no longer the first line</b></p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">but  this  is  no  longer  the  first  line</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 60pt;text-indent: 0pt;text-align: left;">Now you type the following:</p><p class="s33" style="padding-top: 8pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">&lt;ctrl-r&gt;this is</p><p style="padding-top: 8pt;padding-left: 42pt;text-indent: 18pt;line-height: 115%;text-align: left;">Both shells prompt you during searches, showing you what you’ve typed to find the line you have reached. In <span class="s33">bash</span>, you’ll see the message <span class="s33">(reverse-i-search) </span>appear. If you’ve entered an incorrect character for the search, you can press Backspace to delete it.</p><p style="padding-left: 42pt;text-indent: 18pt;line-height: 115%;text-align: left;">You’ll return to where that string occurs on the third line. Now continue so that the complete line looks like the following:</p><p class="s33" style="padding-top: 7pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">&lt;ctrl-r&gt;this is the</p><p style="padding-top: 8pt;padding-left: 60pt;text-indent: 0pt;text-align: left;">Now you’ll find you’re looking at the line before. Finally, continue with the following text:</p><p class="s33" style="padding-top: 8pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">&lt;ctrl-r&gt;this is the first</p><p style="padding-top: 8pt;padding-left: 42pt;text-indent: 18pt;line-height: 115%;text-align: left;">You’ve returned to the first line. If you type something other than a key that inserts itself or deletes backwards, the search ends and you stay on the line found. Be careful with Return, however, since it immediately executes the line. If you want a chance to edit the line first, press another key such as Left Arrow.</p><p style="padding-left: 42pt;text-indent: 18pt;line-height: 115%;text-align: left;">This is probably as good a point as any to tell you about Ctrl-g, which you can press to abort the current operation. If you were in the middle of a search, you will return to the line at the end of the history, quite likely still blank. If you were just doing normal editing, Ctrl-g would abort the current line and display an empty one.</p><p style="padding-left: 42pt;text-indent: 18pt;line-height: 115%;text-align: left;">You can resume searching from where you left off by pressing Ctrl-r twice, once to start the search and again to restore the string you were searching for before. If you abort with Ctrl-g, however, the shell doesn’t remember what you are searching for on that occasion and keeps whatever was there before. In other words, it’s best to get into the habit of exiting with a different key.</p><p style="padding-left: 42pt;text-indent: 18pt;line-height: 115%;text-align: left;">There are two other types of searching. First, there are nonincremental versions of the search commands, available in <span class="s33">bash </span>as Esc-p and Esc-n. (The p and n stand for previous and next. In fact, Ctrl-p and Ctrl-n are actually alternatives to the Up and Down Arrow keys, respec- tively.) If you press Esc-p, you will see a colon as a prompt. Type a string after it, then press Return. The shell searches back for that string.</p><p style="padding-left: 42pt;text-indent: 18pt;line-height: 115%;text-align: justify;">Often there is no advantage to using the nonincremental instead of the incremental versions. Still, if you feel called to use the <span class="s33">zsh </span>versions, they can be borrowed from vi mode. The names of the commands are <span class="s33">vi-history-search-backward </span>and <span class="s33">vi-history-search-forward</span>; we’ll see shortly how you can use this information to associate the command with a key.</p><p style="padding-left: 42pt;text-indent: 18pt;line-height: 115%;text-align: left;">A more useful alternative is to have the shell search backward for a line that begins with the same command word, or with the same string up to the cursor position, as the current line.</p><p style="padding-left: 42pt;text-indent: 0pt;line-height: 10pt;text-align: left;">Both forms are present in <span class="s33">zsh</span>, but only the second form in <span class="s33">bash</span>.</p><p class="s29" style="padding-top: 3pt;padding-left: 188pt;text-indent: 0pt;text-align: left;"><a name="bookmark200">CHAPTER 4 </a><span class="s28">■ </span>EN TERING AND ED ITING THE CO MMAND LIN E <span class="s27">85</span></p><p style="padding-top: 24pt;padding-left: 58pt;text-indent: 0pt;text-align: left;">The first (<span class="s33">zsh </span>only) form is shown in Table 4-6.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s13" style="padding-top: 9pt;padding-bottom: 4pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">Table 4-6. <span class="s32">Searching Lines for the First Word in </span><span class="s45">zsh</span></p><p style="padding-left: 40pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="430" height="1" alt="image" src="Image_119.png"/></span></p><p class="s48" style="padding-bottom: 2pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">Key Purpose</p><p style="padding-left: 40pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="430" height="1" alt="image" src="Image_120.png"/></span></p><p class="s51" style="padding-top: 3pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">Esc-p Go to the previous line starting with the same word</p><p class="s51" style="padding-top: 6pt;padding-bottom: 4pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">Esc-n Go to the next line starting with the same word</p><p style="padding-left: 40pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="435" height="1" alt="image" src="Image_121.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">This means that wherever the cursor is on the command line Esc-p will take you back to the previous line beginning with the same command word, ignoring any other text. There’s an exception: If you are still typing the command word, Esc-p will take you back to any line begin- ning with the same characters. Note that in <span class="s33">bash </span>the same keys do nonincremental searching as described above.</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">The other form is called <span class="s33">history-beginning-search-backward </span>(or <span class="s33">-forward</span>) in <span class="s33">zsh </span>and <span class="s33">history-search-backward </span>(or <span class="s33">-forward</span>) in <span class="s33">bash</span>. In this case, the shell looks back for a line in which every character between the start of the line and the cursor position is the same, so the more you have already typed, the more precise the match. It’s essentially a form of nonincre- mental search where you type the characters before you search for them. For those of us with limited foreknowledge of our own actions, this can be quite a blessing.</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 114%;text-align: left;">(As an extra piece of confusion, the <span class="s33">bash </span>names <span class="s33">history-search-backward </span>and <span class="s33">-forward </span>are what <span class="s33">zsh </span>calls the commands behind Esc-p and Esc-n.)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part83.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part85.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
