<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Multiline Editing and the zsh Editor Stack</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part99.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part101.htm">Next &gt;</a></p><h4 style="padding-left: 40pt;text-indent: 0pt;text-align: left;"><a name="bookmark176">Multiline Editing and the zsh Editor Stack</a></h4><p style="padding-top: 6pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">In Chapter 2 we saw various examples of entering commands on multiple lines. The shell presents a special prompt to show that it is expecting more input. When the input is complete, the shell executes the command. In <span class="s33">bash</span>, if you scroll back in the command history to reedit such a line, you will find that the whole command has been put on a single line. When you execute the line, it still has the same effect as the original because <span class="s33">bash </span>inserts special characters to make sure the line you are editing has the same effect as the original one. There’s no way of editing it in the original form, though.</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">However, <span class="s33">zsh </span>has powerful handling for editing commands that span more than one line. We already explained how the shell would prompt you if a command wasn’t finished. In that case, you are effectively editing a new line. For example,</p><p class="s33" style="padding-top: 6pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">zsh% <b>cp file1 file2 file3 file4 \</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">&gt;  <b>/disk1/storage/pws/projects/utopia/data/run32</b></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">If you use the cursor keys on the second line, the editor behaves pretty much as if you were editing a separate command, with the previous line already in the history.</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">However, it’s possible to edit two lines at once. In fact, that’s how continuation lines are put into the history. If you press Return and then Up Arrow, you will find both lines appear, without the continuation prompt <i>&gt;</i>. Go up once more, and you go from the <span class="s33">/disk/</span>... to the <span class="s33">cp </span>line. (We’re assuming you use the normal binding for the cursor keys, <span class="s33">up-line-or-history</span>. There’s another possible binding, <span class="s33">up-history</span>, which always takes you back in the history, not through the set of lines displayed for editing.) Go up again, and you are taken to the previous command.</p><p style="padding-left: 58pt;text-indent: 0pt;line-height: 10pt;text-align: left;">There are two ways of editing multiline commands without the continuation prompt:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s13" style="padding-left: 70pt;text-indent: -12pt;line-height: 114%;text-align: justify;">1. <span class="p">Use Esc-Return where you would normally press Return on its own. It puts the cursor onto a new line with no prompt. You can add as many lines as you want this way, and they will go into the command history together. Be careful to note that unless you use a</span></p><p class="s33" style="padding-left: 70pt;text-indent: 0pt;line-height: 115%;text-align: justify;">\ <span class="p">at the end of the previous line, the next line will be treated as a new command, even though the previous line hasn’t yet been executed. For example,</span></p><p class="s33" style="padding-top: 7pt;padding-left: 70pt;text-indent: 0pt;line-height: 115%;text-align: left;">zsh% <b>mv file1 old_file1&lt;escape&gt;&lt;return&gt; mv file2 old_file2&lt;return&gt;</b></p><p style="padding-top: 8pt;padding-left: 70pt;text-indent: 0pt;line-height: 115%;text-align: justify;">There are two complete commands there. We executed both at once so that the two files were renamed at (almost) the same time. We could have put a semicolon between them (remember the semicolon connects a list of different commands on the same line), but this is a little easier to read.</p><p class="s29" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark215"><span class="s27">100 </span></a>CHAPTER 4 <span class="s28">■ </span>EN TERING AND ED ITING THE CO MMAND LINE </p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 72pt;text-indent: -12pt;line-height: 114%;text-align: left;"><span class="s13">2. </span>The other way uses <span class="s33">push-line-or-edit</span>. We’ll bind that to a key sequence, to avoid typing a very long command after Esc x:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s33" style="padding-left: 72pt;text-indent: 0pt;text-align: left;">zsh% <b>bindkey &#39;\eq&#39; push-line-or-edit</b></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 72pt;text-indent: 0pt;text-align: left;">Now go back and again type the following:</p><p class="s33" style="padding-top: 8pt;padding-left: 72pt;text-indent: 0pt;text-align: left;">zsh% <b>cp file1 file2 file3 file4 \</b></p><p class="s33" style="padding-top: 1pt;padding-left: 72pt;text-indent: 0pt;text-align: left;">&gt; <b>/disk1/storage/pws/projects/utopia/data/run32</b></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 72pt;text-indent: 0pt;line-height: 115%;text-align: left;">But this time press Esc q at the end instead of Return. You’ll see the continuation prompt magically disappear and you will be editing the complete command.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="toc">&nbsp;</p><div class="toc"><a class="toc0" href="part101.htm">The Buffer Stack</a><a class="toc0" href="part102.htm">A Quick Way of Getting Help on a Command</a></div><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part99.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part101.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
