<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Substrings</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part325.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part327.htm">Next &gt;</a></p><p class="s35" style="padding-left: 40pt;text-indent: 0pt;text-align: left;"><a name="bookmark591">Substrings</a></p><p style="padding-top: 5pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">We’ve seen how you can use pattern operators to extract a substring from a string. Often, it is more convenient to specify a substring using numeric offsets into the string instead of using patterns that are matched against the string contents. Unfortunately, <span class="s33">bash </span>and <span class="s33">zsh </span>differ here. <span class="s33">zsh </span>allows array-like indexing to be used with scalar variables. In this example we extract the</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="226" height="1" alt="image" src="Image_244.png"/></span></p><p class="s14" style="padding-top: 5pt;padding-left: 52pt;text-indent: -12pt;line-height: 108%;text-align: left;">2. As we mentioned before, greedy matching is the norm for regular expressions. To disable greedy matching, <span class="s29">zsh </span>has an <span class="s29">(S) </span>variable expansion flag.</p><p class="s29" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark618"><span class="s27">296 </span></a>CHAPTER 12 <span class="s28">■ </span>VARIABLES </p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 42pt;text-indent: 0pt;line-height: 115%;text-align: left;">substring starting with the third character in the original string and finishing with the fifth character:</p><p class="s33" style="padding-top: 7pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">zsh% <b>a=&#39;123456789&#39;</b></p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">zsh% <b>echo $a[3,5]</b></p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">345</p><p class="s33" style="padding-top: 8pt;padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">bash <span class="p">uses another new form: </span>${<span class="s32">variable</span>:<span class="s32">offset</span>:<span class="s32">length</span>}<span class="p">. The length part can be left out, leaving just </span>${<span class="s32">variable</span>:<span class="s32">offset</span>}<span class="p">.</span></p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 10pt;text-align: left;">Indexing is from zero so the same example for <span class="s33">bash </span>is</p><p class="s33" style="padding-top: 8pt;padding-left: 41pt;text-indent: 0pt;line-height: 115%;text-align: justify;">bash$ <b>a=&#39;123456789&#39; </b>bash$ <b>echo ${a:2:3} </b>345</p><p style="padding-top: 7pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">Note that in both <span class="s33">bash </span>and <span class="s33">zsh </span>the indexes can be mathematical expressions.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 42pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="504" height="1" alt="image" src="Image_245.png"/></span></p><p class="s21" style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;line-height: 115%;text-align: left;">■<span class="s23">Note </span><span class="s19">zsh doesn’t support the bash syntax at all—colons are used to introduce C shell style modifiers. Using modifiers with variables was mentioned in the section “Other Uses of History Modifiers” in Chapter 6. One of the most useful things about modifiers is that you can use them with bang history, globbing, and variable substitutions. Since we’ve shown you modifiers before in both Chapter 6 and Chapter 9, we won’t do so again.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 42pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="504" height="1" alt="image" src="Image_246.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part325.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part327.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
