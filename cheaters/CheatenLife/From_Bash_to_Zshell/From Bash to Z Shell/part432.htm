<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Unix Programs</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part431.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part433.htm">Next &gt;</a></p><p class="s17" style="padding-top: 9pt;padding-left: 40pt;text-indent: 0pt;text-align: left;"><a name="bookmark821">Unix Programs</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 23pt;padding-left: 40pt;text-indent: 0pt;line-height: 88%;text-align: left;"><span class="h2">T</span>his appendix describes some of the hundreds of standard Unix programs available on a command line. These are also called Unix <i>utilities</i>.</p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">We generally don’t include commands that are built in (see the section “Where the Commands Are Located” in Chapter 1) to the shell. We also don’t describe many programs. To see some of the others, use <span class="s33">ls </span>to list the directories <span class="s33">/bin </span>and <span class="s33">/usr/bin</span>. Also check out</p><p class="s33" style="padding-left: 40pt;text-indent: 0pt;line-height: 10pt;text-align: left;">/opt <span class="p">and </span>/usr/local/bin<span class="p">. (In Chapter 2 we developed an easier way to do this.)</span></p><p style="padding-top: 1pt;padding-left: 58pt;text-indent: 0pt;text-align: left;">To learn more about a program named (for example) <span class="s33">xyz</span>, type <span class="s33">man xyz </span>or <span class="s33">info xyz</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s48" style="padding-bottom: 2pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">Program Description</p><p style="padding-left: 40pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="505" height="1" alt="image" src="Image_319.png"/></span></p><p class="s61" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;line-height: 10pt;text-align: left;">awk <span class="s51">A programming language useful for processing text as either strings or numbers.</span></p><p class="s51" style="padding-left: 113pt;text-indent: 0pt;text-align: left;">See also <span class="s61">sed </span>(smaller and faster for text-only work) and Perl (larger and more sophisticated).</p><p class="s51" style="padding-top: 6pt;padding-left: 113pt;text-indent: -73pt;text-align: left;"><span class="s61">bzip2 </span>Compresses files to save disk space. The <span class="s61">bunzip2 </span>program uncompresses permanently and <span class="s61">bzcat </span>makes an uncompressed copy on the standard output (the section “Writing Output to Files: Redirection” in Chapter 2 explains <i>stdout</i>). (“Zip” is a term for compressing files.) See also <span class="s61">gzip</span>.</p><p class="s61" style="padding-top: 6pt;padding-left: 113pt;text-indent: -73pt;text-align: left;">cal                          <span class="s51">Shows a calendar for any month or year. There’s an example in the section “Command Lines” in Chapter 1.</span></p><p class="s61" style="padding-top: 7pt;padding-left: 113pt;text-indent: -73pt;text-align: left;">cat <span class="s51">This simple program reads the files named in its command-line arguments and outputs their contents, one after another, without stopping. (See also the </span>less <span class="s51">pager program, which shows files screen by screen.) Stands for “catenate” or “concatenate.” Useful options: </span>cat -t -v -e <span class="s51">is a safe way to look at unknown files that might have “nonprinting” characters, which can mess up your terminal; the </span>-e <span class="s51">puts a </span>$ <span class="s51">character at the end of each line of the file so you can easily see trailing spaces.</span></p><p class="s61" style="padding-top: 7pt;padding-left: 113pt;text-indent: -73pt;text-align: left;">chmod <span class="s51">Changes the access permission for files and directories so you can either share your files with other users or protect them. Stands for “change mode.”</span></p><p class="s61" style="padding-top: 6pt;padding-left: 113pt;text-indent: -73pt;text-align: left;">chown <span class="s51">Changes the owner and/or group of a file or directory. There’s also a related command named </span>chgrp <span class="s51">that changes just group ownership.</span></p><p class="s61" style="padding-top: 7pt;padding-left: 113pt;text-indent: -73pt;text-align: left;">chsh <span class="s51">Edits the system file </span>/etc/passwd <span class="s51">(or similar) to change the shell that runs when a user logs in.</span></p><p class="s61" style="padding-top: 7pt;padding-left: 113pt;text-indent: -73pt;text-align: justify;">clear <span class="s51">Erases your terminal screen. (May not erase any “scroll-back buffer” that shows what was on your screen before.) You may be able to achieve the same effect by pressing Ctrl-l (the letter “l”).</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s27" style="padding-top: 4pt;padding-left: 39pt;text-indent: 0pt;text-align: right;">409</p><p class="s29" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark822"><span class="s27">410 </span></a>APPENDIX A <span class="s28">■ </span>UN I X PR OG RA MS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s48" style="padding-top: 4pt;padding-bottom: 2pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">Program Description</p><p style="padding-left: 42pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="505" height="1" alt="image" src="Image_320.png"/></span></p><p class="s51" style="padding-top: 1pt;padding-left: 115pt;text-indent: -73pt;text-align: left;"><span class="s61">column                    </span>Makes text into columns. (If your system doesn’t have <span class="s61">column</span>, try <span class="s61">paste</span>—or a command like <span class="s61">pr  -t  -l1  -</span><i>n</i>, where <i>n </i>is the number of columns you want.)</p><p class="s61" style="padding-top: 7pt;padding-left: 115pt;text-indent: -73pt;text-align: left;">cp <span class="s51">Makes copies (duplicates) of one or more files. If the final command-line argument is a directory, all file(s) are copied to that directory. Warning: </span>cp <span class="s51">will overwrite an existing file without asking! To be asked, add the </span>-i <span class="s51">(interactive) option. See also </span>ln<span class="s51">.</span></p><p class="s61" style="padding-top: 6pt;padding-left: 115pt;text-indent: -73pt;text-align: left;">cut <span class="s51">Removes some of each line of text: by column, by field, etc. (If your system doesn’t have </span>cut<span class="s51">, try </span>colrm <span class="s51">or a programming language like </span>awk <span class="s51">or Perl.)</span></p><p class="s51" style="padding-left: 115pt;text-indent: 0pt;text-align: left;">See also <span class="s61">paste</span>. There’s an example in the section “Editing Data, Continuing Command Lines” in Chapter 2.</p><p class="s51" style="padding-top: 6pt;padding-left: 115pt;text-indent: -73pt;text-align: left;">CVS The Concurrent Versions System (CVS) lets you recover previous versions of one file or a set of files. Similar systems include RCS, SCCS, and Subversion.</p><p class="s61" style="padding-top: 7pt;padding-left: 115pt;text-indent: -73pt;text-align: left;">date <span class="s51">Shows the date and time in your current time zone (or another time zone if you set the </span>TZ <span class="s51">environment variable). There’s an example in the section</span></p><p class="s51" style="padding-left: 115pt;text-indent: 0pt;text-align: left;">“Simple Commands” in Chapter 1. <span class="s61">date </span>can also be used to set the time and date on your system.</p><p class="s61" style="padding-top: 6pt;padding-left: 115pt;text-indent: -73pt;text-align: left;">dd <span class="s51">Copies a file or standard input, converting and formatting the text. Often used for operations with magnetic tape but handy for other text processing too.</span></p><p class="s61" style="padding-top: 7pt;padding-left: 115pt;text-indent: -73pt;text-align: left;">df <span class="s51">Displays information about the filesystem. Useful option: </span>-h <span class="s51">or </span>-k <span class="s51">(depending on your system) displays in an easier-to-read format. Useful argument: the pathname of a directory (like </span>. <span class="s51">for the current directory) shows information about the disk where that directory is stored.</span></p><p class="s61" style="padding-top: 7pt;padding-left: 115pt;text-indent: -73pt;text-align: justify;">diff <span class="s51">Compares two text files and shows the differences in your choice of several formats. Can also compare two directory trees file by file. Similar programs include </span>cmp <span class="s51">and </span>comm<span class="s51">.</span></p><p class="s61" style="padding-top: 7pt;padding-left: 115pt;text-indent: -73pt;text-align: justify;">du <span class="s51">Shows how much disk space is used by a file, a directory, or a directory tree. Useful option on some systems is </span>-k<span class="s51">, which shows file sizes in kilobytes (kb) instead of the default on those systems of 512 bytes (half a kilobyte).</span></p><p class="s61" style="padding-top: 7pt;padding-left: 115pt;text-indent: -73pt;text-align: left;">echo <span class="s51">Outputs its command-line arguments. This is useful for programming and to show the shell expansion of arguments, like </span>echo $SHELL <span class="s51">or </span>echo f*<span class="s51">. There are examples throughout the book, including the sections “Where the Commands Are Located” and “Expansion and Substitution” in Chapter 1, and the sections “Writing Output to Files: Redirection,” “Command Substitution,” and “Programs and the Path” in Chapter 2.</span></p><p class="s51" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Emacs Powerful text editor. (Stands for “editor macros.”)</p><p class="s61" style="padding-top: 6pt;padding-left: 115pt;text-indent: -73pt;text-align: left;">env <span class="s51">Displays a list of environment variables set in the current process (typically, your shell). Can also run a program in a modified environment. We explain environment variables in the section “Passing Info to Processes with Envi- ronment Variables” in Chapter 3. Also see </span>printenv<span class="s51">.</span></p><p class="s51" style="padding-top: 7pt;padding-left: 115pt;text-indent: -73pt;text-align: left;"><span class="s61">file </span>Guesses what sort of content is in a file. (In general, Unix doesn’t require filename “extensions,” like <i>.txt </i>for text files, though they’re often used.)</p><p class="s61" style="padding-top: 6pt;padding-left: 115pt;text-indent: -73pt;text-align: left;">find                        <span class="s51">Searches a directory tree for files, directories, etc. with particular names or other characteristics.</span></p><p class="s61" style="padding-top: 6pt;padding-left: 115pt;text-indent: -73pt;text-align: left;">gimp <span class="s51">Powerful editor for photos and other graphics. Requires a graphical display and a mouse. (Stands for GNU Image Manipulation Program.)</span></p><p class="s29" style="padding-top: 3pt;padding-left: 293pt;text-indent: 0pt;text-align: left;"><a name="bookmark823">APPENDIX A </a><span class="s28">■ </span>UNIX PROG RAMS <span class="s27">411</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s48" style="padding-bottom: 2pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">Program Description</p><p style="padding-left: 40pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="505" height="1" alt="image" src="Image_321.png"/></span></p><p class="s61" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">gnumeric <span class="s51">Spreadsheet. Requires a graphical display and a mouse.</span></p><p class="s51" style="padding-top: 6pt;padding-left: 113pt;text-indent: -73pt;text-align: left;"><span class="s61">grep </span>Searches through file(s) or its standard input (the section “Writing Output to Files: Redirection” in Chapter 2 explains <i>stdin</i>) for words or for a pattern called a <i>regular expression</i>. Stands for “globally search for a regular expression and print.”</p><p class="s51" style="padding-top: 7pt;padding-left: 113pt;text-indent: -73pt;text-align: left;"><span class="s61">gzip </span>Compresses files to save disk space. The <span class="s61">gunzip </span>program uncompresses permanently and <span class="s61">zcat </span>makes an uncompressed copy on the standard output (the section “Writing Output to Files: Redirection” in Chapter 2 explains <i>stdout</i>). (The name is from GNU zip program, where “zip” is a term for compressing files.) See also <span class="s61">bzip2</span>.</p><p class="s61" style="padding-top: 7pt;padding-left: 113pt;text-indent: -73pt;text-align: left;">head <span class="s51">Outputs just the first few lines from one or more text files. By default, the first 10 lines are output, but you can use an option to specify a different number (for example, </span>-20 <span class="s51">for the first 20 lines). It is often used as a filter as part of a pipeline. There is an example in the section “Here-Documents and Here-Strings” in Chapter 8. There is also a </span>tail <span class="s51">command that prints just the last lines.</span></p><p class="s61" style="padding-top: 7pt;padding-left: 113pt;text-indent: -73pt;text-align: left;">kill <span class="s51">Sends a signal to a process. See the section “Starting and Stopping Processes: Signals, Job Control” in Chapter 3.</span></p><p class="s51" style="padding-top: 6pt;padding-left: 113pt;text-indent: -73pt;text-align: left;"><span class="s61">less                        </span>A <i>pager </i>program that displays files page-by-page (one terminal screenful at a time). Many handy features for searching, display, and much more. If your system doesn’t have <span class="s61">less</span>, look for the related programs named <span class="s61">more </span>or <span class="s61">pg</span>.</p><p class="s61" style="padding-top: 7pt;padding-left: 113pt;text-indent: -73pt;text-align: left;">ln <span class="s51">Creates a hard or symbolic link to a file, like a “shortcut” in Microsoft Windows. This makes the file accessible from another directory, and/or with a different filename, without making a separate copy. See the examples in the section “Links” in Chapter 8. See also </span>cp <span class="s51">and </span>mv<span class="s51">.</span></p><p class="s61" style="padding-top: 7pt;padding-left: 113pt;text-indent: -73pt;text-align: left;">locate <span class="s51">Searches a database of the names of files on your filesystems. (Note: the database may not list all files, and it may be far out of date. Ask your system staff.)</span></p><p class="s61" style="padding-top: 6pt;padding-left: 113pt;text-indent: -73pt;text-align: left;">look <span class="s51">Searches a sorted file. (By default, searches a list of dictionary words, which is a handy way to check spelling.)</span></p><p class="s51" style="padding-top: 6pt;padding-left: 113pt;text-indent: -73pt;text-align: left;"><span class="s61">lpr </span>Prints file(s) or standard input (the section “Writing Output to Files: Redirection” in Chapter 2 explains <i>stdin</i>). Your system may have the <span class="s61">lp </span>program instead. (Stands for “line printer.”) Note: if the file has graphics in it, or was created by a graphical program such as a word processor, you should probably print by using the program that created the file.</p><p class="s61" style="padding-top: 6pt;padding-left: 113pt;text-indent: -73pt;text-align: left;">ls <span class="s51">Lists the contents of directories and/or files. One of the many examples is in the section “The Filesystem: Directories, Pathnames” in Chapter 1.</span></p><p class="s61" style="padding-top: 6pt;padding-left: 113pt;text-indent: -73pt;text-align: left;">make <span class="s51">Reads instructions from a file describing how to produce one or more output files from their input files. It checks which of the input files have changed and runs only those commands needed to update the output files. Typically it is used when compiling a software program.</span></p><p class="s61" style="padding-top: 7pt;padding-left: 113pt;text-indent: -73pt;text-align: left;">man <span class="s51">Describes a program. You may also need the </span>info <span class="s51">program, which does a similar thing. There’s an example in the section “Command Lines” in Chapter 1.</span></p><p class="s61" style="padding-top: 6pt;padding-left: 113pt;text-indent: -73pt;text-align: left;">mesg                        <span class="s51">Controls whether other users can write (send messages) to your terminal with a utility such as </span>write <span class="s51">or </span>talk<span class="s51">.</span></p><p class="s29" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark824"><span class="s27">412 </span></a>APPENDIX A <span class="s28">■ </span>UN I X PR OG RA MS</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s48" style="padding-top: 4pt;padding-bottom: 2pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">Program Description</p><p style="padding-left: 42pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="505" height="1" alt="image" src="Image_322.png"/></span></p><p class="s51" style="padding-top: 1pt;padding-left: 115pt;text-indent: -73pt;text-align: left;"><span class="s61">mkdir </span>Creates one or more directories. The arguments are one or more pathnames— relative or absolute. For instance, <span class="s61">mkdir papers </span>makes a subdirectory named <i>papers </i>under the current directory, and <span class="s61">mkdir /usr/local/foo </span>makes a directory with that absolute pathname. Useful option: <span class="s61">-p </span>creates multiple layers of subdirectories if needed. (Stands for “make directory.”) An example is in the section “Programs and the Path” in Chapter 2.</p><p class="s51" style="padding-top: 7pt;padding-left: 115pt;text-indent: -73pt;text-align: left;">Mozilla Graphical web browser available on many systems. Your system may also have other browsers such as <i>Netscape </i>or <i>Konqueror</i>.</p><p class="s61" style="padding-top: 7pt;padding-left: 115pt;text-indent: -73pt;text-align: left;">mv <span class="s51">Renames files or directories, or moves them into different directories. (Stands for “move.”) If the final command-line argument is a directory, all file(s) are moved into that directory. Caution: </span>mv <span class="s51">will overwrite an existing file without asking! To be asked, add the </span>-i <span class="s51">(“interactive”) option.</span></p><p class="s61" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 10pt;text-align: left;">passwd <span class="s51">Changes your login password. (Your system may use a different program.</span></p><p class="s51" style="padding-left: 115pt;text-indent: 0pt;line-height: 10pt;text-align: left;">Check with your system staff.)</p><p class="s61" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">paste <span class="s51">Pastes text into columns. See also </span>cut<span class="s51">, </span>column<span class="s51">, and </span>pr<span class="s51">.</span></p><p class="s51" style="padding-top: 6pt;padding-left: 115pt;text-indent: -73pt;text-align: left;">Perl Sophisticated programming language with many uses. Terse syntax makes it powerful but code can be difficult to understand at first. Smaller languages include <span class="s61">sed </span>and <span class="s61">awk</span>.</p><p class="s61" style="padding-top: 6pt;padding-left: 115pt;text-indent: -73pt;text-align: justify;">pico <span class="s51">Easy-to-use text editor. Useful option (for editing shell setup files like </span>.bashrc<span class="s51">): </span>-w <span class="s51">tells Pico not to “wrap” (break) lines that are wider than your screen. A similar program named </span>nano <span class="s51">also exists.</span></p><p class="s61" style="padding-top: 7pt;padding-left: 115pt;text-indent: -73pt;text-align: left;">pr <span class="s51">Makes text into columns, numbered pages with titles, and more. (Stands for “print,” which made sense on the original teletype terminals where the output was printed onto a roll of paper!)</span></p><p class="s61" style="padding-top: 7pt;padding-left: 115pt;text-indent: -73pt;text-align: left;">printenv <span class="s51">Displays a list of environment variables set in the current process (typically, your shell). We explain environment variables in the section “Passing Info to Processes with Environment Variables” in Chapter 3. Also see </span>env<span class="s51">.</span></p><p class="s61" style="padding-top: 6pt;padding-left: 115pt;text-indent: -73pt;text-align: left;">ps <span class="s51">Shows information about processes. (Stands for “process status.”) There are examples in the section “Command Lines” in Chapter 1 and the section “Starting and Stopping Processes: Signals, Job Control” in Chapter 3.</span></p><p class="s61" style="padding-top: 7pt;padding-left: 115pt;text-indent: -73pt;text-align: left;">pwd <span class="s51">Shows the absolute pathname of your current directory. (Stands for “print working directory.”) There’s an example in the section “Relative Pathnames and Your Current Directory” in Chapter 1.</span></p><p class="s61" style="padding-top: 7pt;padding-left: 115pt;text-indent: -73pt;text-align: left;">rm <span class="s51">Removes the files you list on its command line. Useful options: </span>-i <span class="s51">asks before removing each file, and </span>-r <span class="s51">removes a directory and all of its files.</span></p><p class="s51" style="padding-top: 6pt;padding-left: 115pt;text-indent: -73pt;text-align: left;"><span class="s61">rmdir </span>Removes directories named on the command line. Directories must be empty (use <span class="s61">rm </span>to remove any files in them first, or use <span class="s61">rm -r </span>to remove the directory <i>and </i>its files).</p><p class="s61" style="padding-top: 7pt;padding-left: 115pt;text-indent: -73pt;text-align: left;">scp <span class="s51">Copies files to or from other computers using </span>ssh<span class="s51">. (Stands for “secure copy.”) It is similar to the older, and relatively less secure, </span>rcp <span class="s51">(remote copy) command.</span></p><p class="s61" style="padding-top: 6pt;padding-left: 115pt;text-indent: -73pt;text-align: left;">sed <span class="s51">The stream editor, </span>sed<span class="s51">, reads text from its standard input, applies one or more editing commands to the text, and writes the result to its standard output. The most-used </span>sed <span class="s51">command is probably </span>s<span class="s51">, which substitutes new text in place of existing text.</span></p><p class="s51" style="padding-top: 6pt;padding-left: 115pt;text-indent: -73pt;text-align: left;"><span class="s61">sort </span>Reads files or standard input (the section “Writing Output to Files: Redirection” in Chapter 2 explains <i>stdin</i>) and sorts their lines.</p><p class="s29" style="padding-top: 3pt;padding-left: 293pt;text-indent: 0pt;text-align: left;"><a name="bookmark825">APPENDIX A </a><span class="s28">■ </span>UNIX PROG RAMS <span class="s27">413</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s48" style="padding-bottom: 2pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">Program Description</p><p style="padding-left: 40pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="505" height="1" alt="image" src="Image_323.png"/></span></p><p class="s61" style="padding-top: 1pt;padding-left: 113pt;text-indent: -73pt;text-align: left;">ssh <span class="s51">Runs programs on other computers or logs you into other computers. (Stands for “secure shell.”) Two similar (but insecure) programs are </span>rlogin <span class="s51">and </span>telnet<span class="s51">.</span></p><p class="s61" style="padding-top: 7pt;padding-left: 113pt;text-indent: -73pt;text-align: left;">strings <span class="s51">Extracts ASCII strings from binary files. This allows many other Unix commands that only work with plain text to be used on the result. So, for example, when used with </span>grep <span class="s51">it is possible to search the contents of a binary file.</span></p><p class="s61" style="padding-top: 6pt;padding-left: 113pt;text-indent: -73pt;text-align: left;">tar <span class="s51">Archiving program that can write multiple directories and files into a single file, to a pipe, or (</span>tar<span class="s51">’s original use) to magnetic tape. (The name stands for “tape archiver.”) Your version of </span>tar <span class="s51">may be able to compress the archive file to save space; otherwise you can pipe </span>tar<span class="s51">’s output through a compression program like </span>gzip<span class="s51">.</span></p><p class="s61" style="padding-top: 6pt;padding-left: 113pt;text-indent: -73pt;text-align: justify;">tee <span class="s51">Writes text from its standard input to its standard output and also to one or more files named on its command line. There’s an example (as well as a </span>zsh <span class="s51">replacement for </span>tee<span class="s51">) in the section “Multiple Redirections in zsh” in Chapter 8.</span></p><p class="s61" style="padding-top: 6pt;padding-left: 113pt;text-indent: -73pt;text-align: left;">touch <span class="s51">Creates empty files and changes the “timestamp” (last-modified date) of existing files. For an example, see the section “Building Pathnames by Completion” in Chapter 1.</span></p><p class="s61" style="padding-top: 7pt;padding-left: 113pt;text-indent: -73pt;text-align: left;">tr <span class="s51">Translates characters. See the section “Command Substitution” in Chapter 2 for an example.</span></p><p class="s61" style="padding-top: 7pt;padding-left: 113pt;text-indent: -73pt;text-align: left;">uniq <span class="s51">Compares each line of text with the next line, either showing duplicate lines or eliminating them. Often used with </span>sort <span class="s51">(though see </span>sort -u<span class="s51">, which runs </span>uniq <span class="s51">for you).</span></p><p class="s51" style="padding-top: 7pt;padding-left: 113pt;text-indent: -73pt;text-align: left;">vi Powerful text editor. (Stands for “visual.” Originally, editors showed only one line of a file at a time.)</p><p class="s61" style="padding-left: 40pt;text-indent: 0pt;line-height: 17pt;text-align: left;">w <span class="s51">Detailed information about users logged in to your computer. See also </span>who<span class="s51">. </span>wc <span class="s51">Counts the number of lines, words, and characters in file(s) or standard input</span></p><p class="s51" style="padding-left: 113pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(the section “Writing Output to Files: Redirection” in Chapter 2 explains <i>stdin</i>).</p><p class="s61" style="padding-top: 6pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">wget <span class="s51">Gets files from Internet web and FTP sites.</span></p><p class="s61" style="padding-top: 6pt;padding-left: 40pt;text-indent: 0pt;line-height: 168%;text-align: left;">which <span class="s51">Shows the absolute pathname of a program’s file. (Also try </span>type<span class="s51">.) </span>who <span class="s51">Lists the users who are logged in to your computer. See also </span>w<span class="s51">.</span></p><p class="s61" style="padding-left: 113pt;text-indent: -73pt;text-align: left;">xargs <span class="s51">Executes a command repeatedly with sets of arguments taken from its (</span>xargs<span class="s51">’) standard input. Often used to process a list of arguments so long that they won’t all fit on a single command line (as indicated by an error message like </span>zsh: arg list too long: grep<span class="s51">). Arguments containing spaces can cause errors; you can work around this with the </span>-0 <span class="s51">(zero) option on many versions.</span></p><p class="s61" style="padding-top: 6pt;padding-left: 113pt;text-indent: -73pt;text-align: left;">xkill                      <span class="s51">Aborts graphical programs by closing their connection to the X display server. For killing graphical programs, this can be much more convenient than using the </span>kill <span class="s51">command because the window to kill is selected interactively using the mouse.</span></p><p class="s61" style="padding-top: 6pt;padding-bottom: 4pt;padding-left: 113pt;text-indent: -73pt;text-align: left;">xterm <span class="s51">Creates a terminal window where you can use a shell. See the section “Opening a Terminal, Choosing the Shell” in Chapter 4.</span></p><p style="padding-left: 40pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="495" height="1" alt="image" src="Image_324.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="589" height="200" alt="image" src="Image_325.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s41" style="padding-top: 5pt;padding-left: 40pt;text-indent: 0pt;text-align: left;"><a name="bookmark826">A P P E N D I X B</a></p><p class="s42" style="padding-top: 9pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">■ ■ ■</p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part431.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part433.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
