<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Summary</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part42.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part44.htm">Next &gt;</a></p><h4 style="padding-left: 42pt;text-indent: 0pt;text-align: left;"><a name="bookmark53">Summary</a></h4><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 115%;text-align: left;">In this chapter, we’ve introduced the major shells by giving examples that work on all of them. A shell is a text-based interface between you and the operating system (Linux, Unix, or other systems). Shells save time by letting you perform a wide variety of operations using just a few keystrokes. You give instructions to a shell by typing commands on its command line (which comes after a shell prompt), possibly editing the commands or recalling them from a previous command line.</p><p style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">The shell runs programs for you. For detailed information about a program, read its online manual page (manpage). Most programs accept command-line options to control how they work and arguments to specify what the program should work on. You can shorten command lines by storing them in an alias; a function can store multiple command lines. Most commands are files stored in program directories like <span class="s33">/bin</span>, but some are built into the shell.</p><p style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">On Unix-type systems, files are organized into a tree of directories. To locate something in the filesystem, you specify its pathname. A pathname can be absolute (from the root directory, and starting with <span class="s33">/</span>) or relative (starting from the current directory, with no leading <span class="s33">/</span>). The <span class="s33">cd </span>command changes the shell’s current directory. To save typing, you can use wildcards, which the shell expands into one or more matching pathnames (or tells you if it can’t). You can also use completion to build pathnames interactively: type the first few characters and press Tab.</p><p style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">The shell “remembers” previous command lines. You can reuse all or parts of them with shell history and command-line editing.</p><p style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">In the next chapter, we’ll look at another strength of shells. They let you use programs as “building blocks,” together with the shells’ built-in programming features (and features you’ve seen in this chapter), to create your own customized programs. This lets you work even more quickly, and make fewer mistakes, than you might by working manually.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="589" height="200" alt="image" src="Image_053.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s41" style="padding-top: 5pt;padding-left: 40pt;text-indent: 0pt;text-align: left;"><a name="bookmark77">C H A P T E R 2</a></p><p class="s42" style="padding-top: 9pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">■ ■ ■</p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part42.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part44.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
