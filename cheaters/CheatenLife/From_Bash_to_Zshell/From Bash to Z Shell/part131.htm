<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Other Uses of History Modifiers</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part130.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part132.htm">Next &gt;</a></p><p class="s18" style="padding-left: 42pt;text-indent: 0pt;text-align: left;"><a name="bookmark257">Other Uses of History Modifiers</a></p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 115%;text-align: left;">Now, as promised, let’s look at other uses of modifiers in <span class="s33">zsh</span>. These provide a consistent syntax for manipulating strings, particularly filenames, that you can use for shell variables and file patterns as well as history references. Thus, if you followed the previous section you’ll be able to use the syntax we introduced right away. These uses of the modifier syntax don’t work with <span class="s33">bash</span>. First, you can use modifiers with variable substitution, a subject we’ll be dealing with in more detail in Chapter 12:</p><p class="s33" style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">zsh% <b>file=~/.zshrc</b></p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">zsh% <b>echo $file:t</b></p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">.zshrc</p><p class="s29" style="padding-top: 3pt;padding-left: 247pt;text-indent: 0pt;text-align: left;"><a name="bookmark276">CHAPTER 6 </a><span class="s28">■ </span>MORE AB OU T SHELL HISTOR Y <span class="s27">131</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">You can also use modifiers for filename generation, although in that case the modifier must be surrounded by parentheses:</p><p class="s33" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">zsh% <b>echo ~/.z*(:t)</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">.zcompdump .zfbkmarks .zlogout .zshenv .zshrc</p><p style="padding-top: 8pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">You need the parentheses in that example. Otherwise, without the parentheses the <span class="s33">:t </span>would just be part of the word. This syntax is part of a feature called <i>glob qualifiers</i>, which will be fully explained in the section “Glob Qualifiers in zsh” in Chapter 9.</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">The last example shows a feature of modifiers when applied to a filename pattern with more than one expansion. The modifier is applied to each element separately. This gives us a good way of extracting just the base names of a group of files. This feature also works when applied to an array containing a list of filenames; we’ll meet arrays in Chapter 12.</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: justify;">You need to be more careful about special characters—spaces, quotes, etc.—when using modifiers with variables or filename patterns. Although history itself is done so early that they don’t matter, variable and filename modifiers are handled along with normal shell expansions. Here is an example:</p><p class="s33" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">zsh% <b>foo=&#39;two words&#39;</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">zsh% <b>echo $foo:s/two\ words/oneword/</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">oneword</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">We had to quote a space in the substitution with a backslash. Without it, the substitution would see <span class="s33">$foo:s/two</span>, while <span class="s33">word/oneword/ </span>would be a different word. Alternatively, this would be a good place to use braces, which tell the shell where a parameter substitution starts and ends: <span class="s33">${foo:s/two words/oneword/} </span>would work fine.</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">In the section “Patterns” in Chapter 12 we’ll see a more powerful form of substitution on variables that works in both <span class="s33">bash </span>and <span class="s33">zsh</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part130.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part132.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
