<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Writing Output</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part349.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part351.htm">Next &gt;</a></p><p class="s35" style="padding-left: 40pt;text-indent: 0pt;text-align: left;"><a name="bookmark642">Writing Output</a></p><p style="padding-top: 5pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">Output typically is performed by the <span class="s33">echo </span>command. We’ve seen it many times before. When run, it simply writes out everything you give to it as an argument:</p><p class="s33" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">% <b>echo these are the arguments</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">these are the arguments</p><p style="padding-top: 8pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">That looks really nice and simple, doesn’t it? Unfortunately, things aren’t usually quite that simple. The trouble is that the <span class="s33">echo </span>command <i>might </i>interpret some escape sequences in its arguments. These are the same escape sequences we talk about in the sidebar “POSIX Quotes.” You can often enable or disable this behavior with the <span class="s33">-e </span>or <span class="s33">-E </span>options, respectively, but again, implementations vary. The reasons for these variations are largely historical and have to do with the old BSD and System V Unix split. The upshot is that you need to be careful when using <span class="s33">echo </span>in scripts, particularly if you are using variable expansions as the arguments to <span class="s33">echo</span>.</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">As one solution to the problem, <span class="s33">zsh </span>and <span class="s33">ksh </span>also include a very similar command named <span class="s33">print</span>. Unless you need your script to run in <span class="s33">bash </span>or an older shell, we recommend using it instead. <span class="s33">print </span>also has the advantage of having a number of interesting options that allow you to do things like print the arguments arrayed in columns and sorted.</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: justify;">The most portable way to output text is to use the <span class="s33">printf </span>command. It works very much like the C <span class="s33">printf() </span>function, so you need to provide it with a format string. For example, you can write this:</p><p class="s33" style="padding-top: 6pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">% <b>printf &#39;%s\n&#39; &#39;hello there&#39;</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">hello there</p><p style="padding-top: 8pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">Note that not all shells have <span class="s33">printf </span>as a built-in (including <span class="s33">zsh </span>4.0). It should exist as an external command, so this just means your script will be a bit slower.</p><p class="s40" style="padding-top: 3pt;padding-left: 115pt;text-indent: 0pt;text-align: center;">POSIX QUOTES</p><p class="s40" style="padding-top: 3pt;padding-left: 115pt;text-indent: 0pt;text-align: center;">POSIX QUOTES</p><p style="text-indent: 0pt;text-align: left;"/><p class="s40" style="padding-top: 3pt;padding-left: 115pt;text-indent: 0pt;text-align: center;">POSIX QUOTES</p><p class="s29" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark680"><span class="s27">324 </span></a>CHAPTER 13 <span class="s28">■ </span>SCRIPTIN G AND FUN CTIONS </p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s33" style="padding-top: 6pt;padding-left: 9pt;text-indent: 0pt;line-height: 115%;text-align: left;">In the section “Control Shell Interpretation with Quoting” in Chapter 3, we noted that there are three kinds of quoting. This was not entirely true. Newer shells offer an additional set of quote marks. We will refer to this third kind as <i>POSIX quotes </i>because they are defined by POSIX. They consist of a dollar symbol followed by single quotes.</p><p class="s33" style="padding-left: 9pt;text-indent: 0pt;line-height: 115%;text-align: justify;">POSIX quotes also behave like normal single quotes. There is one key exception, however. In POSIX quotes, you can additionally use a number of escape sequences. For example, you can use $&#39;\t&#39; to get a tab character. You can also use $&#39;\n&#39; as a nicer alternative to breaking lines. For example, you can use</p><p class="s33" style="padding-top: 7pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">% PS1=$&#39;%~\n%#&#39;</p><p class="s33" style="padding-top: 8pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">instead of</p><p class="s33" style="padding-top: 8pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">% PS1=&#39;%~</p><p class="s33" style="padding-top: 1pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">%#&#39;</p><p class="s33" style="padding-top: 8pt;padding-left: 9pt;text-indent: 0pt;line-height: 115%;text-align: left;">The available escape sequences are roughly the same as those available in strings in the C programming language.</p><p class="s33" style="padding-top: 6pt;padding-left: 9pt;text-indent: 0pt;line-height: 115%;text-align: left;">In the section “Control Shell Interpretation with Quoting” in Chapter 3, we noted that there are three kinds of quoting. This was not entirely true. Newer shells offer an additional set of quote marks. We will refer to this third kind as <i>POSIX quotes </i>because they are defined by POSIX. They consist of a dollar symbol followed by single quotes.</p><p class="s33" style="padding-left: 9pt;text-indent: 0pt;line-height: 115%;text-align: justify;">POSIX quotes also behave like normal single quotes. There is one key exception, however. In POSIX quotes, you can additionally use a number of escape sequences. For example, you can use $&#39;\t&#39; to get a tab character. You can also use $&#39;\n&#39; as a nicer alternative to breaking lines. For example, you can use</p><p class="s33" style="padding-top: 7pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">% PS1=$&#39;%~\n%#&#39;</p><p class="s33" style="padding-top: 8pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">instead of</p><p class="s33" style="padding-top: 8pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">% PS1=&#39;%~</p><p class="s33" style="padding-top: 1pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">%#&#39;</p><p class="s33" style="padding-top: 8pt;padding-left: 9pt;text-indent: 0pt;line-height: 115%;text-align: left;">The available escape sequences are roughly the same as those available in strings in the C programming language.</p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"/><p class="s33" style="padding-top: 6pt;padding-left: 9pt;text-indent: 0pt;line-height: 115%;text-align: left;">In the section “Control Shell Interpretation with Quoting” in Chapter 3, we noted that there are three kinds of quoting. This was not entirely true. Newer shells offer an additional set of quote marks. We will refer to this third kind as <i>POSIX quotes </i>because they are defined by POSIX. They consist of a dollar symbol followed by single quotes.</p><p class="s33" style="padding-left: 9pt;text-indent: 0pt;line-height: 115%;text-align: justify;">POSIX quotes also behave like normal single quotes. There is one key exception, however. In POSIX quotes, you can additionally use a number of escape sequences. For example, you can use $&#39;\t&#39; to get a tab character. You can also use $&#39;\n&#39; as a nicer alternative to breaking lines. For example, you can use</p><p class="s33" style="padding-top: 7pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">% PS1=$&#39;%~\n%#&#39;</p><p class="s33" style="padding-top: 8pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">instead of</p><p class="s33" style="padding-top: 8pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">% PS1=&#39;%~</p><p class="s33" style="padding-top: 1pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">%#&#39;</p><p class="s33" style="padding-top: 8pt;padding-left: 9pt;text-indent: 0pt;line-height: 115%;text-align: left;">The available escape sequences are roughly the same as those available in strings in the C programming language.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part349.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part351.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
