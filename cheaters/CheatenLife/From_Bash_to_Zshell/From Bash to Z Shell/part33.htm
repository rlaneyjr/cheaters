<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Shell Types and Versions</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part32.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part34.htm">Next &gt;</a></p><h4 style="padding-left: 42pt;text-indent: 0pt;text-align: left;"><a name="bookmark43">Shell Types and Versions</a></h4><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 115%;text-align: left;">There have been a lot of different Unix and Unix-like operating systems in the past 35 years, and most of them have had multiple versions. To top that, there have been several major shells—and some less-used ones, too—during that time. Unix historians stay up late nights keeping track of all those versions and the many ways that individual system administrators have configured the shells on their systems. As a user, you have tremendous flexibility—which is good once you’re experienced but can be a bit confusing at first.</p><p style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">What’s the point of this (hi-)story? First, it’s a fact of life with Unix that not all systems work in exactly the same way. In this introduction, we’ll be as generic as we can, but you should be prepared to find some differences between our examples and the way your system works. Later in the book, we’ll be more exact about how specific shell features work. Second, it helps to know something about the major shell families—so you can recognize what shell you’re using, and so you can choose another shell if you’d like to. Let’s look at them now:</p><p style="padding-top: 7pt;padding-left: 67pt;text-indent: -10pt;line-height: 115%;text-align: left;">• As Unix systems became more popular in the 1970s and 1980s, there was just one major shell: a program named <span class="s33">sh</span>, also called the Bourne shell, which was designed by Steve Bourne. It was especially good for programming (writing shell scripts), but it wasn’t easy to use interactively: for instance, it didn’t save or allow editing of previous command lines.</p><p class="s33" style="padding-top: 7pt;padding-left: 67pt;text-indent: -10pt;line-height: 115%;text-align: left;"><span class="p">• The C shell, a program named </span>csh<a href="http://www.faqs.org/faqs/unix-faq" class="a" target="_blank">, written by Bill Joy, was designed for interactive use— and also for programming, with a syntax like the C programming language. Unfortunately, the original C shell had what many users thought were bugs: quirky behavior that made programming (in particular) unpredictable. You can read more in Tom Christiansen’s famous piece, written for shell experts, called “Csh Programming Considered Harmful.” It’s available online at (among other places) </a>http://www.faqs.org/faqs/unix-faq/ shell/csh-whynot/<span class="p">.</span></p><p style="padding-top: 7pt;padding-left: 67pt;text-indent: -10pt;line-height: 114%;text-align: left;">• Later in the 1980s, the Korn shell, <span class="s33">ksh</span>, by David Korn, extended <span class="s33">sh </span>scripting and added interactive features like command history. You’ll find versions named <span class="s33">ksh88 </span>(from 1988, a version available on many commercial systems) and <span class="s33">ksh93 </span>(still actively maintained and available for free). Another shell that’s similar, but different in many places, is <span class="s33">pdksh</span>, the “public domain <span class="s33">ksh</span>.” In general, every <span class="s33">sh </span>command works on <span class="s33">ksh</span>, but there are some significant differences between the various <span class="s33">ksh</span>s.</p><p style="padding-top: 7pt;padding-left: 67pt;text-indent: -10pt;line-height: 114%;text-align: left;">• The program <span class="s33">tcsh</span>, also called the T shell, was inspired by the TENEX operating system. Written to fix problems with the original <span class="s33">csh</span>, it also has many more interactive features. We don’t encourage programming with <span class="s33">tcsh </span>because some systems don’t have it and because <span class="s33">sh</span>-type shells are generally more flexible.</p><p style="padding-top: 7pt;padding-left: 67pt;text-indent: -10pt;line-height: 115%;text-align: left;">• The Bourne-again shell, <span class="s33">bash </span>(named with a bit of punny humor), is another extended Bourne shell that’s the default shell on many Linux systems (where you’ll often find it named <span class="s33">sh </span>because it has a superset of the original Bourne syntax). Currently maintained by Chet Ramey, <span class="s33">bash </span>shares most of its extended features with <span class="s33">ksh </span>and/or <span class="s33">zsh</span>. We cover <span class="s33">bash </span>version 3 in this book.</p><p class="s29" style="padding-top: 3pt;padding-left: 258pt;text-indent: 0pt;text-align: left;"><a name="bookmark65">CHAPTER 1 </a><span class="s28">■ </span>INTRODUCTION TO SH ELLS <span class="s27">15</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 66pt;text-indent: -10pt;line-height: 115%;text-align: left;">• You’ll hear the term “POSIX shell” to describe a standardized Bourne-type shell with some features from <span class="s33">ksh </span>and <span class="s33">bash</span>. POSIX stands for Portable Operating System Interface. It’s a standard intended to help make programming and user interfaces more uniform across the various Unix-like operating systems. Another shell you may run across is <span class="s33">ash</span>, a reimplementation of the Bourne shell that’s designed to be small. And <span class="s33">rc </span>is a shell that’s somewhat like <span class="s33">sh </span>but with a significantly different design.</p><p style="padding-top: 6pt;padding-left: 66pt;text-indent: -10pt;line-height: 115%;text-align: left;">• Last, but certainly not least, is the Z shell, <span class="s33">zsh</span>. Primarily based on the Bourne-like <span class="s33">ksh</span>, it also understands a lot of C shell syntax and has a large number of other new features. Paul Falstad wrote the original Z shell; now a different group of people maintain <span class="s33">zsh </span>as an open-source project. We cover <span class="s33">zsh </span>version 4.2 in this book.</p><p style="padding-top: 7pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">Although Unix-type operating systems vary from machine to machine, the syntax of a particular shell version is about the same no matter where you find it. (You’ll also find shells on Microsoft Windows machines—in Cygwin and MKS, for instance, which we mentioned at the end of the section “Getting Started” in this chapter. Once you’ve discovered the power of a Unix shell, we bet you’ll want to use it on a Windows machine in place of the standard Windows shells named COMMAND and CMD.)</p><p style="padding-left: 58pt;text-indent: 0pt;line-height: 10pt;text-align: left;">Which shell are you using? If you aren’t sure, here are three command lines to try:</p><p class="s33" style="padding-top: 8pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">% <b>echo $0</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">zsh</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">% <b>echo $SHELL</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">/bin/zsh</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">% <b>ps -p $$</b></p><p class="s33" style="padding-top: 1pt;padding-left: 38pt;text-indent: 0pt;text-align: center;">PID  TTY                    TIME CMD</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">21309 pts/0 00:00:00 zsh</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: justify;">(If the <span class="s33">ps </span>command complains about the <span class="s33">-p</span>, omit it.) Here, all of the commands show that we’re using the Z shell, <span class="s33">zsh</span>. A shell may have more than one name, and the name the shell was called with is typically available in the parameter <span class="s33">$0</span>. (For instance, <span class="s33">zsh </span>can be invoked as <span class="s33">sh </span>or <span class="s33">ksh</span>; when it is, it will act like those shells instead of like the standard <span class="s33">zsh</span>.) There’s more about this in the section “Positional Parameters” in Chapter 13. The setting of <span class="s33">$SHELL </span>is passed from process to process as an environment variable (see the section “Passing Info to Processes with Environment Variables” in Chapter 3), so it may be wrong. The shell replaces <span class="s33">$$ </span>with the shell’s current PID (process ID number, explained in the sidebar “What’s Happening: Processes”).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part32.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part34.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
