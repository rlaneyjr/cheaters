<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Special Functions</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part361.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part363.htm">Next &gt;</a></p><p class="s35" style="padding-left: 42pt;text-indent: 0pt;text-align: left;"><a name="bookmark654">Special Functions</a></p><p class="s33" style="padding-top: 5pt;padding-left: 42pt;text-indent: 0pt;line-height: 115%;text-align: left;">zsh <span class="p">supports a number of special functions that allow you to run code in response to certain events. In concept, they are very similar to fake signals, but they happen to be implemented as functions.</span></p><p style="padding-left: 42pt;text-indent: 18pt;line-height: 115%;text-align: left;">The most basic of these functions is <span class="s33">precmd</span>, which is executed just before the prompt is printed. You can try it out like this:</p><p class="s33" style="padding-top: 7pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">zsh% <b>precmd() { print About to show the prompt...; }</b></p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;line-height: 115%;text-align: left;">About  to  show  the  prompt... zsh%</p><p class="s33" style="padding-left: 42pt;text-indent: 0pt;line-height: 115%;text-align: left;">About  to  show  the  prompt... zsh%</p><p style="padding-top: 7pt;padding-left: 42pt;text-indent: 18pt;line-height: 115%;text-align: left;">Thoroughly boring, but you get the picture. You can do pretty much anything with a func- tion, so this is very powerful. In particular, we recommend using this wherever possible instead of putting a command substitution inside the prompt itself. <span class="s33">precmd </span>is a useful place to set the variable <span class="s33">psvar </span>for use in <span class="s33">%v </span>substitutions:</p><p class="s29" style="padding-top: 3pt;padding-left: 249pt;text-indent: 0pt;text-align: left;"><a name="bookmark693">CHAPTER 13 </a><span class="s28">■ </span>SCRIPTING AND FUNCTION S <span class="s27">337</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s33" style="padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">precmd() { psvar=( &quot;$(read_thermometer)&quot; ); } PS1=&#39;%1v deg C%# &#39;</p><p style="padding-top: 7pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">This shows a hypothetical system with a command <span class="s33">read_thermometer </span>that outputs the temperature in degrees Celsius to standard output. We use <span class="s33">psvar </span>to put the result in the prompt. This keeps commands cleanly inside the function where they belong, so they don’t clutter up the prompt variable.</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">A close relative of <span class="s33">precmd </span>is <span class="s33">preexec</span>. This is a function that is run just after you’ve hit Return to execute a command line and before it’s executed. It gets the command line as an argument. You might, for example, want to parse it in some way to put it into the title bar while the command is executing.</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">The function <span class="s33">periodic </span>is run about the same time as <span class="s33">precmd </span>(just after, as it happens), but only if <span class="s33">$PERIOD </span>seconds have elapsed since the last time it was run. It allows you to implement your own custom things much along the lines of the built-in mail checking and watching of logins and logouts that we described in Chapter 7. Note that setting <span class="s33">$PERIOD </span>to 0 is pointless since you would get the same effect as <span class="s33">precmd</span>.</p><p style="padding-left: 58pt;text-indent: 0pt;line-height: 10pt;text-align: left;">Finally, the function <span class="s33">chpwd </span>is run whenever the directory changes in the shell.</p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: justify;">A common use of the <span class="s33">chpwd </span>function is to put the current directory in the window’s title bar. Each time the current directory changes, the title bar can be updated to reflect the new current directory. Let’s see how we could go about making this happen.</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">Putting messages in the title bar is something we might want to do from more than one place. Dealing with the terminal escape codes each time is not very nice, and it’s quite useful to have a separate function that does that. So let’s create one:</p><p class="s33" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">header() {</p><p class="s33" style="padding-top: 1pt;padding-left: 58pt;text-indent: -8pt;line-height: 115%;text-align: left;">case $TERM in (sun-cmd)</p><p class="s33" style="padding-left: 67pt;text-indent: 0pt;line-height: 10pt;text-align: left;">print -nP &quot;\el$*\e\\&quot;</p><p class="s33" style="padding-top: 1pt;padding-left: 58pt;text-indent: 0pt;text-align: left;">;;</p><p class="s33" style="padding-top: 1pt;padding-left: 58pt;text-indent: 0pt;text-align: left;">(*)</p><p class="s33" style="padding-top: 1pt;padding-left: 67pt;text-indent: 0pt;text-align: left;">print -nP &quot;\e]2;$*\a&quot;</p><p class="s33" style="padding-top: 1pt;padding-left: 58pt;text-indent: 0pt;text-align: left;">;;</p><p class="s33" style="padding-top: 1pt;padding-left: 38pt;text-indent: 0pt;text-align: center;">esac</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-top: 8pt;padding-left: 58pt;text-indent: 0pt;text-align: left;">It isn’t possible to know if the terminal understands the particular escape sequence, but by</p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">using a <span class="s33">case </span>statement we can choose one based on the value of <span class="s33">$TERM</span>. There are two types of terminal: the old OpenWindows <span class="s33">sun-cmd</span>, and everything else that works like <span class="s33">xterm </span>—nearly all do, even the Cygwin terminal, and more pop up with each new type of desktop, so it’s hard to keep up. But it does mean it’s unsafe to use this command if you don’t have a windowing system running; anything could happen, probably including a beep.</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 114%;text-align: left;">Note we’ve used <span class="s33">print  -nP</span>; <span class="s33">-n </span>just suppresses the final newline, and the <span class="s33">-P </span>allows the prompt escapes. This means we can treat the argument to <span class="s33">header </span>as a prompt. So, for example, <span class="s33">header  &quot;%n@%m:  %~&quot; </span>will put your username, hostname, and current directory in the title bar.</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">Putting this together, the following should update the title bar every time the current directory changes:</p><p class="s33" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">chpwd() {</p><p class="s33" style="padding-top: 1pt;padding-left: 49pt;text-indent: 0pt;text-align: left;">header &quot;%n@%m: %~&quot;</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">}</p><p class="s29" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark694"><span class="s27">338 </span></a>CHAPTER 13 <span class="s28">■ </span>SCRIPTIN G AND FUN CTIONS </p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part361.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part363.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
