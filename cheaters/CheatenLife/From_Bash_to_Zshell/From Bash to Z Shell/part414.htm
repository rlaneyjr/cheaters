<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Tag Ordering</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part413.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part415.htm">Next &gt;</a></p><p class="s35" style="padding-left: 42pt;text-indent: 0pt;text-align: left;"><a name="bookmark766">Tag Ordering</a></p><p style="padding-top: 5pt;padding-left: 42pt;text-indent: 0pt;line-height: 115%;text-align: left;">Using the <span class="s33">tag-order </span>style it is possible to specify the order in which tags are completed. The resulting behavior is similar to using the <span class="s33">ignored-patterns </span>style and relying on <span class="s33">_ignored</span></p><p style="padding-left: 42pt;text-indent: 0pt;line-height: 115%;text-align: left;">to complete the ignored matches. <span class="s33">tag-order </span>can also be used to restrict the matches being completed to those for a particular tag. All the example uses of <span class="s33">tag-order </span>in Chapter 10 do that.</p><p style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">One example use for this is when completing in array subscripts. Try the following to see why:</p><p class="s33" style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">% <b>cd $path[&lt;tab&gt;</b></p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: justify;">It nicely completes the array indices with descriptions for each element but also completes variables. The variables are there because math evaluation is used within array subscripts. The general policy is for all valid things to be completed with the onus being on users to restrict this where they find it inconvenient. In this case, it would be nice to get the variables out of the way. Using the <span class="s33">tag-order </span>style, this is as follows:</p><p class="s33" style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">zstyle &#39;:completion:*:*:-subscript-:*&#39; tag-order indexes parameters</p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">Now, if you try the same completion again, just the array indexes will be completed first. If you want variables to be completed, you have two choices. Either you type the beginning of your variable so that no array index will match or you use the <span class="s33">_next_tags </span>widget. <span class="s33">_next_tags </span>is normally bound to Ctrl-x n. Using <span class="s33">_next_tags </span>with a <span class="s33">tag-order </span>style can be a good way</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 115%;text-align: left;">of managing situations where there are many matches of different types. See the section “Ordering with File Completion” later in this chapter for example use of <span class="s33">_next_tags</span>.</p><p style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: justify;">Note that after trying completion for all the tags you list, completion for any tags not listed is then tried. You can disable this by including a single hyphen in the value of the style. So if you want variables to never be completed inside array subscripts, you can do this:</p><p class="s33" style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">zstyle &#39;:completion:*:*:-subscript-:*&#39; tag-order indexes -</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part413.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part415.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
