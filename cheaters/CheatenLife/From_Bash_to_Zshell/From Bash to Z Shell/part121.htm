<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Setting zsh Options with setopt</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part120.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part122.htm">Next &gt;</a></p><p class="s35" style="padding-left: 42pt;text-indent: 0pt;text-align: left;"><a name="bookmark233">Setting zsh Options with setopt</a></p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 115%;text-align: left;">So far we’ve seen that <span class="s33">bash </span>and <span class="s33">zsh </span>are quite similar in a lot of ways. As is often the case, however, there’s a bit more to be said about options in <span class="s33">zsh</span>. Since <span class="s33">set -o </span>and <span class="s33">set +o </span>aren’t all that memo- rable, the commands <span class="s33">setopt </span>and <span class="s33">unsetopt </span>do the same things; this is what most <span class="s33">zsh </span>users use, since you can forget about all those annoying <span class="s33">-o</span>’s and <span class="s33">+o</span>’s and just string together named options on the same command line.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 42pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="504" height="1" alt="image" src="Image_147.png"/></span></p><p class="s21" style="padding-top: 4pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">■<span class="s23">Tip </span><span class="s19">Being able to set several options at once in a natural way is a good reason for using setopt in zsh</span></p><p class="s19" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">instead of set -o. We’ll use setopt below.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 42pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="499" height="1" alt="image" src="Image_148.png"/></span></p><p class="s29" style="padding-top: 3pt;padding-left: 275pt;text-indent: 0pt;text-align: left;"><a name="bookmark247">CHAPTER 5 </a><span class="s28">■ </span>STARTING THE SHELL <span class="s27">117</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 20pt;line-height: 114%;text-align: left;">There is some freedom in <span class="s33">zsh </span>about how you spell named options. This can make options even more readable. It may not be obvious what <span class="s33">histexpiredupsfirst </span>means, but <span class="s33">Hist_Expire_Dups_First </span>is clearer. <span class="s33">zsh </span>ignores all the underscores as well as the string’s case. In other words, yet another way of writing this option is <span class="s33">hist_expire_dups_first</span>. Note that single-letter options are sensitive to case—<span class="s33">set -f </span>and <span class="s33">set -F</span>, for example, do different things.</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">To invert a <span class="s33">zsh </span>option, you can place <span class="s33">no </span>(or <span class="s33">NO</span>, or <span class="s33">No_</span>, and so on) in front of the option name. So the following two lines of code have the same effect. The second line is a rather perverse way of achieving it, however:</p><p class="s33" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">zsh% <b>setopt verify</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">zsh% <b>unsetopt noverify</b></p><p style="padding-top: 8pt;padding-left: 58pt;text-indent: 0pt;text-align: left;">Let’s start up a shell with <span class="s33">-f </span>and look at the options:</p><p class="s33" style="padding-top: 8pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">zsh% <b>zsh -f </b>zsh% <b>setopt </b>interactive monitor norcs shinstdin zle</p><p style="padding-top: 7pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: justify;">Every option not listed has its default setting. Here, four options were turned on automat- ically by the shell—all of them except <span class="s33">norcs</span>. The <span class="s33">interactive </span>means you are typing commands at the command line, rather than reading scripts; it’s the same as the <span class="s33">-i </span>option we mentioned earlier. The other three are also associated with interactive shells:</p><p style="padding-top: 7pt;padding-left: 56pt;text-indent: 0pt;text-align: left;">• <span class="s33">monitor </span>means you can do job control.</p><p style="padding-top: 8pt;padding-left: 56pt;text-indent: 0pt;text-align: left;">• <span class="s33">shinstdin </span>means the shell’s input is standard input (which it isn’t if it’s reading a script).</p><p style="padding-top: 8pt;padding-left: 56pt;text-indent: 0pt;text-align: left;">• <span class="s33">zle </span>means the <span class="s33">zsh </span>line editor is in use for editing command lines.</p><p style="padding-top: 8pt;padding-left: 40pt;text-indent: 18pt;line-height: 114%;text-align: justify;">The <span class="s33">norcs </span>corresponds to the <span class="s33">-f </span>given on the command line. By default, <span class="s33">zsh </span>sets the option <span class="s33">rcs</span>, which means it runs startup files. To show you that this option currently has a nondefault setting, <span class="s33">norcs </span>appears in the list.</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: justify;">If you prefer to see every option together with its setting, there is an option for this. Strangely, it’s a shell option, not an option to the <span class="s33">setopt </span>command; type <span class="s33">setopt ksh_option_print</span>. Then <span class="s33">zsh </span>will use the same verbose option listing as <span class="s33">ksh </span>and <span class="s33">bash</span>—it shows whether every option is on or off.</p><p class="s33" style="padding-left: 40pt;text-indent: 18pt;line-height: 114%;text-align: justify;">bash <span class="p">has a command </span>shopt <span class="p">that’s a bit like </span>setopt<span class="p">. You can turn options on with </span>shopt -s <span class="p">and turn them off with </span>shopt -u<span class="p">. The options are different from the ones you set with </span>set -o<span class="p">, although you can use </span>shopt -o <span class="p">to manipulate that other set. Unfortunately there’s no easy way of deciding which of the two sets contains the </span>bash <span class="p">option you want, apart from looking at the manual. (You can set </span>shopt <span class="p">options when starting the shell by using </span>-O <span class="p">to introduce it instead of </span>-o<span class="p">. Once the shell has been started, you must use </span>shopt<span class="p">.)</span></p><p class="s29" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark248"><span class="s27">118 </span></a>CHAPTER 5 <span class="s28">■ </span>ST ARTI NG THE SHELL </p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part120.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part122.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
