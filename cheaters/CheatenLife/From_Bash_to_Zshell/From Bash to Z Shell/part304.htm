<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Finding the Full Path to a Command in zsh</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part303.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part305.htm">Next &gt;</a></p><p class="s35" style="padding-left: 40pt;text-indent: 0pt;text-align: left;"><a name="bookmark555">Finding the Full Path to a Command in zsh</a></p><p style="padding-top: 5pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">One very common use of command substitution is to expand the full path to a program. For example:</p><p class="s33" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">% <b>echo $(which ls)</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">/bin/ls</p><p style="padding-top: 8pt;padding-left: 40pt;text-indent: 17pt;line-height: 115%;text-align: left;"><span class="s33">zsh </span>has a simple shorthand form for this: <span class="s33">=</span><i>command </i>(no parentheses this time). The <i>command </i>must live somewhere in your <span class="s33">PATH</span>. The expansion doesn’t work for shell functions, aliases, or commands built into the shell. (Old versions of <span class="s33">zsh </span>expanded aliases with the same syntax, but this was removed because it was confusing.)</p><p class="s33" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">zsh% <b>echo =ls</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">/bin/ls</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">zsh% <b>ls -l =zsh</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">-rwxr-xr-x  2 root root 1941200 Jan 30 12:16 /usr/local/bin/zsh</p><p style="padding-top: 8pt;padding-left: 58pt;text-indent: 0pt;text-align: left;">There are numerous uses for this:</p><p style="padding-top: 8pt;padding-left: 66pt;text-indent: -10pt;line-height: 115%;text-align: left;">• You need the full path to a command when you run a debugger such as <span class="s33">gdb </span>or <span class="s33">dbx </span>to follow program execution.</p><p style="padding-top: 7pt;padding-left: 56pt;text-indent: 0pt;text-align: left;">• If the command is a script, you can run a pager to examine the contents, for example</p><p class="s33" style="padding-top: 1pt;padding-left: 66pt;text-indent: 0pt;text-align: left;">less =<span class="s32">script</span><span class="p">.</span></p><p style="padding-top: 8pt;padding-left: 66pt;text-indent: -10pt;line-height: 115%;text-align: left;">• The command <span class="s33">strings </span>searches a file (typically a program) for occurrences of strings. You can run <span class="s33">strings =</span><i>prog </i>to look for strings embedded in the program <i>prog</i>. This can sometimes gives hints if you are mystified about what <i>prog </i>is doing.</p><p style="padding-top: 7pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">You can quote the <span class="s33">= </span>just like any other special character to remove its special effect. If you find this feature annoying and don’t need the special behavior, set the option <span class="s33">no_equals </span>to turn it off. A common point of conflict is that some mail programs use an initial equals sign for specifying mail folders. Fortunately, they generally accept a plus sign instead.</p><p style="padding-left: 58pt;text-indent: 0pt;line-height: 10pt;text-align: left;">Like tilde, the equals sign is only special at the start of the word.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="504" height="1" alt="image" src="Image_229.png"/></span></p><p class="s19" style="padding-top: 4pt;padding-left: 40pt;text-indent: 0pt;text-align: left;"><span class="s21">■</span><span class="s23">Caution </span>Don’t confuse =<span class="s69">command </span>with =(<span class="s69">command</span>). They have completely different effects.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="507" height="1" alt="image" src="Image_230.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part303.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part305.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
