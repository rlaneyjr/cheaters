<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Control Flow</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part338.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part340.htm">Next &gt;</a></p><p class="s35" style="padding-left: 42pt;text-indent: 0pt;text-align: left;"><a name="bookmark631">Control Flow</a></p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 115%;text-align: justify;">The shell provides us with a number of control flow statements. The most basic is the <span class="s33">if </span>state- ment, which is used to make decisions. Its full form, including the optional <span class="s33">else </span>and <span class="s33">elif </span>parts, is as follows:</p><p class="s29" style="padding-top: 3pt;padding-left: 249pt;text-indent: 0pt;text-align: left;"><a name="bookmark665">CHAPTER 13 </a><span class="s28">■ </span>SCRIPTING AND FUNCTION S <span class="s27">309</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s33" style="padding-left: 40pt;text-indent: 0pt;text-align: left;">if <span class="s32">condition</span>; then</p><p class="s32" style="padding-top: 1pt;padding-left: 49pt;text-indent: 0pt;text-align: left;">commands</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">elif <span class="s32">condition</span>; then</p><p class="s32" style="padding-top: 1pt;padding-left: 49pt;text-indent: 0pt;text-align: left;">commands</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">else</p><p class="s32" style="padding-top: 1pt;padding-left: 49pt;text-indent: 0pt;text-align: left;">commands</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">fi</p><p style="padding-top: 8pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">More than one <span class="s33">elif </span>part can be used. As we saw in the section “Building Our Script” in Chapter 2, the <i>condition </i>is really just a command with its exit status being used to indicate true or false. In fact, the condition can contain more than one command and the status of the last one is used. The Unix convention is for an exit status of zero to indicate success. So if you want to do something only if the previous command succeeded, you might write something like this:</p><p class="s33" style="padding-top: 7pt;padding-left: 49pt;text-indent: -9pt;line-height: 115%;text-align: left;">if  grep  -q  word  file;  then echo  file  contained  word</p><p class="s33" style="padding-left: 40pt;text-indent: 0pt;line-height: 10pt;text-align: left;">fi</p><p style="padding-top: 8pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">In this example, we use the exit status from the <span class="s33">grep </span>command. <span class="s33">grep </span>attempts to match a regular expression against its input. A status of zero indicates that the regular expression matched, one indicates that it didn’t, and a higher value would mean an error occurred. Only a status of zero is regarded as <i>true </i>for the purposes of conditions. The <span class="s33">-q </span>(quiet) option to <span class="s33">grep </span>here tells it not to output the matching lines. If your version of <span class="s33">grep </span>doesn’t support the <span class="s33">-q </span>option, you can always use redirection to send the output to <span class="s33">/dev/null </span>instead (see the section “Redirection” in Chapter 8).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="504" height="1" alt="image" src="Image_254.png"/></span></p><p class="s21" style="padding-top: 4pt;padding-left: 40pt;text-indent: 0pt;line-height: 118%;text-align: left;">■<span class="s23">Note </span><span class="s19">You may often see if statements where the then appears at the beginning of the following line. The shell expects the next command after the condition to be “then”. A newline is the most common way of sepa- rating two commands, so using newline as the separator is quite natural. Instead of using a newline, we use a semicolon. A semicolon is an alternative way of separating two commands in the shell. Functionally it is exactly the same as a newline. It can also be useful interactively if you want to type a couple of commands and have them run without a break in between. For example:</span></p><p class="s33" style="padding-top: 6pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">sleep 10 ; kill %1</p><p class="s19" style="padding-top: 8pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">Here the shell will run the kill command as soon as the sleep command has finished.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="504" height="1" alt="image" src="Image_255.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="toc">&nbsp;</p><div class="toc"><a class="toc0" href="part340.htm">Condition Tests</a><a class="toc0" href="part341.htm">Control Operators</a></div><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part338.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part340.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
