<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Passing Numeric Arguments to Widgets</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part380.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part382.htm">Next &gt;</a></p><p class="s35" style="padding-left: 40pt;text-indent: 0pt;text-align: left;"><a name="bookmark712">Passing Numeric Arguments to Widgets</a></p><p style="padding-top: 5pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">Many widgets that move the cursor or insert something into the command line can be repeated by passing them a number referred to as a <i>numeric argument</i>. There are two ways of passing that number to the widget. The simplest is to press Esc and then the number, then the key that executes the widget. If the number has more than one digit, you must press Esc before each digit. So, for example, to pass the number 10 to a widget you need to press Esc 1 Esc 0.</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">To see numeric arguments in action, type a command line of more than three words, then press the keys Esc 3 Esc b. If you are using the <span class="s33">emacs </span>keymap where Esc b is bound to <span class="s33">backward-word</span>, the cursor will move backward three words along the command line. Try this with some other movement commands and you’ll see that using a numeric argument to repeat the widget’s action is a common feature.</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: justify;">Numeric arguments have an effect with insert commands, too. For example, when you type a printable character the shell usually adds the character to the command line. If you type a numeric argument before it, the shell will insert it that many times instead of just once, so Esc 5 X inserts the letter <span class="s33">X </span>into the command line five times.</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">The use of the Esc key is quite clumsy with long numbers. The shell provides another way of entering numbers with a special widget, <span class="s33">universal-argument</span>. The advantage is that any string of digits after this number is treated as a complete decimal number. When the shell finds any key that isn’t a digit, it stops looking for a number. The numeric argument is applied to whatever follows the number. You should bind the widget to a key for it to be useful; for our example we’ll use the following command:</p><p class="s33" style="padding-top: 6pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">bindkey &#39;\C-xu&#39; universal-argument</p><p style="padding-top: 8pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">Now press Ctrl-x and type u40X. The shell will insert 40 <span class="s33">X </span>characters into the command line. If you don’t type a number, <span class="s33">universal-argument </span>behaves as if you typed 4; and if you type the key for <span class="s33">universal-argument </span>several times, it multiplies the argument by 4 each time. So Ctrl-x u Ctrl-x u * inserts a line of 16 stars.</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">It’s possible for the user to pass a numeric argument to a widget function in just the same way as to any other widget. Inside a widget function the numeric prefix appears in the variable <span class="s33">NUMERIC</span>. This isn’t set unless the user gives a numeric prefix. Since that’s the usual case for just about every widget, you should always handle the case of <span class="s33">NUMERIC </span>being unset. Here’s a replace- ment for <span class="s33">forward-char. </span>The expression <span class="s33">${NUMERIC:-1} </span>tests the value of <span class="s33">NUMERIC</span>; if that is not empty, it substitutes the value, else it substitutes the string after the <span class="s33">:-</span>, namely <span class="s33">1</span>:</p><p class="s33" style="padding-top: 6pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">(( CURSOR += ${NUMERIC:-1} ))</p><p style="padding-top: 8pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: justify;">It uses the fact that if there is no numeric prefix, <span class="s33">NUMERIC </span>is actually empty (and not zero, as you might have guessed); refer to the section “Alternative and Default Values” in Chapter 12 for an explanation.</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">Here’s a more flexible version of <span class="s33">backward-ten-characters</span>: if you give it a numeric argument <i>num </i>it will move <i>num </i>times 10 characters backward; otherwise it will move 10 characters backwards as before:</p><p class="s33" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">(( CURSOR -= 10 * ${NUMERIC:-1} ))</p><p class="s29" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark732"><span class="s27">354 </span></a>CHAPTER 14 <span class="s28">■ </span>WRITING EDITOR CO MMANDS </p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">If you call another widget with the <span class="s33">zle </span>command within your widget, the shell will usually pass down the existing value of <span class="s33">NUMERIC</span>. For example, a widget function containing <span class="s33">zle forward-char </span>will automatically handle numeric prefixes without your interference. Suppose you want to create a widget that skips a number of characters, then inserts a string (in the following example, a single quote) at that position. Here’s an example widget that does that:</p><p class="s33" style="padding-top: 7pt;padding-left: 50pt;text-indent: -9pt;line-height: 115%;text-align: left;">example-widget() { zle forward-char LBUFFER=$LBUFFER&quot;&#39;&quot;</p><p class="s33" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-top: 8pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">If you call that widget with a numeric argument, you will see that the cursor moves forward the</p><p style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;line-height: 115%;text-align: left;">number of characters given by the argument, then inserts a single quote. The <span class="s33">zle forward-char </span>is affected by the numeric argument, but variable assignment is not. However, that’s not always what you want—you may want your widget to handle the numeric prefix by examining <span class="s33">$NUMERIC </span>and the widget you call to see some other value entirely. The shell allows you to pass an explicit numeric value. In the following example we pass the numeric argument 10 to the widget <span class="s33">backward-char</span>:</p><p class="s33" style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">zle backward-char -n 10</p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">This is yet another version of <span class="s33">backward-ten-characters</span>. To make a widget see no numeric argument at all, use the option <span class="s33">-N</span>:</p><p class="s33" style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">zle backward-char -N</p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">This ensures that <span class="s33">backward-char </span>behaves in its default fashion—in other words, go back- ward a single character, regardless of the presence of a numeric argument in the widget that calls to <span class="s33">zle</span>. Note that the <span class="s33">-N </span>comes <i>after </i>the widget name—it won’t work anywhere else.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part380.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part382.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
