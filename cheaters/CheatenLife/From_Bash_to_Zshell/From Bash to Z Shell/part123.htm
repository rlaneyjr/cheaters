<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Files in Cygwin</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part122.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part124.htm">Next &gt;</a></p><p class="s35" style="padding-left: 42pt;text-indent: 0pt;text-align: left;"><a name="bookmark235">Files in Cygwin</a></p><p style="padding-top: 5pt;padding-left: 42pt;text-indent: 0pt;line-height: 115%;text-align: left;">The most difficult part of getting used to Cygwin is the way you specify files. Many Unix utilities, including the shells, are tied to the usual way of specifying paths with slash (<span class="s33">/</span>) characters. This is rather different from the Windows form with a drive letter and backslash (<span class="s33">\</span>) characters.</p><p style="padding-left: 42pt;text-indent: 18pt;line-height: 115%;text-align: justify;">Cygwin lets you use both Unix and Windows styles whenever possible. As a rule of thumb, if you are starting a Windows program that doesn’t support Cygwin, you should use the normal Windows form, and if you are using a Cygwin program, you should use the Unix form.</p><p style="padding-left: 42pt;text-indent: 17pt;line-height: 115%;text-align: left;">There is a utility, <span class="s33">cygpath</span>, for converting filenames between Unix and Windows. The command <span class="s33">cygpath  -w </span>converts to the Windows form, and <span class="s33">cygpath  -u </span>converts to Unix. Be careful when specifying the Windows form, since all backslashes need to be quoted to prevent the shell from removing them. Windows filenames often have spaces in, too, so it’s a good idea just to quote the whole thing:</p><p class="s33" style="padding-top: 6pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">%  <b>cygpath  -u  &#39;C:\Program  Files\Mozilla&#39;</b></p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">/cygdrive/c/Program Files/Mozilla</p><p class="s29" style="padding-top: 3pt;padding-left: 275pt;text-indent: 0pt;text-align: left;"><a name="bookmark249">CHAPTER 5 </a><span class="s28">■ </span>STARTING THE SHELL <span class="s27">119</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">Note the special notation to access drives such as <span class="s33">C: </span>from Cygwin with <span class="s33">/cygdrive/c</span>. This is handled specially by Cygwin to let any Unix-style utility refer to a file on any drive.</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">By the way, most old-style Windows paths that fit into the form of an eight-character name plus a three-character suffix are turned into lowercase by Cygwin. You can still refer to them without worrying about case sensitivity (both <span class="s33">config.sys </span>and <span class="s33">CONFIG.SYS</span>, for example). However, not all utilities know that, so it’s best to stick to lowercase.</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">You can also use the <span class="s33">mount </span>command to tell Cygwin how to map between Windows and Unix paths. If you type the name on its own, it shows you what’s already mounted, and you will see that Cygwin inserted one or more entries automatically. In particular, the Unix path <span class="s33">/ </span>refers to wherever Cygwin was installed—for example, the Windows path <span class="s33">c:\cygwin</span>. You can easily add your own mount points:</p><p class="s33" style="padding-top: 6pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">mkdir  /c mount  &#39;c:&#39;  /c</p><p style="padding-top: 7pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">Note that a directory has to exist for it to be used in this way, hence the <span class="s33">mkdir </span>command. Now <span class="s33">/c </span>points at your <span class="s33">C: </span>drive and you can use it in any command that understands Unix-style paths, including, obviously, the shells.</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">Another point to do with filenames is that Windows requires that an executable program have the suffix <span class="s33">.exe</span>. Since this isn’t necessary for Unix commands, Cygwin will automatically add the suffix if necessary. So you can refer to <span class="s33">cat </span>or <span class="s33">cat.exe</span>, and they have the same effect. If you really mean to refer to the file, not the command, you should use the full name with the suffix, since it’s only when executing a file as a program that this mapping occurs. Other types of commands, such as shell built-ins and functions, behave exactly as they normally would. In particular, when we talk about autoloaded functions, exactly the same instructions will apply to Cygwin as to other systems; no suffix is necessary.</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">A good set of commands come with Cygwin, including a compiler and commonly used utilities like Perl, but it’s not as comprehensive as a full Unix or GNU/Linux environment. So sometimes you will find there are things that don’t quite work. Most of the time, however, the biggest problem you will come across is that Cygwin programs are a bit slower than native Windows and Unix programs, because the Cygwin system is effectively doing the work of both.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part122.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part124.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
