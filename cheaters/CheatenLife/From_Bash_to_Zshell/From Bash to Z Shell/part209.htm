<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Preventing Files from Being Clobbered</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part208.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part210.htm">Next &gt;</a></p><p class="s35" style="padding-left: 40pt;text-indent: 0pt;text-align: left;"><a name="bookmark374">Preventing Files from Being Clobbered</a></p><p style="padding-top: 5pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">When we say a file is “clobbered,” we mean that new output has overwritten the existing contents of the file. Given the ease with which the shell can redirect output, this can be a real problem. Consider an output redirection:</p><p class="s33" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">%  <b>echo  &quot;****  Start  of  log  file  ****&quot;  &gt;logfile.txt</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">%  <b>./myprog  &gt;&gt;logfile.txt</b></p><p class="s29" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark400"><span class="s27">188 </span></a>CHAPTER 8 <span class="s28">■ </span>FILES AND DIRECTORIES </p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">If the file <span class="s33">logfile.txt </span>existed, it would be overwritten by the first command. In the second command we deliberately avoid overwriting the file by using the double <span class="s33">&gt; </span>to make the shell append output.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 10pt;text-align: left;">Both <span class="s33">bash </span>and <span class="s33">zsh </span>offer an option <span class="s33">noclobber </span>that you can set to stop this happening:</p><p class="s33" style="padding-top: 8pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">%  <b>echo  &quot;****  More  log  output  ****&quot;  &gt;logfile.txt</b></p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">bash: logfile.txt: cannot overwrite existing file</p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">The <span class="s33">noclobber </span>feature goes right back to the C shell, and it&#39;s been implemented in most of the new shells since then.</p><p style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">If you want to overwrite the file, you can delete or rename it, or you can use a special syntax that tells the shell you don&#39;t care whether the file already exists:</p><p class="s33" style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">%  <b>echo  &quot;****  More  log  output  ****&quot;  &gt;|logfile.txt</b></p><p style="padding-top: 8pt;padding-left: 59pt;text-indent: 0pt;line-height: 114%;text-align: left;">That “pipe” symbol isn’t a real pipe, it just combines with the <span class="s33">&gt; </span>to override <span class="s33">noclobber</span>. <span class="s33">zsh </span>tries to be clever if you set the option <span class="s33">hist_allow_clobber</span>. You’ll see what happens if you</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 115%;text-align: left;">repeat the example without the pipe symbol. <span class="s33">zsh </span>gives you the error, just as before. However, if you use the Up Arrow key to go back in the history, you’ll find the shell inserted the pipe. So if you <i>really </i>meant to clobber the file, you now just press Return and the file will be overwritten:</p><p class="s33" style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">zsh% <b>echo &quot;**** More log output ****&quot; &gt;logfile.txt</b></p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;line-height: 115%;text-align: left;">zsh: file exists: logfile.txt zsh% <b>&lt;up&gt;</b></p><p style="padding-top: 7pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">The line now turns into the following:</p><p class="s33" style="padding-top: 8pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">zsh% <b>echo &quot;**** More log output ****&quot; &gt;|logfile.txt</b></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part208.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part210.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
