<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Glossary</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part436.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part438.htm">Next &gt;</a></p><p class="s17" style="padding-top: 9pt;padding-left: 40pt;text-indent: 0pt;text-align: left;"><a name="bookmark833">Glossary</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s51" style="padding-left: 147pt;text-indent: -107pt;line-height: 109%;text-align: left;">argument These are the strings you type after a program name. Sometimes people distinguish between arguments and <i>options </i>(in the first sense of the two meanings of <i>option </i>that we describe in the glossary) to a program.</p><p class="s51" style="padding-top: 7pt;padding-left: 147pt;text-indent: -107pt;line-height: 109%;text-align: left;">array A type of shell <i>variable </i>that contains an ordered list of string values, called <i>elements </i>of the array. The shell provides syntax for you to extract or edit the individual elements.</p><p class="s51" style="padding-top: 7pt;padding-left: 147pt;text-indent: -107pt;line-height: 109%;text-align: left;">associative array A type of shell <i>variable </i>that contains a set of <i>key </i>and <i>value </i>pairs, both of which are strings. Using the key, you can extract the correspond- ing value from the associative array.</p><p class="s51" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">binding See <i>key binding</i>.</p><p class="s51" style="padding-top: 7pt;padding-left: 147pt;text-indent: -107pt;line-height: 109%;text-align: left;">buffer Any area of computer memory used for temporary storage. In particu- lar, the <i>line editor buffer </i>is the space where the shell stores the command line you are editing. In <span class="s61">zsh </span><i>editor widgets</i>, you can refer to this using the variable <span class="s61">BUFFER</span>.</p><p class="s51" style="padding-top: 7pt;padding-left: 147pt;text-indent: -107pt;line-height: 109%;text-align: left;">comment A note in a <i>shell script </i>or <i>shell function </i>for humans to read but which the shell ignores. In shells, comments start with a <span class="s61"># </span>character and continue to the end of the line.</p><p class="s51" style="padding-top: 7pt;padding-left: 147pt;text-indent: -107pt;line-height: 109%;text-align: left;">completion The process whereby the shell examines a partial word typed by the user, usually a command name or command-line argument, as the basis for a guess about what the user is attempting to type. The shell then uses that guess to provide the missing part of the word. In the simplest case, you just press Tab. The most common type of argument to complete is a filename.</p><p class="s51" style="padding-top: 7pt;padding-left: 147pt;text-indent: -107pt;line-height: 109%;text-align: left;">completion widget A <i>shell function </i>with the special purpose of telling the shell how to complete parts of a command line, and perhaps also how to process the <i>matches</i>.</p><p class="s51" style="padding-top: 7pt;padding-left: 147pt;text-indent: -107pt;line-height: 109%;text-align: left;">cursor The place on the command line where you are editing; the point at which characters you type will be placed. A cursor is usually denoted by a solid block of color or a reversed, underlined, or flashing character.</p><p class="s51" style="padding-top: 7pt;padding-left: 147pt;text-indent: -107pt;line-height: 109%;text-align: left;">Cygwin A set of programs that make Microsoft Windows look more like Unix. This is the recommended way of running <span class="s61">bash </span>or <span class="s61">zsh </span>under Windows.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s27" style="padding-top: 4pt;padding-left: 39pt;text-indent: 0pt;text-align: right;">417</p><p class="s29" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark834"><span class="s27">418 </span></a>A P P E N D I X C <span class="s28">■ </span>G LO S S A R Y</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s51" style="padding-left: 149pt;text-indent: -107pt;line-height: 109%;text-align: left;">directory                                  A container for files, which may include other directories. The same as <i>folder</i>. Executing <span class="s61">ls </span>displays the contents of the current directory.</p><p class="s51" style="padding-top: 7pt;padding-left: 149pt;text-indent: -107pt;line-height: 109%;text-align: justify;">directory stack A means for remembering the directories you’ve used most recently so you can refer to them or change back to them again without retyping the full name.</p><p class="s51" style="padding-top: 7pt;padding-left: 149pt;text-indent: -107pt;line-height: 109%;text-align: left;">editor                                        A program for altering a file interactively. Common Unix editors in- clude Emacs and <span class="s61">vi</span>, but there are many others. This term can also refer to the <i>line editor</i>, which is part of the shell.</p><p class="s51" style="padding-top: 7pt;padding-left: 149pt;text-indent: -107pt;line-height: 110%;text-align: left;">editor widget Also “editing widget.” In <span class="s61">zsh</span>, a function written to add a new ability to the line editor or completion; see also <i>widget</i>.</p><p class="s51" style="padding-top: 6pt;padding-left: 149pt;text-indent: -107pt;line-height: 109%;text-align: left;">environment Every program, even if it isn’t a shell, has a set of names, each with a string value, associated with it. These are collectively called the “environment”; the name of an individual element of the environment is an “environment variable.” This looks to the shell like any shell</p><p class="s51" style="padding-left: 149pt;text-indent: 0pt;line-height: 109%;text-align: left;"><i>variable</i>. The variables <i>exported </i>by the shell form the environment of any program started from the shell. The environment can be altered by the program itself. Different programs use different environment variables; you’ll need to consult the program’s documentation to find out what they are. The most important environment variable is <span class="s61">PATH</span>, which tells the shell and other programs where to look for commands. Sometimes we use the word “environment” more generally to refer to the entire state of the shell, including its working directory.</p><p class="s51" style="padding-top: 7pt;padding-left: 149pt;text-indent: -107pt;line-height: 109%;text-align: left;">escape The term <i>escape </i>is widely used, but we are mostly concerned with two meanings:</p><p class="s51" style="padding-left: 149pt;text-indent: 0pt;line-height: 110%;text-align: justify;">1. The <i>escape key </i>is the key probably marked Esc in the top left-hand corner of your keyboard. In the shell’s <i>line editor </i>you often press Esc before another key. The two keys form a <i>key sequence.</i></p><p class="s51" style="padding-left: 149pt;text-indent: 0pt;line-height: 109%;text-align: left;">2. In a string to be output with some form of special formatting, an <i>escape sequence </i>is a special set of characters used as shorthand for a special effect. Sometimes this is called an <i>escape </i>for short. A <i>prompt escape </i>is an example that is commonplace in shells.</p><p class="s51" style="padding-top: 6pt;padding-left: 149pt;text-indent: -107pt;line-height: 110%;text-align: left;">exec In Unix and similar systems, to <i>exec </i>a program is to replace the current- ly running program with another whose name and arguments are passed to the <span class="s61">exec </span>function. This procedure is the second part of starting a new program; see <i>fork</i>. <span class="s61">exec </span>is also the name of a shell built-in command.</p><p class="s51" style="padding-top: 6pt;padding-left: 149pt;text-indent: -107pt;line-height: 109%;text-align: left;">expansion                                Taking a command line and turning patterns, variables, and so on in- to arguments to pass down to the program; for example, turning the pattern <span class="s61">*.txt </span>into the argument list <span class="s61">chapter1.txt  chapter2.txt</span>. This is used interchangeably with the term <i>substitution</i>. There is no real difference between the two terms though some types of expansion are always associated with one or other term (e.g., <i>process substitution</i>). Where the expansion can result in more than one word, the term <i>expansion </i>is normally favored.</p><p class="s51" style="padding-top: 7pt;padding-left: 149pt;text-indent: -107pt;line-height: 109%;text-align: left;">export                                       To tell the shell to make a variable available in the <i>environment </i>of programs. For example, <span class="s61">export  PAGER=less </span>allows other programs to see the variable <span class="s61">PAGER </span>with the value <span class="s61">less</span>.</p><p class="s29" style="padding-top: 3pt;padding-left: 317pt;text-indent: 0pt;text-align: left;"><a name="bookmark835">APPENDIX C </a><span class="s28">■ </span>GLOSSARY <span class="s27">419</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s51" style="padding-left: 147pt;text-indent: -107pt;line-height: 109%;text-align: left;">filesystem The complete set of files and directories on your system. Anything you can specify using names in the form <span class="s61">/usr/bin/zsh</span>.</p><p class="s51" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">folder A common name in Windows and other GUIs for a <i>directory</i>.</p><p class="s51" style="padding-top: 7pt;padding-left: 147pt;text-indent: -107pt;line-height: 109%;text-align: justify;">fork Forking creates a new <i>process </i>by making a copy of the current process (with some small differences). Often, the newly forked process will start doing a completely different task by <i>execing </i>another program. This is the normal way of starting a new program in Unix.</p><p class="s51" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">function See <i>shell function</i>.</p><p class="s51" style="padding-top: 7pt;padding-left: 147pt;text-indent: -107pt;line-height: 109%;text-align: left;">function keys The set of keys marked <i>F1</i>, <i>F2</i>, and so on, at the top of the keyboard. You can use these for <i>key bindings</i>. You can also use many other special keys such as the ones marked Insert, Home, and so on.</p><p class="s51" style="padding-top: 7pt;padding-left: 147pt;text-indent: -107pt;line-height: 110%;text-align: left;">glob qualifier In <span class="s61">zsh</span>, an expression in parentheses after a filename pattern that tells the shell to restrict the files matched to certain types of file.</p><p class="s51" style="padding-top: 6pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">globbing <i>Unix </i>slang for expanding patterns on the command line into filenames.</p><p class="s51" style="padding-left: 147pt;text-indent: 0pt;text-align: left;">The most common globbing pattern is the <i>wildcard </i><span class="s61">*</span>.</p><p class="s51" style="padding-top: 8pt;padding-left: 147pt;text-indent: -107pt;line-height: 109%;text-align: left;">GNU Recursive acronym for GNU’s Not Unix, and a commonly used term when referring to the Free Software Foundation’s GNU Project. GNU software includes free tools provided by the Free Software Foundation, covering almost all the features you need to perform basic tasks.</p><p class="s51" style="padding-left: 147pt;text-indent: 0pt;line-height: 109%;text-align: left;">The tools are often supplied with <i>Linux</i>, but are also available for Windows (as the <i>Cygwin </i>tools) and, despite the name, for many <i>Unix variants</i>, too.</p><p class="s51" style="padding-top: 7pt;padding-left: 147pt;text-indent: -107pt;line-height: 109%;text-align: left;">grep A search program that is so often used in <i>Unix </i>that it has become a verb meaning “to search a set of file files for a matching pattern.” <span class="s61">grep </span>originally came from “global regular expression print.”</p><p class="s51" style="padding-top: 7pt;padding-left: 147pt;text-indent: -107pt;line-height: 109%;text-align: left;">GUI Graphical user interface, a means of executing commands with the mouse and menus. The primary alternative to the command line.</p><p class="s51" style="padding-top: 7pt;padding-left: 147pt;text-indent: -107pt;line-height: 109%;text-align: left;">hard link If you create a hard link to a file, you are effectively giving it another name; the original name and the hard link behave in exactly the same way.</p><p class="s51" style="padding-top: 7pt;padding-left: 147pt;text-indent: -107pt;line-height: 109%;text-align: left;">history The set of previously executed commands. The shell remembers these and their order for you to execute or edit them again.</p><p class="s51" style="padding-top: 7pt;padding-left: 147pt;text-indent: -107pt;line-height: 109%;text-align: left;">interactive An <i>interactive shell </i>is one that shows you a <i>prompt </i>and reads your commands, in contrast to a shell that is executing a <i>script</i>.</p><p class="s51" style="padding-top: 7pt;padding-left: 147pt;text-indent: -107pt;line-height: 109%;text-align: justify;">job A task as the shell sees it: a set of programs running together which can be manipulated in one go using <i>job control </i>commands such as <span class="s61">kill</span>, <span class="s61">bg</span>, and <span class="s61">fg</span>. A job may be a simple process, or a pipeline.</p><p class="s51" style="padding-left: 147pt;text-indent: 0pt;text-align: left;">Compare <i>pipeline </i>and <i>process</i>.</p><p class="s51" style="padding-top: 7pt;padding-left: 147pt;text-indent: -107pt;line-height: 109%;text-align: left;">key binding Associating a set of keys or <i>keystrokes </i>with an editor command. For example, the left cursor key is usually bound to an editor command to move one character to the left on the command line. Some keys are bound by default, but you can customize the bindings.</p><p class="s29" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark836"><span class="s27">420 </span></a>APPENDIX C <span class="s28">■ </span>GLOSSARY </p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s51" style="padding-left: 149pt;text-indent: -107pt;line-height: 109%;text-align: left;">keystroke A set of keys you press at once for a particular effect. For example, holding down the Ctrl key and pressing <span class="s61">a </span>gives the keystroke Ctrl-a.</p><p class="s51" style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">kill <i>Unix </i>jargon: to terminate a program before it has finished running.</p><p class="s51" style="padding-left: 149pt;text-indent: 0pt;text-align: left;"><span class="s61">kill </span>is also a shell command that can send any <i>signal </i>to a program.</p><p class="s51" style="padding-top: 8pt;padding-left: 149pt;text-indent: -107pt;line-height: 109%;text-align: left;">line editor A modern shell gives you a lot of ways to move around and change the command line with <i>keystrokes</i>. Taken together, these capabilities form the <i>line editor</i>. Often, this behaves a bit like an <i>editor </i>program, but it is part of the shell.</p><p class="s51" style="padding-top: 7pt;padding-left: 149pt;text-indent: -107pt;line-height: 109%;text-align: left;">link An entry in a the filesystem that refers to another file. Either a <i>hard link </i>or a <i>soft link</i>.</p><p class="s51" style="padding-top: 7pt;padding-left: 149pt;text-indent: -107pt;line-height: 109%;text-align: left;">Linux A free version of the Unix operating system. Most Linux systems are based on <i>GNU </i>programs.</p><p class="s51" style="padding-top: 7pt;padding-left: 149pt;text-indent: -107pt;line-height: 109%;text-align: left;">matches In the context of completion, the generated words that are offered as possible completions<span class="s14">.</span></p><p class="s51" style="padding-top: 7pt;padding-left: 149pt;text-indent: -107pt;line-height: 109%;text-align: left;">modifier A special key that is usually pressed and held down while another key is pressed. The Shift and Ctrl keys are examples of modifiers. When discussing the shell, we use the word to describe a way of altering command line arguments (for example, removing the directory part of a filename) that is described in Chapter 6.</p><p class="s51" style="padding-top: 7pt;padding-left: 149pt;text-indent: -107pt;line-height: 109%;text-align: left;">operating system The software responsible for the control of hardware and system re- sources such as the CPU, memory, and disk storage. It provides various core services to application programs.</p><p class="s51" style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">option The term <i>option </i>has two meanings:</p><p class="s51" style="padding-left: 149pt;text-indent: 0pt;line-height: 109%;text-align: justify;">1. A special argument to a command to change its behavior. In Unix, these options often begin with a hyphen. For example, in <span class="s61">ls -l</span>, <span class="s61">-l </span>is an option to the command <span class="s61">ls</span>.</p><p class="s51" style="padding-left: 149pt;text-indent: 0pt;line-height: 109%;text-align: justify;">2. A shell <i>option </i>is a way of altering the shell’s behavior. Shell options don’t have values, unlike <i>variables</i>, but are either on or off.</p><p class="s51" style="padding-top: 7pt;padding-left: 149pt;text-indent: -107pt;line-height: 110%;text-align: left;">pager A program such as <span class="s61">pg</span>, <span class="s61">more</span>, or <span class="s61">less </span>that can be used to view a file or the output of another command one screen (or <i>page</i>) at a time.</p><p class="s51" style="padding-top: 6pt;padding-left: 149pt;text-indent: -107pt;line-height: 109%;text-align: left;">parameter The word “parameter” is often used to refer to what we have called <i>variables </i>in this book. The <span class="s61">bash </span>and <span class="s61">zsh </span>manuals in particular use this term. In this book, we have limited the word to use in the con- text of the positional parameters (those accessed with <span class="s61">$1</span>, <span class="s61">$2</span>, <span class="s61">$3</span>, ...).</p><p class="s51" style="padding-top: 7pt;padding-left: 149pt;text-indent: -107pt;line-height: 109%;text-align: justify;">pipe A way of allowing one process to send its output to the input of an- other process. In the shell, you create pipes between commands by putting the character <span class="s61">| </span>between them.</p><p class="s51" style="padding-top: 7pt;padding-left: 149pt;text-indent: -107pt;line-height: 109%;text-align: left;">pipeline A set of processes connected by a pipe, the output of one process feeding into the input of a next. This gives a very flexible way of massag- ing output. You can recognize a pipeline by a list of commands, each separated by the character <span class="s61">|</span>. Because of the name, people some- times refer to a set of processes involving pipelines as “plumbing.”</p><p class="s29" style="padding-top: 3pt;padding-left: 317pt;text-indent: 0pt;text-align: left;"><a name="bookmark837">APPENDIX C </a><span class="s28">■ </span>GLOSSARY <span class="s27">421</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s51" style="padding-left: 147pt;text-indent: -107pt;line-height: 109%;text-align: left;">process An instance of a single program with its own number (process ID, or PID); the fundamental unit of resources such as memory. Complicated programs may actually consist of multiple interacting processes performing slightly different tasks. Any program can generate new processes, which are called <i>child processes</i>. Compare <i>job</i>.</p><p class="s51" style="padding-top: 7pt;padding-left: 147pt;text-indent: -107pt;line-height: 109%;text-align: left;">prompt The characters that appear at the start of the line when you’re about to type a command. In <span class="s61">zsh</span>, you can also make a prompt appear on the right-hand side. Prompts can contain <i>prompt escapes</i>.</p><p class="s51" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">prompt escape Shorthand for making some special text appear in a <i>prompt</i>. For</p><p class="s51" style="padding-left: 147pt;text-indent: 0pt;line-height: 110%;text-align: left;">example, <span class="s61">\u </span>in <span class="s61">bash </span>and <span class="s61">%n </span>in <span class="s61">zsh </span>are prompt escapes that make the name of the user appear in the prompt.</p><p class="s51" style="padding-top: 6pt;padding-left: 147pt;text-indent: -107pt;line-height: 109%;text-align: left;">quote You <i>quote </i>text to prevent special characters such as white space, star, or question mark from being interpreted by the shell. The normal quotation characters are <span class="s61">&quot; </span>and <span class="s61">&#39; </span>for blocks of text and <span class="s61">\ </span>for single characters. The backquote symbol <span class="s61">` </span>has a special effect. See the main text for more explanation.</p><p class="s51" style="padding-top: 7pt;padding-left: 147pt;text-indent: -107pt;line-height: 110%;text-align: left;">readline The GNU library that supplies the <i>line editor </i>used in many programs, but in this book most notably in <span class="s61">bash</span>. You can configure it from within the shell.</p><p class="s51" style="padding-top: 6pt;padding-left: 147pt;text-indent: -107pt;line-height: 109%;text-align: left;">redirection Making the input of a command come from a specified source, or the output of a command go to a specified destination. If you are editing at a <i>terminal</i>, redirection is often used to make input come from a file or output go to a file for a single command. For example,</p><p class="s61" style="padding-left: 147pt;text-indent: 0pt;line-height: 110%;text-align: left;">echo MESSAGE &gt;msg <span class="s51">outputs the word </span>MESSAGE <span class="s51">and a newline to the file </span>msg<span class="s51">.</span></p><p class="s51" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">root See <i>superuser</i>.</p><p class="s51" style="padding-top: 7pt;padding-left: 147pt;text-indent: -107pt;line-height: 109%;text-align: left;">root directory The top directory of the <i>filesystem</i>. All other directories are subdirec- tories of it. You can refer to it with a single forward slash (<span class="s61">/</span>).</p><p class="s51" style="padding-top: 7pt;padding-left: 147pt;text-indent: -107pt;line-height: 110%;text-align: left;">scalar The simplest type of data handled by the shell. A scalar is either a number (such as 7) or a character string (such as “hello”). A <i>scalar variable </i>can be used to hold a scalar value.</p><p class="s51" style="padding-top: 6pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">script See <i>shell script</i>.</p><p class="s51" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">shell function Often just called a “function,” if that is unambiguous. A (usually)</p><p class="s51" style="padding-left: 147pt;text-indent: 0pt;line-height: 109%;text-align: left;">short program written in shell programming language. Unlike a script, it runs in the current shell, so it can change the environment of the shell itself. A simple function definition looks like</p><p class="s61" style="padding-left: 147pt;text-indent: 0pt;line-height: 109%;text-align: left;">fn() { echo I am a function; }<span class="s51">. You execute it by typing the name, </span>fn<span class="s51">.</span></p><p class="s51" style="padding-top: 7pt;padding-left: 147pt;text-indent: -107pt;line-height: 109%;text-align: left;">shell script A program written in the shell programming language. A new shell is started to run every script. Compare <i>shell function</i>. Scripts can be written in many interpreted languages other than shells, such as Perl, Python, and TCL. “Interpreted” means the program is read and exe- cuted directly from the script, instead of being compiled into another form first.</p><p class="s29" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark838"><span class="s27">422 </span></a>APPENDIX C <span class="s28">■ </span>GLOSSARY </p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s51" style="padding-left: 149pt;text-indent: -107pt;line-height: 109%;text-align: left;">signal A simple way of communicating from one program to another, or from the <i>operating system </i>to a program, to tell it that something has happened, such as a child program has finished, or to tell it to do something, such as exit immediately. If the program is a shell, it may run a <i>trap </i>at that point. Counterintuitively, you send a signal from the shell to another program using the <span class="s61">kill </span>command, even if you are not <i>killing </i>the program.</p><p class="s51" style="padding-top: 7pt;padding-left: 149pt;text-indent: -107pt;line-height: 109%;text-align: left;">soft link A pointer to a file or directory. A soft link is an entry in a directory that only contains a note saying where the real file is. However, the <i>operating system </i>knows about this feature: most commands that read or write the soft link will read or write what the link points to.</p><p class="s51" style="padding-top: 7pt;padding-left: 149pt;text-indent: -107pt;line-height: 110%;text-align: left;">source When used as a verb, this refers to executing the <span class="s61">source </span>or dot (<span class="s61">.</span>) built-in to run the commands that are contained in a file as if they were typed by the user.</p><p class="s51" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">spawn Another word for <i>fork </i>when used to start a new program.</p><p class="s51" style="padding-top: 7pt;padding-left: 149pt;text-indent: -107pt;line-height: 109%;text-align: left;">startup file One of various files that the shell reads when the shell begins run- ning. The shell then executes the commands in the file. You use startup files to customize the shell.</p><p class="s51" style="padding-top: 7pt;padding-left: 149pt;text-indent: -107pt;line-height: 109%;text-align: left;">style In <span class="s61">zsh</span>, the style mechanism is a flexible way of configuring shell add- ons that use functions, such as the completion system and editor widgets. Unlike variables they can be different in different contexts and unlike shell options they can take values. The mechanism is based on the command <span class="s61">zstyle</span>.</p><p class="s51" style="padding-top: 7pt;padding-left: 149pt;text-indent: -107pt;line-height: 109%;text-align: left;">subdirectory A <i>directory </i>inside another directory. When you run <span class="s61">ls -F</span>, subdirectories are the files marked with a <span class="s61">/</span>.</p><p class="s51" style="padding-top: 7pt;padding-left: 149pt;text-indent: -107pt;line-height: 109%;text-align: left;">subscript With array references, an index appears inside brackets after the name of the array. What appears inside these brackets, which can be more than a single index, is often referred to as an array subscript.</p><p class="s51" style="padding-top: 7pt;padding-left: 149pt;text-indent: -107pt;line-height: 109%;text-align: left;">subshell A child process (see <i>process</i>) of the shell. More specifically, it is a copy of the shell created by <i>forking </i>it. This is used to run code which doesn&#39;t affect the parent shell. You can start a subshell by putting a command in parentheses.</p><p class="s51" style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">substitution See <i>expansion</i>.</p><p class="s51" style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">superuser Every <i>Unix </i>computer has a special user called <span class="s61">root </span>who has extra</p><p class="s51" style="padding-top: 1pt;padding-left: 149pt;text-indent: 0pt;line-height: 109%;text-align: left;">powers. The superuser can read all files on the system, no matter the permissions. Many tasks performed by the <i>operating system </i>must be done by the superuser, but it is generally dangerous to do normal work as the superuser because it’s much easier to damage important files or <i>kill </i>important programs.</p><p class="s51" style="padding-top: 7pt;padding-left: 149pt;text-indent: -107pt;line-height: 109%;text-align: left;">suspend Stop a program temporarily from executing. The usual way of doing this is to press Ctrl-z when a program is running, or from the shell <span class="s61">kill -STOP </span><i>pid</i>, where <i>pid </i>is the <i>process </i>ID.</p><p class="s29" style="padding-top: 3pt;padding-left: 317pt;text-indent: 0pt;text-align: left;"><a name="bookmark839">APPENDIX C </a><span class="s28">■ </span>GLOSSARY <span class="s27">423</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s51" style="padding-left: 147pt;text-indent: -107pt;line-height: 109%;text-align: left;">terminal The area of the computer screen where you type commands and where the replies appear. On modern computers, this is nearly al- ways a window on a graphical windowing system called a <i>terminal emulator</i>. In Unix-speak, people sometimes talk about a <i>tty</i>, for tele- type, the forerunner of the terminal. In Windows-speak, people often talk about a <i>command prompt </i>window.</p><p class="s51" style="padding-top: 7pt;padding-left: 147pt;text-indent: -107pt;line-height: 109%;text-align: left;">trap A shell command or a list of shell commands that you set up and which is run when something special happens in the shell, for example a shell is about to exit, or it detects that the size of the <i>terminal </i>window has changed. Most traps are associated with a <i>signal</i>; you can also use a trap to tell the shell to ignore some signals.</p><p class="s51" style="padding-top: 7pt;padding-left: 147pt;text-indent: -107pt;line-height: 109%;text-align: left;">Unix A powerful family of <i>operating systems</i>. Very often used to refer to the set of programs normally supplied with the operating system, too, as in “<span class="s61">ls </span>is a Unix command.” There are lots of slightly different versions of Unix; some of the most common are BSD (including FreeBSD and NetBSD), Solaris (or SunOS), AIX, HP-UX, IRIX, and Digital Unix. Unix inspired <i>Linux</i>, though it was actually written separately; in this book, we are often lax and refer to Unix when we mean anything similar.</p><p class="s51" style="padding-top: 7pt;padding-left: 147pt;text-indent: -107pt;line-height: 109%;text-align: left;">variable A named object used to remember a value. The command <span class="s61">name=&#39;Greg Arious&#39; </span>sets the variable <span class="s61">name </span>to the string <span class="s61">Greg Arious</span>. Later, you can use the form <span class="s61">$name </span>to insert the string <span class="s61">Greg Arious </span>into a command line.</p><p class="s51" style="padding-top: 7pt;padding-left: 147pt;text-indent: -107pt;line-height: 110%;text-align: left;">widget Used fairly widely for a some element of a user interface composed out of smaller parts. In <span class="s61">zsh</span>, and more widely in this book, a shell function that implements a feature for the line editor or for comple- tion, allowing you to add new commands of your own.</p><p class="s51" style="padding-top: 6pt;padding-left: 147pt;text-indent: -107pt;line-height: 110%;text-align: left;">wildcard Sometimes used to refer to the character <span class="s61">* </span>when used as a pattern to match all characters and the character <span class="s61">? </span>when used as a pattern to match any single character.</p><p class="s51" style="padding-top: 6pt;padding-left: 147pt;text-indent: -107pt;line-height: 109%;text-align: left;">zle The <span class="s61">zsh </span><i>line editor</i>, the part of the shell that allows you to edit the command line with keystrokes. It corresponds to <i>readline </i>in <span class="s61">bash</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="504" height="1" alt="image" src="Image_327.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="589" height="137" alt="image" src="Image_328.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part436.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part438.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
