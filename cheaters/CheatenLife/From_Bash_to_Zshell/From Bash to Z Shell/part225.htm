<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Extended Globbing</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part224.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part226.htm">Next &gt;</a></p><p class="s35" style="padding-left: 42pt;text-indent: 0pt;text-align: left;"><a name="bookmark415">Extended Globbing</a></p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 115%;text-align: left;">If you find that you need some more sophisticated forms of pattern matching, you can turn on the <span class="s33">extglob </span>option. That makes available a set of patterns all with the same form: a special character, followed by an expression in parentheses. The expression in parentheses can consist of vertical bars (or pipe symbols), which in this context separate pattern alternatives. The presence of the surrounding pattern delimiters stops the shell from recognizing the bar as a real pipe, since it’s meaningless in the middle of a pattern. This style of extended globbing comes origi- nally from the Korn shell.</p><p style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: justify;">The simplest form is <span class="s33">@(</span><i>expr</i><span class="s33">)</span>, which matches one of the alternative patterns found in the expression <i>expr</i>. Let’s consider an example:</p><p class="s33" style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">$  <b>echo  *.@(out|txt)</b></p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">ham.txt  msg.out  msg.txt  spam.txt</p><p class="s29" style="padding-top: 3pt;padding-left: 280pt;text-indent: 0pt;text-align: left;">CHAPTER 9 <span class="s28">■ </span>PATTER N MATCHIN G <span class="s27">209</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">In this case the alternatives were simple strings, but they could be patterns, too. An advantage of the parentheses is that they make it easy to bury patterns recursively inside others. In the following example, we look for files starting with <span class="s33">OUTPUT</span>. We then look for two possible endings: first, files that end with <span class="s33">.old </span>where the previous part of the name is either <span class="s33">.txt </span>or <span class="s33">.log</span>; second, files that end with <span class="s33">.bak</span>. We’ve wrapped the long line in the output that resulted:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:37.6991pt" cellspacing="0"><tr style="height:12pt"><td style="width:74pt"><p class="s49" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">% <b>ls</b></p></td><td style="width:264pt" colspan="4"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:12pt"><td style="width:74pt"><p class="s49" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">OUTPUT1.bak</p></td><td style="width:77pt"><p class="s49" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">OUTPUT1.txt</p></td><td style="width:76pt"><p class="s49" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">OUTPUT2.log</p></td><td style="width:77pt"><p class="s49" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">OUTPUT2.txt.old</p></td><td style="width:34pt"><p class="s49" style="padding-left: 3pt;padding-right: 1pt;text-indent: 0pt;text-align: center;">prog.c</p></td></tr><tr style="height:12pt"><td style="width:74pt"><p class="s49" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">OUTPUT1.log</p></td><td style="width:77pt"><p class="s49" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">OUTPUT1.txt.old</p></td><td style="width:76pt"><p class="s49" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">OUTPUT2.log.old</p></td><td style="width:77pt"><p class="s49" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">OUTPUT.bak</p></td><td style="width:34pt"><p class="s49" style="padding-left: 3pt;padding-right: 1pt;text-indent: 0pt;text-align: center;">prog.h</p></td></tr><tr style="height:11pt"><td style="width:74pt"><p class="s49" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">OUTPUT1.log.old</p></td><td style="width:77pt"><p class="s49" style="padding-left: 4pt;text-indent: 0pt;line-height: 10pt;text-align: left;">OUTPUT2.bak</p></td><td style="width:76pt"><p class="s49" style="padding-left: 4pt;text-indent: 0pt;line-height: 10pt;text-align: left;">OUTPUT2.txt</p></td><td style="width:77pt"><p class="s49" style="padding-left: 4pt;text-indent: 0pt;line-height: 10pt;text-align: left;">prog</p></td><td style="width:34pt"><p class="s49" style="padding-left: 3pt;padding-right: 1pt;text-indent: 0pt;line-height: 10pt;text-align: center;">prog.o</p></td></tr></table><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">% <b>echo OUTPUT*.@(@(txt|log).old|bak)</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">OUTPUT1.bak OUTPUT1.log.old OUTPUT1.txt.old OUTPUT2.bak OUTPUT2.log.old OUTPUT2.txt.old OUTPUT.bak</p><p style="padding-top: 7pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">If you’re familiar with extended regular expressions, you might notice a resemblance to the patterns used by the command <span class="s33">egrep</span>, an enhanced version of <span class="s33">grep</span>. The difference is that <span class="s33">bash </span>has <span class="s33">@ </span>in front. The shell has other uses for parentheses, and the <span class="s33">@ </span>makes it clear which is meant. A list of syntactical variations of this form follows. In each case, <i>expr </i>can be a set of alternatives separated by a bar, but in all apart from the first it’s also useful to have a single string or pattern with no bar:</p><p style="padding-top: 7pt;padding-left: 56pt;text-indent: 0pt;text-align: left;">•    <span class="s33">@(</span><i>expr</i><span class="s33">) </span>matches exactly one of the alternatives in <i>expr</i>.</p><p style="padding-top: 8pt;padding-left: 56pt;text-indent: 0pt;text-align: left;">• <span class="s33">?(</span><i>expr</i><span class="s33">) </span>matches either nothing or one of the alternatives in <i>expr</i>.</p><p style="padding-top: 8pt;padding-left: 56pt;text-indent: 0pt;text-align: left;">• <span class="s33">*(</span><i>expr</i><span class="s33">) </span>matches any number of repetitions, including zero, of the patterns in <i>expr</i>.</p><p style="padding-top: 8pt;padding-left: 56pt;text-indent: 0pt;text-align: left;">• <span class="s33">+(</span><i>expr</i><span class="s33">) </span>matches one or more repetitions of the patterns in <i>expr</i>.</p><p style="padding-top: 8pt;padding-left: 56pt;text-indent: 0pt;text-align: left;">• <span class="s33">!(</span><i>expr</i><span class="s33">) </span>matches anything except the patterns in <i>expr</i>.</p><p style="padding-top: 8pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">You may notice that the code letters <span class="s33">* </span>and <span class="s33">? </span>in the list above have similar effects to the same letters when used in regular expressions, as we described in the sidebar “Globbing and Regular Expressions.” Here are some examples. We use fixed strings for clarity, but the expressions can contain patterns as complicated as you like:</p><p class="s33" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">$ <b>ls</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">a aone aonetwo aonetwoonetwo</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">$ <b>echo a@(one|two)</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">aone</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">$ <b>echo a*(one|two)</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">a aone aonetwo aonetwoonetwo</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">$ <b>echo a+(one|two)</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">aone aonetwo aonetwoonetwo</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">$ <b>echo a?(one|two)</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">a aone</p><p class="s29" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark458"><span class="s27">210 </span></a>CHAPTER 9 <span class="s28">■ </span>PATTER N MATCHING </p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 42pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="504" height="1" alt="image" src="Image_195.png"/></span></p><p class="s21" style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;line-height: 114%;text-align: justify;">■<span class="s23">Tip </span><span class="s19">You can’t use slashes for directory separators inside parentheses. That’s because pattern matching is only done on files within each directory. There’s nothing to stop you from using patterns within more than one chunk of a filename, however, such as /@(usr|var)/@(spool|lib)/*.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 42pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="504" height="1" alt="image" src="Image_196.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part224.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part226.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
