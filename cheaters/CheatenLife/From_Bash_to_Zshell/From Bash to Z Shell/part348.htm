<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Porting Scripts</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part347.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part349.htm">Next &gt;</a></p><p class="s35" style="padding-left: 40pt;text-indent: 0pt;text-align: left;"><a name="bookmark640">Porting Scripts</a></p><p style="padding-top: 5pt;padding-left: 40pt;text-indent: 0pt;line-height: 114%;text-align: left;">As you may have noticed, <span class="s33">zsh </span>offers a number of options that make it behave in ways more similar to other shells. This can be very useful if you have, for example, a <span class="s33">ksh </span>script that you want to run with <span class="s33">zsh</span>. <span class="s33">bash </span>doesn’t have any equivalent options, but like many GNU programs, it does look at the <span class="s33">POSIXLY_CORRECT </span>environment variable. If it is set, it will alter a few minor things to achieve better compliance with the POSIX specification. You can also use <span class="s33">set -o posix </span>or invoke <span class="s33">bash </span>with the <span class="s33">--posix </span>option to achieve the same effect.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="226" height="1" alt="image" src="Image_268.png"/></span></p><p class="s14" style="padding-top: 5pt;padding-left: 52pt;text-indent: -12pt;line-height: 108%;text-align: left;">2. <span class="s29">ksh </span>is generally a good choice for scripts: it is more widely available on commercial Unix systems and scripting is perhaps where it is strongest.</p><p class="s29" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark678"><span class="s27">322 </span></a>CHAPTER 13 <span class="s28">■ </span>SCRIPTIN G AND FUN CTIONS </p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 42pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="504" height="1" alt="image" src="Image_269.png"/></span></p><p class="s21" style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;line-height: 115%;text-align: justify;">■<span class="s23">Note </span><span class="s19">The POSIX standard specifies the behavior of common components of Unix-like operating systems. This includes requirements for the shell’s features and behavior. If you want to ensure that your script runs in all the mainstream shell variants, the easiest way is to restrict yourself to using the features standardized in the POSIX specification.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 42pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="507" height="1" alt="image" src="Image_270.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 18pt;line-height: 114%;text-align: left;">In <span class="s33">zsh</span>, you’re saved the hassle of determining the ideal set of options in order to emulate a particular shell. If you install <span class="s33">zsh </span>under the name of a different shell, such as “ksh” or “sh”</p><p style="padding-left: 42pt;text-indent: 0pt;line-height: 115%;text-align: left;">(or use a link), it will set the options to best emulate that shell. You can also use the <span class="s33">emulate </span>command to specify another shell to emulate after <span class="s33">zsh </span>has already started. Don’t expect the emulation to be perfect, however, especially the C shell emulation—<span class="s33">zsh </span>is really too unlike the C shell to do a half decent job of emulating it. By default, only those options likely to affect portability of scripts and functions are altered.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 42pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="504" height="1" alt="image" src="Image_271.png"/></span></p><p class="s21" style="padding-top: 4pt;padding-left: 42pt;text-indent: 0pt;line-height: 111%;text-align: left;">■<span class="s23">Tip </span><span class="s19">Passing the -R option to emulate will additionally change options affecting the interactive environment.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 42pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="504" height="1" alt="image" src="Image_272.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 42pt;text-indent: 18pt;line-height: 115%;text-align: left;">When writing shell functions, it is often convenient to use features that are dependent upon specific options. Once features that you have enabled in your own startup file become familiar, it is only natural to want to use them from shell functions too. If you then give a copy of your function to someone else they may find it doesn’t work from their setup. By using <span class="s33">emulate </span>with the <span class="s33">-L </span>option, it is possible to make functions more resilient. With the <span class="s33">-L </span>option, all options and traps (covered in the section “Traps and Special Functions” later in this chapter) will be restored after the function exits. It is, therefore, not uncommon to use the following line at the top of a function:</p><p class="s33" style="padding-top: 7pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">emulate -L zsh</p><p style="padding-top: 8pt;padding-left: 42pt;text-indent: 18pt;line-height: 115%;text-align: left;">In order to effect local changes to options, what this actually does is turn the <span class="s33">local_options </span>option on. If you only want to change a few particular options in your function, you can set <span class="s33">local_options </span>directly. For example, if you want to use extended globbing in your function, you might start your function with the following:</p><p class="s33" style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">setopt local_options extended_glob</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part347.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part349.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
