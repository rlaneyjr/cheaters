<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Ternary Expressions</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part164.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part166.htm">Next &gt;</a></p><p class="s18" style="padding-left: 40pt;text-indent: 0pt;text-align: left;"><a name="bookmark306">Ternary Expressions</a></p><p style="padding-top: 5pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;"><span class="s33">zsh </span>supports a so-called <i>ternary operator</i>, which allows you to pick one of two alternatives. (The name “ternary operator” comes from the C programming language.) In the following example, the shell outputs one piece of text if the last command returned the status zero (true), and another if the last command returned a nonzero status (false):</p><p class="s33" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">zsh% <b>true</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">zsh% <b>print -rP &#39;The last status was %(?.zero.non-zero)&#39;</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">The last status was zero zsh% <b>false</b></p><p class="s33" style="padding-left: 40pt;text-indent: 0pt;line-height: 10pt;text-align: left;">zsh% <b>print -rP &#39;The last status was %(?.zero.non-zero)&#39;</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">The last status was non-zero</p><p style="padding-top: 8pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">The special expression is delimited by <span class="s33">% </span>at the string’s conclusion. (If you need to put a real closing parenthesis inside the expression, you can use <span class="s33">%)</span>.) Inside, the first character is <span class="s33">?</span>; this behaves a bit like the code in a normal percent escape. (We’ll call it the <i>condition character</i>.) In this case it indicates the shell should compare the status of the last command with zero. If the status was zero, the shell outputs the text between the dots; if the status was nonzero, the shell outputs the text between the second dot and the closing parenthesis. Hence the differing output based on whether we just executed <span class="s33">true </span>or <span class="s33">false</span>.</p><p class="s29" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><span class="s27">154 </span>CHAPTER 7 <span class="s28">■ </span>PROMPTS </p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">You can compare the command status against numbers other than zero by putting a number either after the <span class="s33">% </span>or after the <span class="s33">(</span>. (We recommend putting the number after the <span class="s33">% </span>since that’s consistent with other prompt escapes.) Also, you can use pretty much any character as a separator, not just <span class="s33">.</span>, as long as the separator occurs in balanced pairs. (If you use anything that looks like an opening bracket or quote, you should finish with the corresponding closing bracket or quote.) So for example:</p><p class="s33" style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">zsh% <b>false</b></p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">zsh%  <b>print  -rP  &#39;The  last  status  was  %(1?/one/not  one)&#39;</b></p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">The last status was one</p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">Here’s how to use this feature to display the status for any command that didn’t return success, that is, zero. There’s a prompt escape, predictably <span class="s33">%?</span>, to display the status itself.</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 10pt;text-align: left;">A simple version is as follows. We then show a simple example:</p><p class="s33" style="padding-top: 8pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">zsh% <b>PS1=&#39;%(?..(%?%))%# &#39;</b></p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">% <b>false</b></p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">(1)%</p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">This makes use of the <span class="s33">%) </span>escape to display a closing parenthesis. The ternary expression shows nothing if the last status was zero, but the status appears in parentheses if it was nonzero. We’ve shown the new prompt below. Because the command to set the prompt executed successfully, no status was shown. We then executed <span class="s33">false</span>, which does nothing except return a nonzero status. This caused the text <span class="s33">(1) </span>to appear at the start of the next prompt. Another special effect imitates a feature found in time prompts in <span class="s33">tcsh</span>, where on the hour the time shows up as <span class="s33">Ding! </span>as if a clock were striking. The same effect in <span class="s33">zsh </span>results if you use a ternary expression with the condition character <span class="s33">t</span>. This compares the number given (or zero) against the minutes of the current hour. Hence, it’s easy to do something special on the hour—in other words, when the minute count is zero. In the example that follows, it’s 32 minutes past the hour, so the time shows up normally:</p><p class="s33" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">zsh% <b>PS1=&#39;%(t.Ding!.%D{%L:%M})%# &#39;</b></p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">12:32%</p><p class="s33" style="padding-top: 8pt;padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;"><span class="p">By the way, </span>%L <span class="p">is a </span>zsh <span class="p">extension to </span>strftime <span class="p">formatting. It gives you the hour in the 12-hour format, but if the hour is just a single digit, you only see that digit; there is no leading zero or space. You can do the same (inside </span>%D{<span class="s32">fmt</span>}<span class="p">) with </span>%K <span class="p">for the hour in 24-hour format, and with </span>%f <span class="p">for the day of the month.</span></p><p style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">Another useful ternary form has the condition character <span class="s33">#</span>. This compares the user ID of the current process against the appropriate number. That allows you to do something different from normal if the shell is running as the superuser, who always has user ID zero. Thus <span class="s33">%# </span>is equivalent to <span class="s33">%(#.#.%%)</span>, where the doubled <span class="s33">%% </span>produces a single percent sign in the output.</p><p style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">The final form we’ll introduce is with the condition character <span class="s33">L</span>. The number here is compared against the variable <span class="s33">SHLVL</span>, an abbreviation for shell level. The first instance of the shell to start assigns the value 1 to <span class="s33">SHLVL</span>. If you start another shell, it looks at the existing value (assuming it’s in the environment, which it usually is), and adds 1 to it, so this shell has <span class="s33">SHLVL </span>2, and so on. You can actually get the raw variable as the percent escape <span class="s33">%L</span>, but since most people don’t want that number in their prompts probably the ternary form is more interesting.</p><p class="s29" style="padding-top: 3pt;padding-left: 39pt;text-indent: 0pt;text-align: right;"><a name="bookmark332">CHAPTER 7 </a><span class="s28">■ </span>PROMPT S <span class="s27">155</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 185%;text-align: left;">The easiest way to see how this works is to set the prompt in your <span class="s33">.zshrc</span>: <span class="s33">PS1=&#39;%(2L.+.)%# &#39;</span></p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">Next time you log in, you should see just the familiar “<span class="s33">% </span>”. If you don’t, maybe you are already on a higher shell level—this can happen if the windowing system runs your shell to initialize, for example. Then <span class="s33">SHLVL </span>may already have the value 1 in the environment of windows when they start up. This shows that the shell doesn’t need to inherit the value from its imme- diate parent; it just has to be passed down the process tree. If you’re in that position, you should instead use</p><p class="s33" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">PS1=&#39;%(3L.+.)%# &#39;</p><p style="padding-top: 8pt;padding-left: 58pt;text-indent: 0pt;text-align: left;">Add the line to your <span class="s33">.zshrc</span>. Then when you next log in, the prompt will appear as follows:</p><p class="s33" style="padding-top: 8pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">%</p><p style="padding-top: 8pt;padding-left: 58pt;text-indent: 0pt;text-align: left;">If you then start a new shell by typing <span class="s33">zsh</span>, the prompt changes, even though the value of</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">PS1 <span class="p">is the same in the new shell:</span></p><p class="s33" style="padding-top: 8pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">% <b>zsh</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">+%</p><p style="padding-top: 8pt;padding-left: 58pt;text-indent: 0pt;text-align: left;">The expression <span class="s33">%(3L.+.) </span>actually tests to see if <span class="s33">$SHLVL </span>is <i>at least </i>equal to 3, so neither</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">SHLVL=1 <span class="p">or </span>SHLVL=2 <span class="p">would trigger the </span>+ <span class="p">to appear.</span></p><p style="padding-top: 1pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">It’s possible to have ternary expressions as part of the text inside another ternary expression. Because all inner expressions are evaluated before the shell returns to look at the outer one, this works without any special quoting or escaping.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part164.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part166.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
