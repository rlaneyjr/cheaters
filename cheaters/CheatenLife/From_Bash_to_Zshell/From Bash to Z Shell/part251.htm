<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Ordering Files</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part250.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part252.htm">Next &gt;</a></p><p class="s18" style="padding-top: 5pt;padding-left: 40pt;text-indent: 0pt;text-align: left;"><a name="bookmark441">Ordering Files</a></p><p style="padding-top: 5pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: justify;">You can change the order in which the files that match a pattern are passed as arguments to the command by using the qualifier <span class="s33">o </span>followed by a single letter that specifies a different sort order for the generated filenames.</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">Using <span class="s33">(on) </span>produces the default order: sorting the names according to the collation sequence similarly to <span class="s33">ls</span>. This ordering is a superset of alphabetical order. This isn’t quite as useless as</p><p class="s29" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark473"><span class="s27">226 </span></a>CHAPTER 9 <span class="s28">■ </span>PATTER N MATCHING </p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 42pt;text-indent: 0pt;line-height: 115%;text-align: left;">you might think, as we’ll see. If you turn that into <span class="s33">(On)</span>, the order is reversed. Here, we show both <span class="s33">ls </span>and <span class="s33">echo </span>output to emphasize the point in the sidebar “The ls Command and Globbing”:</p><p class="s33" style="padding-top: 7pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">zsh% <b>ls *(On)</b></p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;line-height: 115%;text-align: left;">1foo MSG ham.txt msg msg.out msg.txt newmsg spam.txt zsh% <b>echo *(On)</b></p><p class="s33" style="padding-left: 42pt;text-indent: 0pt;line-height: 10pt;text-align: left;">spam.txt newmsg msg.txt msg.out msg ham.txt MSG 1foo</p><p style="padding-top: 8pt;padding-left: 42pt;text-indent: 18pt;line-height: 115%;text-align: left;">The arguments passed to the command were the same in each case, but in the first <span class="s33">ls </span>reor- dered them to name order sorted as we described for the qualifier <span class="s33">(on) </span>earlier. In the second case, we see reverse name order.</p><p style="padding-left: 42pt;text-indent: 18pt;line-height: 115%;text-align: left;">Several of the other forms of ordering are reminiscent of the qualifiers that take numbers after them. <span class="s33">L </span>sorts by file size, and <span class="s33">m </span>by the modification time. Those are the two most useful ones, but the other two timestamps <span class="s33">a </span>and <span class="s33">c </span>and the link count <span class="s33">l </span>also work. Note that the time order is most recent first with <span class="s33">o </span>(“increasing difference from now,” if you like) and oldest first with <span class="s33">O</span>.</p><p style="padding-left: 42pt;text-indent: 18pt;line-height: 115%;text-align: left;">One special form of ordering uses the qualifier <span class="s33">d </span>for depth; it’s most useful in combination with the <span class="s33">** </span>and <span class="s33">*** </span>forms of recursive globbing and their more sophisticated counterparts such as our <span class="s33">(^CVS/)# </span>example. It means that the shell will search through all subdirectories of a directory before outputting the files within the directory itself. Note that if you use this on its own there is no other sorting—the files come out apparently randomly, however the records are stored on the disk. This means it’s useful to combine this with another ordering, which is allowed: <span class="s33">(odon) </span>means the shell will sort by looking into subdirectories before examining the regular and other files in a directory (referred to as <i>depth first</i>), then by name. You can combine other forms of ordering in the same way.</p><p style="padding-left: 42pt;text-indent: 18pt;line-height: 115%;text-align: left;">Consider the following directories (associated with the KDE desktop) on my laptop, sorted alphabetically by name and then in depth-first order. The ordering qualifiers are combined with a slash so that only directories are matched by the pattern:</p><p class="s33" style="padding-top: 6pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">zsh% <b>print -l .kde/share/apps/kon*/**/*(/)</b></p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">.kde/share/apps/konqsidebartng/entries</p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">.kde/share/apps/konqueror/dirtree</p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">.kde/share/apps/konqueror/dirtree/remote</p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">.kde/share/apps/konqueror/dirtree/remote/ftp</p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">.kde/share/apps/konqueror/dirtree/remote/web</p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">.kde/share/apps/konqueror/dirtree/services</p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">.kde/share/apps/konqueror/profiles</p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">zsh% <b>print -l .kde/share/apps/kon*/**/*(/odon)</b></p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">.kde/share/apps/konqsidebartng/entries</p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">.kde/share/apps/konqueror/dirtree/remote/ftp</p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">.kde/share/apps/konqueror/dirtree/remote/web</p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">.kde/share/apps/konqueror/dirtree/remote</p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">.kde/share/apps/konqueror/dirtree/services</p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">.kde/share/apps/konqueror/dirtree</p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">.kde/share/apps/konqueror/profiles</p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: justify;">Note the way the entries ending in <span class="s33">dirtree </span>and <span class="s33">remote </span>appear later in the listing than their subdirectories. I think it looks neater with the subdirectories at the end, which means replacing <span class="s33">od </span>with <span class="s33">Od </span>in the qualifiers:</p><p class="s29" style="padding-top: 3pt;padding-left: 280pt;text-indent: 0pt;text-align: left;"><a name="bookmark474">CHAPTER 9 </a><span class="s28">■ </span>PATTER N MATCHIN G <span class="s27">227</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s33" style="padding-left: 40pt;text-indent: 0pt;text-align: left;">zsh% <b>print -l .kde/share/apps/kon*/**/*(/Odon)</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">.kde/share/apps/konqsidebartng/entries</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">.kde/share/apps/konqueror/dirtree</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">.kde/share/apps/konqueror/profiles</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">.kde/share/apps/konqueror/dirtree/remote</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">.kde/share/apps/konqueror/dirtree/services</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">.kde/share/apps/konqueror/dirtree/remote/ftp</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">.kde/share/apps/konqueror/dirtree/remote/web</p><p style="padding-top: 8pt;padding-left: 58pt;text-indent: 0pt;text-align: left;">This way, complicated listings tend to put the longer entries later.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part250.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part252.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
