<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Completing Options</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part403.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part405.htm">Next &gt;</a></p><p class="s35" style="padding-left: 40pt;text-indent: 0pt;text-align: left;"><a name="bookmark756">Completing Options</a></p><p style="padding-top: 5pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">Virtually all Unix commands take a whole raft of options as arguments. Some options take arguments themselves. Some commands allow single-letter options to be clumped together, so for example, <span class="s33">-abc </span>can be used instead of <span class="s33">-a -b -c</span>. Some options are incompatible with others and they can’t be used together. On top of all these complications, code needs to be written to ensure the function honors any user preferences that have been configured using styles. The <span class="s33">prefix-needed </span>style introduced in the section “Requiring Prefixes” in Chapter 10 is an example of a style that affects completion of options. Coping with all of this can be quite messy, so to make things easier there is a helpful function—<span class="s33">_arguments</span>—that does a lot of the hard work for you.</p><p class="s33" style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;"><span class="p">To demonstrate </span>_arguments<a href="http://www.nedit.org/" class="a" target="_blank">, we’ll use another example. For this we’ll write a function to handle the NEdit text editor. If you’ve not heard of it, NEdit is a powerful yet easy-to-use editor with a graphical interface. It is available from </a>http://www.nedit.org/<span class="p">. We’ve chosen it for this example because many of the common issues that come up when completing options arise for its options.</span></p><p class="s29" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark795"><span class="s27">384 </span></a>CHAPTER 15 <span class="s28">■ </span>W RIT ING COMP LET ION F UNCTI ON S</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 60pt;text-indent: 0pt;text-align: left;">To use <span class="s33">_arguments</span>, you need to pass it a series of specifications each detailing an option.</p><p style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">At their simplest, these specifications can be just the name of the options:</p><p class="s33" style="padding-top: 8pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">_arguments -create -display -geometry -read -tags -wrap <i>and so on ...</i></p><p style="padding-top: 8pt;padding-left: 60pt;text-indent: 0pt;text-align: left;">The <span class="s33">-display </span>and <span class="s33">-geometry </span>options are common to all X programs, so there is an</p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;line-height: 115%;text-align: left;">_x_arguments <span class="p">function that is a wrapper around </span>_arguments<span class="p">. Because it adds these two options for you, we’ll use it here.</span></p><p style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">In the section “Per-match Descriptions” in Chapter 10, we saw how descriptions can be associated with matches. <span class="s33">_arguments </span>makes it easy to specify these. Just follow each option with its description in brackets:</p><p class="s33" style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">_x_arguments \</p><p class="s33" style="padding-top: 1pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">&#39;-read[open  file  read  only]&#39;  \</p><p class="s33" style="padding-top: 1pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">&quot;-create[create file if it doesn&#39;t already exist]&quot; \</p><p class="s45" style="padding-top: 1pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">and so on ...</p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">Many of the options take an argument. For example, there is a <span class="s33">-line </span>option that should be followed by the line number within the file to go to. It doesn’t make much sense to complete line numbers, but it is useful for the completion system to prompt users if they try completion after <span class="s33">-line</span>. We can do this with the following option specification:</p><p class="s33" style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">&#39;-line[go to specified line number]:line number&#39;</p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: justify;">For other options, it does make sense to complete something for the argument. For example, there is a <span class="s33">-background </span>option that allows a background color to be specified. There is already a function for completing those color names understood by X: <span class="s33">_x_color</span>. We just need to call it.</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 10pt;text-align: left;">The specification for this is</p><p class="s33" style="padding-top: 8pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">&#39;-background[specify background color]:background color:_x_color&#39;</p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: justify;">As things currently stand, we have option names being completed but not filenames. We could just call <span class="s33">_files </span>after <span class="s33">_x_arguments</span>, but this would have some associated problems. For example, it would not know not to complete files after options like <span class="s33">-line </span>and <span class="s33">-background </span>that take arguments. <span class="s33">_arguments </span>has an extra specification form that allows nonoption arguments to be specified. In this case, it is</p><p class="s33" style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">&#39;*:file:_files&#39;</p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">Instead of the asterisk (<span class="s33">*</span>), you could use a number. If we extended our <span class="s33">chown </span>completion to complete options, we could use a specification starting with <span class="s33">1 </span>for completing the new owner instead of the <span class="s33">(( CURRENT == 2 )) </span>test. The number would be <span class="s33">1 </span>and not <span class="s33">2 </span>because <span class="s33">_arguments </span>only deals with completion of command arguments: the <span class="s33">CURRENT </span>variable is designed to allow for when the cursor is on the first word of the command line, one position before the first command argument. <span class="s33">_arguments </span>also ignores any options when deciding if we are on the second word, so using an <span class="s33">_arguments </span>specification that starts with a number is not quite the same as checking the <span class="s33">CURRENT </span>variable.</p><p style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">Calling another function is not the only way to specify what is completed in a specification. You can just list some words in parentheses. For an example, we’ll examine NEdit’s <span class="s33">-lm </span>option.</p><p class="s29" style="padding-top: 3pt;padding-left: 223pt;text-indent: 0pt;text-align: left;"><a name="bookmark796">CHAPTER 15 </a><span class="s28">■ </span>W RIT ING COMP LET ION F UNCTI ON S <span class="s27">385</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">It takes the name of a programming language as an argument, allowing NEdit to select the right rules for features like color syntax highlighting. We can specify the languages to complete like this:</p><p class="s33" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">&#39;-lm[specify language mode]:language mode:(Ada C Fortran NEdit\ Macro)&#39;</p><p style="padding-top: 8pt;padding-left: 58pt;text-indent: 0pt;text-align: left;">You can even specify descriptions for each match:</p><p class="s33" style="padding-top: 8pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">&#39;-lm:  :((CSS\:Cascading\  style\  sheets  HTML\:Hypertext\  Markup\  Language))&#39;</p><p style="padding-top: 8pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">This is a more useful thing in other situations, but the example should demonstrate the point. The other description has been removed so as to fit this on a line; <span class="s33">_arguments </span>specifications can become quite long. Note how the colons have to be quoted with a backslash to avoid them being interpreted as the start of another argument (some options take more than one argument). Spaces in descriptions also needed quoting.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="toc">&nbsp;</p><div class="toc"><a class="toc0" href="part405.htm">States</a><a class="toc0" href="part406.htm">Exclusion Lists</a></div><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part403.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part405.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
