<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Writing Output to Files: Redirection</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part44.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part46.htm">Next &gt;</a></p><h4 style="padding-left: 42pt;text-indent: 0pt;text-align: left;"><a name="bookmark79">Writing Output to Files: Redirection</a></h4><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 115%;text-align: left;">Standard Unix input typically comes from the keyboard, while the terminal window receives commands’ standard output and any error messages. The shell lets you change this using a feature known as redirection. In this section we’ll introduce you to this feature.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 42pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="504" height="1" alt="image" src="Image_054.png"/></span></p><p class="s21" style="padding-top: 4pt;padding-left: 42pt;text-indent: 0pt;line-height: 114%;text-align: justify;">■<span class="s23">Note </span><span class="s19">Redirection works with programs that work within your terminal, writing text there—and, some- times, reading text from your keyboard. (Many of these are the original Unix programs that were designed before Unix “did windows.”) Redirection doesn’t affect the windows that graphical programs open.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 42pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="504" height="1" alt="image" src="Image_055.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: justify;">A Unix process can read and write text from many places, but three of them are especially important: the standard output (abbreviated <i>stdout</i>, also called <i>file descriptor 1</i>), standard error (<i>stderr </i>or f.d. 2), and standard input (<i>stdin</i>, f.d. 0). When a shell runs a program, by default the standard output and standard error of that process are routed to your terminal screen, and the standard input is taken from your keyboard.</p><p style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">So, for instance, if you run <span class="s33">cal </span>(the calendar program we met in the section “Command Lines” in Chapter 1) from the command line, its output (its <i>stdout</i>) appears in the terminal. If there was an error, <span class="s33">cal </span>will write a message to <i>stderr</i>, which also goes to your terminal. In fact, the shell itself writes its prompt to <i>stdout</i>—and reads the commands you type from <i>stdin</i>. This isn’ttrueinevery situation, withevery program—butit’sgenerallytruewithstandardnongraphical Unix programs. Figure 2-1 shows this.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 44pt;text-indent: 0pt;text-align: left;"><span><img width="326" height="117" alt="image" src="Image_056.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s13" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Figure 2-1. <span class="s32">A process’s usual input and outputs, without redirection</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">Why is this significant? Because you can tell the shell to reroute the output or input of a process. This is called <i>redirection</i>, and it’s a powerful shell feature.</p><p style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">For instance, if you want to save the calendar for the month you were born, the shell can redirect <span class="s33">cal</span>’s output to a file. Let’s first run <span class="s33">cal </span>without redirection—so you’ll see its standard output on your terminal, as always. Then we’ll redirect its output to a file named <span class="s33">birthcal</span>.</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 115%;text-align: justify;">Running <span class="s33">ls </span>shows that the file is there, and running the <span class="s33">cat </span>program displays what’s in the file—which, as we’d expect, has the output of <span class="s33">cal</span>:</p><p class="s29" style="padding-top: 3pt;padding-left: 224pt;text-indent: 0pt;text-align: left;"><a name="bookmark93">CHAPTER 2 </a><span class="s28">■ </span>USING SHELL FEATURES TOGETHER <span class="s27">29</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s33" style="padding-left: 40pt;text-indent: 0pt;text-align: left;">% <b>cal 10 1973</b></p><p class="s33" style="padding-top: 1pt;padding-left: 58pt;text-indent: 0pt;text-align: left;">October 1973</p><p class="s33" style="padding-top: 1pt;padding-left: 58pt;text-indent: -17pt;line-height: 115%;text-align: left;">Su Mo Tu We Th Fr Sa 1 2 3 4 5 6</p><p class="s33" style="padding-left: 44pt;text-indent: 0pt;line-height: 10pt;text-align: left;">7 8 9 10 11 12 13</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">14 15 16 17 18 19 20</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">21 22 23 24 25 26 27</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">28 29 30 31</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">% <b>cal 10 1973 &gt; birthcal</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">% <b>ls</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">birthcal prog.pl somefile</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">% <b>cat birthcal</b></p><p class="s33" style="padding-top: 1pt;padding-left: 4pt;text-indent: 0pt;text-align: center;">October 1973</p><p class="s33" style="padding-top: 1pt;padding-left: 58pt;text-indent: -17pt;line-height: 115%;text-align: left;">Su Mo Tu We Th Fr Sa 1 2 3 4 5 6</p><p class="s33" style="padding-left: 44pt;text-indent: 0pt;line-height: 10pt;text-align: left;">7 8 9 10 11 12 13</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">14 15 16 17 18 19 20</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">21 22 23 24 25 26 27</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">28 29 30 31</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">%</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">The shell’s <span class="s33">&gt; </span>(greater-than) operator tells it to redirect the standard output of a process (the program named at the left side of the <span class="s33">&gt;</span>) into a file (named at the right side of the <span class="s33">&gt;</span>). As you can see, when we redirected <span class="s33">cal</span>’s output, there was no output on the terminal; it all went into the file. Figure 2-2 shows <span class="s33">cal </span>with its standard output redirected to a file named <span class="s33">afile</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 42pt;text-indent: 0pt;text-align: left;"><span><img width="352" height="141" alt="image" src="Image_057.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s13" style="padding-left: 40pt;text-indent: 0pt;text-align: left;">Figure 2-2. <span class="s32">A process’s standard output redirected to a file</span></p><p class="s40" style="padding-top: 3pt;padding-left: 150pt;text-indent: 0pt;text-align: center;">PERMISSIONS</p><p class="s40" style="padding-top: 3pt;padding-left: 150pt;text-indent: 0pt;text-align: center;">PERMISSIONS</p><p style="text-indent: 0pt;text-align: left;"/><p class="s40" style="padding-top: 3pt;padding-left: 150pt;text-indent: 0pt;text-align: center;">PERMISSIONS</p><p class="s29" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark94"><span class="s27">30 </span></a>CHAPTER 2 <span class="s28">■ </span>USING SHELL FEATURES TOGETHER </p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s33" style="padding-top: 6pt;padding-left: 9pt;text-indent: 0pt;line-height: 115%;text-align: justify;">Unix-like systems are <i>multiuser</i>; which means they let many users share the same filesystem. The filesystem has access controls, often called simply <i>permissions</i>, that help you choose who can do what to your files and directories. Permissions include the permission to run a file as a program, known as <i>execute permission</i>. You’ll typically use the chmod command to set the proper access modes.</p><p class="s33" style="padding-left: 9pt;text-indent: 0pt;line-height: 115%;text-align: justify;">We can’t cover permissions in detail here. To find out more, see a good introductory book about your operating system or your emulation package (such as Cygwin).</p><p class="s33" style="padding-left: 9pt;text-indent: 0pt;line-height: 115%;text-align: justify;">To redirect program output to a new file, the user must have write permission for the <i>directory </i>where this file is created. If the file already exists, though, the user must have write permission on the <i>file </i>instead.</p><p class="s33" style="padding-top: 6pt;padding-left: 9pt;text-indent: 0pt;line-height: 115%;text-align: justify;">Unix-like systems are <i>multiuser</i>; which means they let many users share the same filesystem. The filesystem has access controls, often called simply <i>permissions</i>, that help you choose who can do what to your files and directories. Permissions include the permission to run a file as a program, known as <i>execute permission</i>. You’ll typically use the chmod command to set the proper access modes.</p><p class="s33" style="padding-left: 9pt;text-indent: 0pt;line-height: 115%;text-align: justify;">We can’t cover permissions in detail here. To find out more, see a good introductory book about your operating system or your emulation package (such as Cygwin).</p><p class="s33" style="padding-left: 9pt;text-indent: 0pt;line-height: 115%;text-align: justify;">To redirect program output to a new file, the user must have write permission for the <i>directory </i>where this file is created. If the file already exists, though, the user must have write permission on the <i>file </i>instead.</p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"/><p class="s33" style="padding-top: 6pt;padding-left: 9pt;text-indent: 0pt;line-height: 115%;text-align: justify;">Unix-like systems are <i>multiuser</i>; which means they let many users share the same filesystem. The filesystem has access controls, often called simply <i>permissions</i>, that help you choose who can do what to your files and directories. Permissions include the permission to run a file as a program, known as <i>execute permission</i>. You’ll typically use the chmod command to set the proper access modes.</p><p class="s33" style="padding-left: 9pt;text-indent: 0pt;line-height: 115%;text-align: justify;">We can’t cover permissions in detail here. To find out more, see a good introductory book about your operating system or your emulation package (such as Cygwin).</p><p class="s33" style="padding-left: 9pt;text-indent: 0pt;line-height: 115%;text-align: justify;">To redirect program output to a new file, the user must have write permission for the <i>directory </i>where this file is created. If the file already exists, though, the user must have write permission on the <i>file </i>instead.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="62" height="161" alt="image" src="Image_058.png"/></span></p><p style="padding-top: 4pt;padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">What if there had been an error? Would the error message have gone into the <span class="s33">birthcal </span>file? If <span class="s33">cal </span>is a properly designed Unix program (which it is!), its errors will go to <i>stderr</i>. The errors will appear on the terminal because <span class="s33">&gt; </span>only redirects <i>stdout</i>, not <i>stderr</i>. Let’s try it:</p><p class="s33" style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">% <b>cal 100 1973 &gt; birthcal</b></p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">cal: illegal month value: use 1-12</p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">% <b>ls</b></p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">birthcal prog.pl somefile</p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">% <b>cat birthcal</b></p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">%</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">The error didn’t go into the <span class="s33">birthcal </span>file. (This is good—if the error had been written to <i>stdout</i>, you wouldn’t have known that something went wrong unless you happened to look in the <span class="s33">birthcal </span>file.) In this case, <i>nothing </i>went into the <span class="s33">birthcal </span>file; <span class="s33">cat </span>shows that it’s now empty.</p><p style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">This brings up an important point: by default, redirection to a file will overwrite whatever is in that file, no questions asked. This follows the shells’ design philosophy that, in general, you know what you’re doing. (And it <i>is </i>good to be able to replace a file easily when you need to.) If you want the shells to prevent overwriting when you use <span class="s33">&gt;</span>, you can set the “no clobber” option, which we explain in the section “Preventing Files from Being Clobbered” in Chapter 8.</p><p style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">The shells also have a <span class="s33">&gt;&gt; </span>redirection operator that appends text to an existing file (adds text to the end). Let’s try it to build a <span class="s33">birthcals </span>file with calendars for you and someone else. We’ll also use <span class="s33">echo </span>to add a title above each calendar. (You’ll need the double quote marks around <span class="s33">echo</span>’s command-line arguments. The section “Control Shell Interpretation with Quoting” in Chapter 3 explains why.) Notice that we first use <span class="s33">&gt; </span>to create the file, then <span class="s33">&gt;&gt; </span>to append other programs’ output to it:</p><p class="s33" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">% <b>echo &quot;*** MY BIRTH MONTH ***&quot; &gt; birthcals</b></p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">% <b>cal 10 1973 &gt;&gt; birthcals</b></p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">% <b>echo &quot;*** ZOE&#39;S BIRTH MONTH ***&quot; &gt;&gt; birthcals</b></p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">% <b>cal 6 1975 &gt;&gt; birthcals</b></p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">% <b>cat birthcals</b></p><p class="s29" style="padding-top: 3pt;padding-left: 224pt;text-indent: 0pt;text-align: left;"><a name="bookmark95">CHAPTER 2 </a><span class="s28">■ </span>USING SHELL FEATURES TOGETHER <span class="s27">31</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s33" style="padding-left: 58pt;text-indent: -17pt;line-height: 115%;text-align: left;">*** MY BIRTH MONTH *** October 1973</p><table style="border-collapse:collapse;margin-left:37.7pt" cellspacing="0"><tr style="height:11pt"><td style="width:68pt"><p class="s49" style="padding-right: 2pt;text-indent: 0pt;line-height: 10pt;text-align: right;">Su Mo Tu We Th</p></td><td style="width:27pt"><p class="s49" style="padding-right: 2pt;text-indent: 0pt;line-height: 10pt;text-align: right;">Fr Sa</p></td></tr><tr style="height:12pt"><td style="width:68pt"><p class="s49" style="padding-right: 2pt;text-indent: 0pt;text-align: right;">1 2 3 4</p></td><td style="width:27pt"><p class="s49" style="padding-right: 2pt;text-indent: 0pt;text-align: right;">5 6</p></td></tr><tr style="height:12pt"><td style="width:68pt"><p class="s49" style="padding-right: 2pt;text-indent: 0pt;text-align: right;">7 8 9 10 11</p></td><td style="width:27pt"><p class="s49" style="padding-right: 2pt;text-indent: 0pt;text-align: right;">12 13</p></td></tr><tr style="height:12pt"><td style="width:68pt"><p class="s49" style="padding-right: 2pt;text-indent: 0pt;text-align: right;">14 15 16 17 18</p></td><td style="width:27pt"><p class="s49" style="padding-right: 2pt;text-indent: 0pt;text-align: right;">19 20</p></td></tr><tr style="height:12pt"><td style="width:68pt"><p class="s49" style="padding-right: 2pt;text-indent: 0pt;text-align: right;">21 22 23 24 25</p></td><td style="width:27pt"><p class="s49" style="padding-right: 2pt;text-indent: 0pt;text-align: right;">26 27</p></td></tr><tr style="height:11pt"><td style="width:68pt"><p class="s49" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">28 29 30 31</p></td><td style="width:27pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr></table><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">*** ZOE&#39;S BIRTH MONTH ***</p><p class="s33" style="padding-top: 1pt;padding-bottom: 2pt;padding-left: 67pt;text-indent: 0pt;text-align: left;">June 1975</p><table style="border-collapse:collapse;margin-left:37.7pt" cellspacing="0"><tr style="height:11pt"><td style="width:68pt"><p class="s49" style="padding-right: 2pt;text-indent: 0pt;line-height: 10pt;text-align: right;">Su Mo Tu We Th</p></td><td style="width:27pt"><p class="s49" style="padding-right: 2pt;text-indent: 0pt;line-height: 10pt;text-align: right;">Fr Sa</p></td></tr><tr style="height:12pt"><td style="width:68pt"><p class="s49" style="padding-right: 2pt;text-indent: 0pt;text-align: right;">1 2 3 4 5</p></td><td style="width:27pt"><p class="s49" style="padding-right: 2pt;text-indent: 0pt;text-align: right;">6 7</p></td></tr><tr style="height:12pt"><td style="width:68pt"><p class="s49" style="padding-right: 2pt;text-indent: 0pt;text-align: right;">8 9 10 11 12</p></td><td style="width:27pt"><p class="s49" style="padding-right: 2pt;text-indent: 0pt;text-align: right;">13 14</p></td></tr><tr style="height:12pt"><td style="width:68pt"><p class="s49" style="padding-right: 2pt;text-indent: 0pt;text-align: right;">15 16 17 18 19</p></td><td style="width:27pt"><p class="s49" style="padding-right: 2pt;text-indent: 0pt;text-align: right;">20 21</p></td></tr><tr style="height:12pt"><td style="width:68pt"><p class="s49" style="padding-right: 2pt;text-indent: 0pt;text-align: right;">22 23 24 25 26</p></td><td style="width:27pt"><p class="s49" style="padding-right: 2pt;text-indent: 0pt;text-align: right;">27 28</p></td></tr><tr style="height:12pt"><td style="width:68pt"><p class="s49" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">29 30</p></td><td style="width:27pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:11pt"><td style="width:68pt"><p class="s49" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">%</p></td><td style="width:27pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">By the way, what is the <span class="s33">cat </span>program doing here? As always, it’s reading the files you name on its command line and writing their contents to standard output—in this case, the terminal.</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: justify;">Unix programs that write to standard output don’t have to know how to write to a file or how to write to the terminal. They simply output that text to stdout, and the shell directs the output.</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">A program <i>can </i>tell whether its input and output are connected to a terminal or from a text file, and the <span class="s33">ls </span>program does that. Without redirection—when its output is a terminal—most versions of <span class="s33">ls </span>write output in columns, to fit more names onto your screen. When you redirect output away from the terminal, <span class="s33">ls </span>writes in a single column. This is handy for several reasons, as we’ll see. Let’s try it: list the contents of the <span class="s33">/bin </span>and <span class="s33">/usr/bin </span>directories on your screen first, then redirect them into a file named <span class="s33">proglist</span>:</p><p class="s33" style="padding-top: 6pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">$  <b>ls  /bin  /usr/bin</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">/bin:</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">arch df igawk nice su ash dmesg ipcalc nisdomainname sync</p><p class="s33" style="padding-left: 40pt;text-indent: 0pt;line-height: 10pt;text-align: left;">...</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s33" style="padding-left: 40pt;text-indent: 0pt;text-align: left;">/usr/bin:</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">X11 gasp kmail p2c</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">[ gawk kmedia packf</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">...</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">$  <b>ls  /bin  /usr/bin  &gt;  proglist</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">$</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">Next, let’s look through the <span class="s33">proglist </span>file. A good way to do that is with your favorite pager program (introduced in the section “Command Lines” in Chapter 1): <span class="s33">more</span>, <span class="s33">less</span>, or <span class="s33">pg</span>. (Type <span class="s33">more proglist</span>, <span class="s33">less proglist</span>, or <span class="s33">pg proglist</span>.) The file should look something like this, with the <span class="s33">ls </span>output in a single column:</p><p class="s29" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark96"><span class="s27">32 </span></a>CHAPTER 2 <span class="s28">■ </span>USING SHELL FEATURES TOGETHER </p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 42pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="507" height="3" alt="image" src="Image_059.png"/></span></p><p class="s33" style="padding-top: 4pt;padding-left: 42pt;text-indent: 0pt;line-height: 115%;text-align: left;">/bin: arch ash awk</p><p class="s33" style="padding-left: 46pt;text-indent: 0pt;line-height: 10pt;text-align: left;">...</p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;line-height: 115%;text-align: left;">zcat zsh</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s33" style="padding-left: 42pt;text-indent: 0pt;text-align: left;">/usr/bin:</p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;line-height: 115%;text-align: left;">X11 [</p><p class="s33" style="padding-left: 46pt;text-indent: 0pt;text-align: left;">...</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 42pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="509" height="3" alt="image" src="Image_060.png"/></span></p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">If the file has other characters in it—for instance, if names end with <span class="s33">/ </span>or <span class="s33">*</span>, or there are sequences of strange characters like <span class="s33">^[[31m </span>around the names—then your shell (or your system) has replaced the standard <span class="s33">ls </span>command with something else. (You might have an alias that adds some <span class="s33">ls </span>options every time you run <span class="s33">ls</span>.) In that case, try telling the shell to use the “real” <span class="s33">ls </span>by typing the command’s absolute pathname, like this:</p><p class="s33" style="padding-top: 7pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">$ <b>/bin/ls /bin /usr/bin &gt; proglist</b></p><p class="s40" style="padding-top: 3pt;padding-left: 123pt;text-indent: 0pt;text-align: left;">CONFUSING PROGRAM NAMES</p><p class="s40" style="padding-top: 3pt;padding-left: 123pt;text-indent: 0pt;text-align: left;">CONFUSING PROGRAM NAMES</p><p style="text-indent: 0pt;text-align: left;"/><p class="s40" style="padding-top: 3pt;padding-left: 123pt;text-indent: 0pt;text-align: left;">CONFUSING PROGRAM NAMES</p><p style="padding-top: 8pt;padding-left: 42pt;text-indent: 18pt;line-height: 115%;text-align: left;">Using a pathname to a program file, like <span class="s33">/bin/ls</span>, tells the shell exactly where to find the program you want. (That way, the shell won’t search for the program in the <span class="s33">PATH</span>.) This also tells the shell not to use any shell alias or function named <span class="s33">ls</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s33" style="padding-top: 6pt;padding-left: 9pt;text-indent: 0pt;line-height: 115%;text-align: left;">We suggest you don’t “redefine” programs by using aliases. Instead, name the alias something different than the program. That way, when you type the program name—or when a friend is using your Unix account— there will be no question what should happen. This is especially important with programs like rm that do something that can be dangerous. Making “safety” aliases—so, for instance, when you type rm you actually get rm  -i, which prompts before removing each file—can cause you grief if you use another shell or another system with no “safety” alias. It’s better to learn what the “real” version of each program does. If you always want to use rm  -i, make an alias named (say) rmi, and train your fingers to use that alias instead. Whatever name you choose, just be sure that it isn’t overriding some other program that already exists. The which program can tell you this: which rmi will tell you whether there’s already a program named rmi somewhere in your shell’s PATH.</p><p class="s33" style="padding-top: 6pt;padding-left: 9pt;text-indent: 0pt;line-height: 115%;text-align: left;">We suggest you don’t “redefine” programs by using aliases. Instead, name the alias something different than the program. That way, when you type the program name—or when a friend is using your Unix account— there will be no question what should happen. This is especially important with programs like rm that do something that can be dangerous. Making “safety” aliases—so, for instance, when you type rm you actually get rm  -i, which prompts before removing each file—can cause you grief if you use another shell or another system with no “safety” alias. It’s better to learn what the “real” version of each program does. If you always want to use rm  -i, make an alias named (say) rmi, and train your fingers to use that alias instead. Whatever name you choose, just be sure that it isn’t overriding some other program that already exists. The which program can tell you this: which rmi will tell you whether there’s already a program named rmi somewhere in your shell’s PATH.</p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"/><p class="s33" style="padding-top: 6pt;padding-left: 9pt;text-indent: 0pt;line-height: 115%;text-align: left;">We suggest you don’t “redefine” programs by using aliases. Instead, name the alias something different than the program. That way, when you type the program name—or when a friend is using your Unix account— there will be no question what should happen. This is especially important with programs like rm that do something that can be dangerous. Making “safety” aliases—so, for instance, when you type rm you actually get rm  -i, which prompts before removing each file—can cause you grief if you use another shell or another system with no “safety” alias. It’s better to learn what the “real” version of each program does. If you always want to use rm  -i, make an alias named (say) rmi, and train your fingers to use that alias instead. Whatever name you choose, just be sure that it isn’t overriding some other program that already exists. The which program can tell you this: which rmi will tell you whether there’s already a program named rmi somewhere in your shell’s PATH.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="62" height="208" alt="image" src="Image_061.png"/></span></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part44.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part46.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
