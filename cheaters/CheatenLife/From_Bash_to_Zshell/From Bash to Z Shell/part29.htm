<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>What’s a Shell?</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part28.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part30.htm">Next &gt;</a></p><h4 style="padding-top: 21pt;padding-left: 40pt;text-indent: 0pt;text-align: left;"><a name="bookmark39">What’s a Shell?</a></h4><p style="padding-top: 6pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">A <i>shell </i>is a program that runs other programs. It’s full of features that make your computer easier to use. Shells can find programs and files quickly, remember what you’ve done before, and store information that you use over and over.</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 113%;text-align: justify;">There are various definitions of the term <i>shell</i>. When we say “shell,” we’re talking about an interface between the user and the computer’s operating system.<span class="s43">1 </span>You can think of a shell as a “wrapper” around the operating system, one that protects you from the system (and the system from you!). It lets you use the computer without needing to understand the low-level details that programmers do. Figure 1-1 shows someone using a shell to tell the computer to copy some files. The figure also shows some of the layers of complexity that the shell hides from the user.</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">In early operating systems, users couldn’t choose how to interact with the computer. There was no mouse and no windows: commands were typed on a keyboard and the computer’s response was also in text. Shells grew out of this environment. Unix did things differently: shells were separated from the operating system. The shell is a stand-alone program, and users can choose their own shell. (When Unix appeared on the scene, there were only one or two shells to choose from.) As mice and graphical displays became popular, computer professionals kept using shells—and improving them to work better and faster.</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">Several popular modern shells are available, and all of them work in the same basic way. (We’ll see a list of shells later in this chapter, and explore some of their main differences throughout Part 1.) The shells we cover in this book use a keyboard to send commands to a computer, as well as a screen full of text that shows what you’ve told the computer and what its answers are.</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">Once you learn some basics, you can save even more work by “teaching” the shell to execute a series of tasks for you. Here’s an example.</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: justify;">At the start of each workday, you need to make a copy of every file you’ve been working on; each copy’s name should start with <i>old</i>. The previous day’s copies are removed. Doing that by hand is tedious, but there’s a faster way! Instead of copying the files one by one, you can package those same steps into a <i>shell script </i>or <i>shell function</i>. Then, each day, with a few keystrokes, you simply “replay” those commands to do the job in a flash.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="226" height="1" alt="image" src="Image_020.png"/></span></p><p class="s14" style="padding-top: 5pt;padding-left: 52pt;text-indent: -12pt;line-height: 109%;text-align: left;">1. Programmers: On Unix/Linux systems, a shell basically prints a prompt, reads a command you enter there, converts it to an argument list for the operating system’s <span class="s29">exec </span>function, starts a new process, and</p><p class="s14" style="padding-left: 52pt;text-indent: 0pt;line-height: 91%;text-align: left;">helps the user manage that process.<span class="s44"> </span><span class="s27">3</span></p><p class="s29" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark54"><span class="s27">4 </span></a>CHAPTER 1 <span class="s28">■ </span>I N TR ODUC TION TO SHELLS </p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 44pt;text-indent: 0pt;text-align: left;"><span><img width="246" height="170" alt="image" src="Image_021.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 42pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><span><img width="251" height="13" alt="image" src="Image_022.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 43pt;text-indent: 0pt;text-align: left;"><span><img width="252" height="148" alt="image" src="Image_023.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s13" style="padding-left: 42pt;text-indent: 0pt;text-align: left;">Figure 1-1. <span class="s32">The shell interface</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">That’s a small example of the power of a shell. There’s much, much more. Shells are sophis- ticated programs developed for more than 30 years by people who use computers constantly, day in and day out. They’re packed with features that make interaction with a computer faster and easier. For instance, a shell (working in conjunction with utility programs) can</p><p style="padding-top: 7pt;padding-left: 57pt;text-indent: 0pt;text-align: left;">• Do most of the typing for you by completing commands automatically.</p><p style="padding-top: 8pt;padding-left: 67pt;text-indent: -10pt;line-height: 115%;text-align: left;">• Locate files all through your computer’s filesystem by their characteristics, then perform a number of operations on them.</p><p style="padding-top: 7pt;padding-left: 57pt;text-indent: 0pt;text-align: left;">• Remember and redo a command, or a series of commands, that you’ve done before.</p><p style="padding-top: 8pt;padding-left: 57pt;text-indent: 0pt;text-align: left;">• Let you quickly jump between two or more “memorized” locations in the filesystem.</p><p style="padding-top: 8pt;padding-left: 57pt;text-indent: 0pt;text-align: left;">• Create a series of filenames or decide how often to perform a task.</p><p style="padding-top: 8pt;padding-left: 42pt;text-indent: 18pt;line-height: 115%;text-align: left;">(If you’ve written computer programs before, it might help you to think of the shell as a programming language interpreter. The shell’s language is designed for running other programs.)</p><p style="padding-left: 42pt;text-indent: 18pt;line-height: 115%;text-align: justify;">Are you fairly new to computers? Or do you do most of your computer work using a mouse, buttons, and menus? In either case, learning to use a shell will be a new experience: a new way of thinking and working. A shell won’t replace your mouse. Instead, it will <i>supplement </i>the way you’ve worked before. You’ll learn when the shell is faster and easier, and when a mouse is better.</p><p class="s29" style="padding-top: 3pt;padding-left: 258pt;text-indent: 0pt;text-align: left;"><a name="bookmark55">CHAPTER 1 </a><span class="s28">■ </span>INTRODUCTION TO SH ELLS <span class="s27">5</span></p><p style="padding-top: 24pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">We’ll bet that the shell will become one of your new tools—a very powerful tool that will change the way you work.</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">It doesn’t take long to learn the basics of using a shell. But that’s not where the power lies. The best shells have literally <i>hundreds </i>of powerful features. You don’t need to learn all of them, and they’ll take time to learn. In this part of the book, we’ll introduce many of those features and show examples that you can try right away. The details are in later parts.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="569" height="579" alt="image" src="Image_024.png"/></span></p><p class="s40" style="padding-top: 7pt;padding-left: 168pt;text-indent: 0pt;text-align: left;">TYPING COMMANDS? WHY?</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s33" style="padding-left: 49pt;text-indent: 0pt;line-height: 115%;text-align: justify;">To use a shell, you’ll be using the keyboard. If you’re accustomed to giving commands by pointing to menus and buttons with a mouse, you might wonder why shells use a keyboard instead of a mouse.</p><p class="s33" style="padding-left: 49pt;text-indent: 0pt;line-height: 115%;text-align: justify;">One obvious reason is that computers had keyboards (and shells!) long before they had windows and mice. Shells developed to let you control your system from a keyboard.</p><p class="s33" style="padding-left: 49pt;text-indent: 0pt;line-height: 115%;text-align: justify;">“But,” you might ask, “can’t they just put those commands on some menus and buttons?” There <i>have </i>been some graphical shells—and there will certainly be more. So far, though, graphical interfaces aren’t nearly as fast or powerful as standard shells. Here’s why:</p><p class="s33" style="padding-top: 7pt;padding-left: 70pt;text-indent: -12pt;line-height: 115%;text-align: left;">• Unix systems have hundreds of programs, and many of those programs have multiple options. (Other systems, like Microsoft Windows, have a lot of programs too.) You don’t need to know or use all of those programs, of course. But try to imagine a menu system that would let an expert choose from all of those programs. It could have hundreds of menu entries, many with their own submenus for setting options. It would be a nightmare to use!</p><p class="s33" style="padding-top: 7pt;padding-left: 70pt;text-indent: -12pt;line-height: 115%;text-align: left;">• Many Unix programs are like building blocks. They can work together to do something that one program can’t do alone. As we’ll see, it’s easy to tell the shell how to build this big set of programs into an almost- infinite number of combinations. But—so far, at least—graphical systems are slower to set up and clumsier too. (Think about how a language like English has many thousands of words, which you can combine in an infinite number of ways to make an infinite number of different sentences—and thoughts. That’s a lot like the power that a shell gives you for controlling your computer.)</p><p class="s33" style="padding-top: 7pt;padding-left: 70pt;text-indent: -12pt;line-height: 115%;text-align: left;">• Moving a mouse around a screen takes time. If you have a system handy, try it now. Move the mouse to one corner of the screen, then take your hands away. Now reach for the mouse, move it to another part of the screen, point to a menu. and drag it down to a command that opens a dialog box (where, for instance, you could enter a filename). Depending on what you’re doing, that probably took you a few seconds and a fair amount of wrist motion. What if you could have done all of that by keeping your hands on the keyboard—typing, say, five keys plus a filename? Unless you’re a very slow typist, you’ll probably find that (after some practice) the keyboard is faster. Over the space of days and weeks at your computer, the few seconds you save on each command can add up to hours of saved time. Most experienced shell users agree that leaving your hands on the keyboard will let you accomplish more in less time.</p><p class="s33" style="padding-top: 7pt;padding-left: 70pt;text-indent: -12pt;line-height: 115%;text-align: left;">• One of the most powerful reasons to use a shell is <i>automation</i>. You can package a series of command lines so they’ll all run when you simply type one word (or a few words). You’ll learn how in Chapter 2.</p><p class="s29" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark56"><span class="s27">6 </span></a>CHAPTER 1 <span class="s28">■ </span>I N TR ODUC TION TO SHELLS </p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part28.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part30.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
