<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Floating-Point Numbers</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part321.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part323.htm">Next &gt;</a></p><p class="s35" style="padding-left: 42pt;text-indent: 0pt;text-align: left;"><a name="bookmark587">Floating-Point Numbers</a></p><p style="padding-top: 5pt;padding-left: 42pt;text-indent: 0pt;line-height: 115%;text-align: left;">Another <span class="s33">zsh </span>(or <span class="s33">ksh93</span>) extension is support for floating point numbers—numbers with a decimal portion. When specifying a number, you may need to include the decimal point if you want to have decimal values in your result—much the same as in a C program. Contrast these two commands to see the difference:</p><p class="s33" style="padding-top: 7pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">% <b>echo $(( 1 / 3 ))</b></p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">0</p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">% <b>echo $(( 1. / 3 ))</b></p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">0.33333333333333331</p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">Floating point variables are defined with an option to <span class="s33">declare </span>or with a variant of it named <span class="s33">float</span>. There are actually two such options to <span class="s33">declare</span>: <span class="s33">-F </span>and <span class="s33">-E</span>. The difference between them relates to the output format: with <span class="s33">-E</span>, engineering notation is used. The following example displays the same number in each of the two forms:</p><p class="s33" style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">% <b>declare -F f=&#39;1.0/3&#39;</b></p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">% <b>declare -E e=&#39;1.0/3&#39;</b></p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">% <b>echo $f</b></p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">0.3333333333</p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">% <b>echo $e</b></p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">3.333333333e-01</p><p style="padding-top: 8pt;padding-left: 42pt;text-indent: 18pt;line-height: 115%;text-align: left;">You can also specify how many significant digits you want in the output values. In the following example, we specify three significant digits:</p><p class="s29" style="padding-top: 3pt;padding-left: 314pt;text-indent: 0pt;text-align: left;"><a name="bookmark615">CHAPTER 12 </a><span class="s28">■ </span>VARIABLES <span class="s27">293</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s33" style="padding-left: 40pt;text-indent: 0pt;text-align: left;">% <b>declare -F 3 f=&#39;1.0/3&#39;</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">% <b>declare -E 3 e=&#39;1.0/3&#39;</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">% <b>echo $f</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">0.333</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">% <b>echo $e</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">3.33e-01</p><p style="padding-top: 8pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: justify;">If you are concerned about the output format, it is probably better to use <span class="s33">printf</span>, though, because it has support for a wider range of output formats. It handles specifics of your locale so if you are in a country where a comma is used for a decimal point then it will handle that. <span class="s33">zsh</span></p><p style="padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">4.2 has <span class="s33">printf </span>as a built-in so no precision is lost if you pass the name of a variable directly instead of using an expansion. The following example demonstrates this:</p><p class="s33" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">% <b>declare -F 3 f=&#39;1.0/3&#39;</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">% <b>printf &#39;%f\n&#39; $f</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">0.333000</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">% <b>printf &#39;%f\n&#39; f</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">0.333333</p><p class="s33" style="padding-top: 8pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">zsh <span class="p">also has a number of more complex mathematical functions such as the common trigonometry functions. They are in a separate loadable module, which you need to first load. Modules are loaded with the </span>zmodload <span class="p">command:</span></p><p class="s33" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">zmodload zsh/mathfunc</p><p style="padding-top: 8pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">This provides most of the mathematical functions available in C, so you can do things like the following:</p><p class="s33" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">(( pi = 4 * atan(1) ))</p><p style="padding-top: 8pt;padding-left: 58pt;text-indent: 0pt;text-align: left;">Refer to the <span class="s33">zsh </span>documentation for the complete list of available math functions.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part321.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part323.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
