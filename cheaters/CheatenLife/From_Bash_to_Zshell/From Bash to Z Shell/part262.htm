<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>A Brief Tour of Programmable Completion</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part261.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part263.htm">Next &gt;</a></p><p class="s35" style="padding-left: 42pt;text-indent: 0pt;text-align: left;"><a name="bookmark483">A Brief Tour of Programmable Completion</a></p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 115%;text-align: left;">With bash_completion or <span class="s33">compinit </span>in place, you shouldn’t need to remember special keystrokes for completing different types of things. Try completion after <span class="s33">telnet </span>and it should complete hostnames. Command options are often completed, a useful feature when working with long options. Consider the following example:</p><p class="s33" style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">$ <b>find -ex</b>&lt;tab&gt;</p><p class="s67" style="padding-top: 1pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">➤ <span class="s33">find -exec</span></p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">For commands like <span class="s33">cvs </span>that take the name of a subcommand as their first arguments, these are also completed. Try <span class="s33">cvs ann&lt;tab&gt;</span>.</p><p style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">Many commands can only make use of certain types of files. For example, the command <span class="s33">gunzip </span>is only useful when used with compressed files. It therefore makes sense to only complete the names of compressed files after gunzip:</p><p class="s33" style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">$ <b>ls</b></p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">docs.html docs.tar.gz</p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">$ <b>gunzip </b>&lt;tab&gt;</p><p class="s67" style="padding-top: 1pt;padding-left: 50pt;text-indent: 0pt;text-align: left;">➤ <span class="s33">gunzip docs.tar.gz</span></p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">If <span class="s33">zsh </span>doesn’t find any compressed files, it tries all files. This can be useful if you have an unusually named file. In <span class="s33">bash</span>, you can always use Esc / to complete all files.</p><p class="s33" style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;"><span class="p">Filename completion ordinarily uses the local filesystem to find out the names of files to be completed. Sometimes, however, the names of files need to come from some other source. For instance, when completing after </span>tar xvf foo.tar<span class="p">, files are instead completed by looking inside the </span>tar <span class="p">archive. Another case, which currently only works in </span>zsh<span class="p">, is completion after </span>scp <span class="s32">host</span>:<span class="p">. If you have password-less logins with </span>ssh <span class="p">set up, </span>zsh <span class="p">can complete files on the remote host.</span></p><p style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">When using the shell, if you’re ever unsure what goes next or what syntax is necessary, try pressing Tab. It may not work but we expect you will be surprised at many of the unusual situ- ations in which completion will do something useful. For an example of just such a situation, try this in <span class="s33">zsh</span>:</p><p class="s33" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">% <b>echo $fpath[(</b>&lt;tab&gt;</p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">The shell lists subscript flags. These are special flags that allow array indexing to work in unusual ways. We will discuss them in more detail in the section “Reverse Indexing” in Chapter 12.</p><p class="s29" style="padding-top: 3pt;padding-left: 304pt;text-indent: 0pt;text-align: left;"><a name="bookmark514">CHAPTER 10 </a><span class="s28">■ </span>COMPLE TION <span class="s27">235</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part261.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part263.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
