<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>The &gt;(…) Substitution</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part301.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part303.htm">Next &gt;</a></p><p class="s18" style="padding-left: 40pt;text-indent: 0pt;text-align: justify;"><a name="bookmark553">The &gt;(…) Substitution</a></p><p class="s33" style="padding-top: 5pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: justify;"><span class="p">The </span>&gt;(<span class="s32">...</span>) <span class="p">substitution works a bit like a pipe. In fact, it’s implemented with a named pipe on some systems. As with </span>&lt;(<span class="s32">...</span>)<span class="p">, if you want to redirect into the filename, you need to put a </span>&gt; <span class="p">in front.</span></p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">Redirecting error messages away from the terminal is a good use. Shells don’t make it easy for you to redirect standard error to a pipe while leaving standard output alone. To illustrate, suppose you are running <span class="s33">make </span>to compile a program. This produces some informational messages on standard output to indicate what it is doing. In addition, warning and error messages are sent to standard error. You decide you want to filter out any error messages from the standard error, saving them to a log file. You want to throw away any warning messages while keeping the normal informational output. Assuming that the error messages are tagged with a suitable word like “Error” we can achieve this as follows:</p><p class="s33" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">make 2&gt; &gt;(grep Error &gt;logfile.txt)</p><p style="padding-top: 8pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">The <span class="s33">2&gt; </span>redirects standard error. The substitution after that removes lines that don’t contain <span class="s33">Error</span>, and saves the result to <span class="s33">logfile.txt</span>. Note that this appears as standard output from <span class="s33">grep</span>, not as standard error. The standard output of the original command is untouched; you can pipe it or redirect it as you like.</p><p class="s29" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><span class="s27">270 </span>CHAPTER 11 <span class="s28">■ </span>J O BS AN D PR OC E S S ES</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 42pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="504" height="1" alt="image" src="Image_227.png"/></span></p><p class="s21" style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;line-height: 115%;text-align: left;">■<span class="s23">Tip </span><span class="s19">As you can see from the example in this section, the &gt;(...) form of substitution can be used in place of a filename after normal redirections. The same applies to &lt;(...) and =(...) substitutions. This makes sense if you remember that the shell is substituting a filename. Note that in bash, there must be a space between the two &gt; (or &lt;) characters as in &gt; &gt;(...). In zsh the space is not required.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 42pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="507" height="1" alt="image" src="Image_228.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s33" style="padding-top: 6pt;padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;"><span class="p">There is one important difference between ordinary pipes and the </span>&gt;(<span class="s32">…</span>) <span class="p">form. In the second case the shell won’t wait for the command to finish. That usually doesn’t matter. It wouldn’t matter in the example we just showed unless you immediately tried to look at </span>logfile.txt<span class="p">. You will notice a problem if you let the command in the substitution write to standard output or standard error. Then it’s possible that the output comes after the command has finished, and appears mixed in with the next command line. The problem is very like the one we mentioned at the end of the section “Multiple Redirections in zsh” in Chapter 8, and the fix is similar, too:</span></p><p class="s33" style="padding-top: 7pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">{ make } 2&gt; &gt;(grep Error &gt;logfile.txt)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part301.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part303.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
