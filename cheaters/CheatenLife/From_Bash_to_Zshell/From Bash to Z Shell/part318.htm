<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Array Expansions</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part317.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part319.htm">Next &gt;</a></p><p class="s35" style="padding-left: 40pt;text-indent: 0pt;text-align: left;"><a name="bookmark583">Array Expansions</a></p><p style="padding-top: 5pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">So how is a variable expansion split into words when you have an array? You may recall that we stated there are two methods for retrieving all the elements of an array: <span class="s33">${arr[@]} </span>and</p><p style="padding-left: 40pt;text-indent: 0pt;line-height: 112%;text-align: left;"><span class="s33">${arr[*]}</span>. The first form results in each element of the array being a separate word while the second form amounts to joining all the array elements together with a space<span class="s43">1 </span>between each element and treating the resulting string like a scalar variable expansion. One of the reasons why the difference isn’t always obvious is that, if you use <span class="s33">${arr[*]} </span>outside double quotes in <span class="s33">bash</span>, it is promptly split up again at all the spaces that were used to join the array elements.</p><p class="s33" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">bash$ <b>arr=( one &#39;two three&#39; four )</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">bash$ <b>showargs ${arr[*]}</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">&gt;&gt;one&lt;&lt;</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">&gt;&gt;two&lt;&lt;</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">&gt;&gt;three&lt;&lt;</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">&gt;&gt;four&lt;&lt;</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">bash$ <b>showargs &quot;${arr[*]}&quot;</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">&gt;&gt;one two three four&lt;&lt; bash$ <b>showargs &quot;${arr[@]}&quot;</b></p><p class="s33" style="padding-left: 40pt;text-indent: 0pt;line-height: 10pt;text-align: left;">&gt;&gt;one&lt;&lt;</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">&gt;&gt;two three&lt;&lt;</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">&gt;&gt;four&lt;&lt;</p><p style="padding-top: 8pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">In the first case, it wouldn’t matter if we used <span class="s33">@ </span>instead. Without the quotes even the array element containing a space is broken up. In <span class="s33">zsh </span>you would need an equals sign for the words to be split (<span class="s33">$=arr[*]</span>). In the second case, the words are joined together with a space and the quotes prevent word splitting. The last case is the most useful: each array element forms one word. This is the default in <span class="s33">zsh</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="226" height="1" alt="image" src="Image_239.png"/></span></p><p class="s14" style="padding-top: 5pt;padding-left: 52pt;text-indent: -12pt;line-height: 108%;text-align: left;">1. Actually the first character of <span class="s29">$IFS </span>(internal field separator) is used as the separator. This happens to be a space by default.</p><p class="s29" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark610"><span class="s27">288 </span></a>C HA P T E R 12 <span class="s28">■ </span>V A R I A B L E S</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s33" style="padding-left: 42pt;text-indent: 0pt;text-align: left;">zsh% <b>showargs $arr</b></p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">&gt;&gt;one&lt;&lt;</p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">&gt;&gt;two  three&lt;&lt;</p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">&gt;&gt;four&lt;&lt;</p><p style="padding-top: 8pt;padding-left: 42pt;text-indent: 17pt;line-height: 115%;text-align: left;">If you don’t use array expansions on their own but have adjacent text, the text is made to adjoin the first or last element of the array:</p><p class="s33" style="padding-top: 7pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">%  <b>showargs  &quot;BEFORE${arr[@]}AFTER&quot;</b></p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">&gt;&gt;BEFOREone&lt;&lt;</p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">&gt;&gt;two  three&lt;&lt;</p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">&gt;&gt;fourAFTER&lt;&lt;</p><p style="padding-top: 8pt;padding-left: 42pt;text-indent: 18pt;line-height: 115%;text-align: left;">This isn’t particularly useful, especially if you compare it to how brace expansions work (see the section “More Argument Handling: Braces” in Chapter 8).</p><p class="s33" style="padding-top: 7pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">%  <b>showargs  BEFORE{one,two\  three,four}AFTER</b></p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">&gt;&gt;BEFOREoneAFTER&lt;&lt;</p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">&gt;&gt;BEFOREtwo  threeAFTER&lt;&lt;</p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">&gt;&gt;BEFOREfourAFTER&lt;&lt;</p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">With the <span class="s33">rc_expand_param </span>option on, arrays in <span class="s33">zsh </span>work like this. The “rc” in this option name refers to the <span class="s33">rc </span>shell, since this is a feature borrowed from <span class="s33">rc</span>. The option is off by default but we recommend turning it on.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 42pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="504" height="1" alt="image" src="Image_240.png"/></span></p><p class="s21" style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;line-height: 117%;text-align: left;">■<span class="s23">Note </span><span class="s19">rc is the default shell for the Plan 9 operating system. A Unix port is also available; see Appendix B for the web address. rc has a similar level of functionality to the traditional Bourne shell but has the advantage of a much cleaner syntax. zsh has a few rc-inspired features. In addition to the rc_expand_param option, there is an rc_quotes option. This allows literal single quote characters to be included in quoted text by doubling them. In the following example, we use this to output a single quote character.</span></p><p class="s33" style="padding-top: 7pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">zsh% <b>setopt rc_quotes</b></p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">zsh%  <b>echo  &#39;one  of  rc&#39;&#39;s  features&#39;</b></p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">one  of  rc&#39;s  features</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 42pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="504" height="1" alt="image" src="Image_241.png"/></span></p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">You can also use a caret character to turn on <span class="s33">rc_expand_param </span>for a single expansion, so you should see the same result from <span class="s33">BEFORE${^arr}AFTER </span>as we saw with braces.</p><p style="padding-left: 42pt;text-indent: 18pt;line-height: 115%;text-align: left;">Braces and array expansions can be mixed. With <span class="s33">rc_expand_param</span>, that produces all the possible combinations, which can result in quite a lot of words. With the option unset, the brace expansion is applied against just the first (or last) element of the array:</p><p class="s29" style="padding-top: 3pt;padding-left: 314pt;text-indent: 0pt;text-align: left;"><a name="bookmark611">CHAPTER 12 </a><span class="s28">■ </span>VARIABLES <span class="s27">289</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s33" style="padding-left: 40pt;text-indent: 0pt;text-align: left;">% <b>showargs {A,B}$^^arr{C,D}</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">&gt;&gt;Aone&lt;&lt;</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">&gt;&gt;Bone&lt;&lt;</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">&gt;&gt;two three&lt;&lt;</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">&gt;&gt;fourC&lt;&lt;</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">&gt;&gt;fourD&lt;&lt;</p><p style="padding-top: 8pt;padding-left: 58pt;text-indent: 0pt;text-align: left;">Using two carets as in this example turns off <span class="s33">rc_expand_param </span>for the single expansion.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part317.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part319.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
