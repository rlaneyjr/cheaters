<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Command Substitution</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part48.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part50.htm">Next &gt;</a></p><h4 style="padding-left: 42pt;text-indent: 0pt;text-align: left;"><a name="bookmark83">Command Substitution</a></h4><p style="padding-top: 6pt;padding-left: 42pt;text-indent: 0pt;line-height: 115%;text-align: left;">We aren’t done—our list has programs from only two directories, <span class="s33">/bin </span>and <span class="s33">/usr/bin</span>. Most systems have several other important program directories. Your shell looks for programs in every directory listed in your <span class="s33">PATH </span>environment variable. So let’s build our <span class="s33">proglist </span>list from all of the directories in your <span class="s33">PATH</span>.</p><p style="padding-left: 60pt;text-indent: 0pt;line-height: 10pt;text-align: left;">As we’ve seen, shells separate arguments with space characters.<span class="s43">3 </span>Directory names in <span class="s33">PATH</span></p><p style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;line-height: 115%;text-align: left;">are separated by colon (<span class="s33">:</span>) characters. Unix has several ways to translate characters, one of which is the <span class="s33">tr </span>program. The <span class="s33">tr </span>program reads text from its standard input, makes the translations you list on its command line, and writes the result to standard output. First let’s show <span class="s33">PATH </span>with <span class="s33">echo</span>. Then we’ll feed <span class="s33">echo</span>’s stdout to <span class="s33">tr</span>, translating the colons to spaces:</p><p class="s33" style="padding-top: 7pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">$ <b>echo &quot;$PATH&quot;</b></p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">/bin:/usr/bin:/usr/local/bin:/proj/bin</p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">$ <b>echo &quot;$PATH&quot; | tr &#39;:&#39; &#39; &#39;</b></p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">/bin  /usr/bin  /usr/local/bin  /proj/bin</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 42pt;text-indent: 18pt;line-height: 115%;text-align: left;">Now that we have a list of directory names, we’re ready to run <span class="s33">ls </span>to list the programs in them. There are a couple of ways to do the job. First, let’s use the method we did before: a pipe- line of commands. Then, in the following section, we’ll see a better way.</p><p style="padding-left: 42pt;text-indent: 18pt;line-height: 115%;text-align: left;">The list of directories comes from the standard output of <span class="s33">tr</span>. We need to get it onto an <span class="s33">ls </span>command line. You could simply retype the list onto a command line. Or, if your terminal or window system has a copy-and-paste function, you could use that. But the shell also has a way to read a command’s standard output and put it onto the command line of another command. It’s called <i>command substitution</i>, and it’s another unique and powerful shell feature. Here’s how it works.</p><p class="s33" style="padding-left: 42pt;text-indent: 18pt;line-height: 115%;text-align: justify;"><span class="p">If you surround one or more commands with a pair of backquote characters (</span><span class="s32">accents graves</span><span class="p">), like </span>`<span class="s32">command</span>`<span class="p">, the shell will run the command line, then replace it with its standard output. (In newer Bourne-type shells, you can also use the operators </span>$(<span class="s32">command</span>)<span class="p">, as explained in the section “Command Substitution and Command Arguments” in Chapter 11. But the backquotes work</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 42pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="226" height="1" alt="image" src="Image_071.png"/></span></p><p class="s14" style="padding-top: 5pt;padding-left: 54pt;text-indent: -12pt;line-height: 108%;text-align: left;">3.   Bourne-type shells actually use the separator characters listed in the <span class="s29">IFS </span>shell variable. (<span class="s29">IFS </span>is explained in the section “Reading Input” in Chapter 13.) We could change <span class="s29">IFS </span>to split the <span class="s29">PATH </span>at colons, but that would add even more things to learn here!</p><p class="s29" style="padding-top: 3pt;padding-left: 224pt;text-indent: 0pt;text-align: left;"><a name="bookmark103">CHAPTER 2 </a><span class="s28">■ </span>USING SHELL FEATURES TOGETHER <span class="s27">39</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">in <i>all </i>shells.) This is harder to describe than to see, so let’s try another example. First we’ll show the previous command line again—to see the directory pathnames that <span class="s33">tr </span>outputs. Next, type those directory names onto an <span class="s33">ls </span>command line yourself (or use copy and paste). Finally, use command substitution to do the same thing you did by hand: pass the list of directories onto an <span class="s33">ls </span>command line. The output in the last two cases should be identical:</p><p class="s33" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">$ <b>echo &quot;$PATH&quot; | tr &#39;:&#39; &#39; &#39;</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">/bin /usr/bin /usr/local/bin /proj/bin</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">$  <b>ls  /bin  /usr/bin  /usr/local/bin  /proj/bin</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">/bin:</p><p class="s33" style="padding-top: 1pt;padding-left: 44pt;text-indent: 0pt;text-align: left;">...</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">/usr/bin:</p><p class="s33" style="padding-top: 1pt;padding-left: 44pt;text-indent: 0pt;text-align: left;">...</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">/usr/local/bin:</p><p class="s33" style="padding-top: 1pt;padding-left: 44pt;text-indent: 0pt;text-align: left;">...</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">/proj/bin:</p><p class="s33" style="padding-top: 1pt;padding-left: 44pt;text-indent: 0pt;text-align: left;">...</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">$  <b>ls  `echo  &quot;$PATH&quot;  |  tr  &#39;:&#39;  &#39;  &#39;`</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">/bin:</p><p class="s33" style="padding-top: 1pt;padding-left: 44pt;text-indent: 0pt;text-align: left;">...</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">/usr/bin:</p><p class="s33" style="padding-top: 1pt;padding-left: 44pt;text-indent: 0pt;text-align: left;">...</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">/usr/local/bin:</p><p class="s33" style="padding-top: 1pt;padding-left: 44pt;text-indent: 0pt;text-align: left;">...</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">/proj/bin:</p><p class="s33" style="padding-top: 1pt;padding-left: 44pt;text-indent: 0pt;text-align: left;">...</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">Take a careful look at what we’ve just done: we made a list of directories on the standard output of <span class="s33">tr</span>, and then passed that list as command-line arguments to <span class="s33">ls</span>—just as if you had typed the list on the <span class="s33">ls </span>command line yourself. Note that, as before, <span class="s33">ls </span>makes multicolumn output when its output is to a terminal (as we’re doing here)—but it will make single-column output when we redirect its output (as we’ll do later).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part48.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part50.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
