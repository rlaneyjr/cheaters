<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>More Argument Handling: Braces</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part203.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part205.htm">Next &gt;</a></p><h4 style="padding-left: 40pt;text-indent: 0pt;text-align: left;"><a name="bookmark369">More Argument Handling: Braces</a></h4><p style="padding-top: 6pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: justify;">A list of comma-separated items in braces expands to those items. This works in all versions of <span class="s33">zsh </span>and recent versions of <span class="s33">bash</span>. The items don’t have to be files, though generating filenames is one of the most common uses. We describe it here as a link between files and pattern matching, which we will talk about in the next chapter. The following is a simple example:</p><p class="s33" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">% <b>echo {one,two,three}</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">one two three</p><p style="padding-top: 8pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">So far, that’s not very helpful—it’s just like having different words on the command line. However, if you have something outside the braces, it appears with <i>each </i>of the items in the braces, not just the one at the end. It’s important that no space appear before the opening brace or after the closing brace:</p><p class="s33" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">%  <b>ls  myfile.{c,h}</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">myfile.c myfile.h</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">% <b>echo BEFORE{one,two,three}AFTER</b></p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">BEFOREoneAFTER BEFOREtwoAFTER BEFOREthreeAFTER</p><p style="padding-top: 8pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">The first example is typical of the sort of thing you use this command for. The second shows the full glory of the syntax, and also makes the point that the arguments aren’t restricted to files.</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">There are lots of places you can use braces that might not occur to you at first. For example, suppose you need to rename a file, and the new name is only slightly different. Let’s suppose it’s the same name with <span class="s33">.bak </span>on the end. You can complete the original filename by pressing Tab, or whatever key is configured to perform completion in your shell:</p><p class="s33" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">% mv bra&lt;tab&gt;</p><p style="padding-top: 8pt;padding-left: 58pt;text-indent: 0pt;text-align: left;">This gives you</p><p class="s33" style="padding-top: 8pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">% <b>mv brace_expansion.xml</b></p><p style="padding-top: 8pt;padding-left: 58pt;text-indent: 0pt;text-align: left;">Now finish entering the line as follows and press Return:</p><p class="s33" style="padding-top: 8pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">% <b>mv brace_expansion.xml{,.bak}</b></p><p style="padding-top: 8pt;padding-left: 58pt;text-indent: 0pt;text-align: left;">This is the same as</p><p class="s33" style="padding-top: 8pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">% <b>mv brace_expansion.xml brace_expansion.xml.bak</b></p><p style="padding-top: 8pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">(The first string in the braces was empty. However, the shell still output what was in front of the braces.) You made the shell do most of that work for you.</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 114%;text-align: left;">Here’s a similar example. We use the <span class="s33">tar </span>command to create an archive containing the contents of a directory. The archive name is the directory name (<span class="s33">project_cheapskate</span>) with</p><p class="s33" style="padding-left: 40pt;text-indent: 0pt;text-align: left;">.tar <span class="p">added to the end. This is the usual convention for </span>tar <span class="p">archives:</span></p><p class="s33" style="padding-top: 8pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">% <b>tar cf project_cheapskate{.tar,}</b></p><p class="s29" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark398"><span class="s27">186 </span></a>CHAPTER 8 <span class="s28">■ </span>FILES AND DIRECTORIES </p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 42pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="504" height="1" alt="image" src="Image_180.png"/></span></p><p class="s21" style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;line-height: 114%;text-align: left;">■<span class="s23">Tip </span><span class="s19">Brace expansion is not a form of pattern matching. It always generates all the elements, whether existing files are there or not. In the next chapter we’ll see various sorts of patterns that can pick out alternatives. For example, myfile.[ch] expands to whichever of the two files myfile.c and myfile.h actually exists.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 42pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="504" height="1" alt="image" src="Image_181.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 42pt;text-indent: 18pt;line-height: 114%;text-align: left;">If you find you’d rather have braces behave as normal characters, in <span class="s33">bash </span>you can turn off the <span class="s33">braceexpand </span>option; in <span class="s33">zsh</span>, you can turn on the <span class="s33">ignore_braces </span>option.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="toc">&nbsp;</p><div class="toc"><a class="toc0" href="part205.htm">Generating Numbers with Braces</a><a class="toc0" href="part206.htm">Order of Braces and Tilde Expansion</a></div><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part203.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part205.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
