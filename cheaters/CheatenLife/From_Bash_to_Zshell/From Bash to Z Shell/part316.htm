<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Array Attributes</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part315.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part317.htm">Next &gt;</a></p><p class="s35" style="padding-left: 40pt;text-indent: 0pt;text-align: left;"><a name="bookmark581">Array Attributes</a></p><p style="padding-top: 5pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: justify;">There is one built-in command that we are going to be referring to frequently in this chapter: <span class="s33">declare</span>, also referred to as <span class="s33">typeset</span>. In <span class="s33">bash </span>and <span class="s33">zsh</span>, it doesn’t matter which of the two names you use—they are both the same command. In <span class="s33">ksh</span>, you don’t have the luxury of being able to choose—only <span class="s33">typeset </span>is available. We use <span class="s33">declare </span>throughout, mainly because we think it is a better name.</p><p style="padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: justify;">The <span class="s33">declare </span>command allows you to specify the type of a variable or to specify one or more attributes for a variable. To specify that a variable is an array, you use the <span class="s33">-a </span>option. Thus, the following command will create an empty array:</p><p class="s33" style="padding-top: 6pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">declare -a arr</p><p style="padding-top: 8pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">If <span class="s33">arr </span>already existed as another type of variable, <span class="s33">declare -a </span>converts it to an array. To demonstrate this, we need to be able to determine the type of a variable. <span class="s33">bash</span>’s <span class="s33">declare </span>command includes a <span class="s33">-p </span>option that allows us to do this. It outputs a variable in the form of an</p><p class="s29" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark606"><span class="s27">284 </span></a>CHAPTER 12 <span class="s28">■ </span>VARIABLES </p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 42pt;text-indent: 0pt;line-height: 115%;text-align: left;">assignment statement that could be used to re-create the variable. Here, we use it to see the effect of applying <span class="s33">declare -a </span>to a scalar variable:</p><p class="s33" style="padding-top: 7pt;padding-left: 42pt;text-indent: 0pt;line-height: 115%;text-align: left;">bash$ <b>var=string </b>bash$ <b>declare -a var </b>bash$ <b>declare -p var</b></p><p class="s33" style="padding-left: 42pt;text-indent: 0pt;line-height: 10pt;text-align: left;">declare -a var=&#39;([0]=&quot;string&quot;)&#39;</p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: justify;">This shows that the variable has become an array containing just one element. The syntax used in the array assignment that was output may be unfamiliar. When you’re assigning to an array in <span class="s33">bash</span>, any of these will work:</p><p class="s33" style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">arr=( [0]=one [1]=two [2]=three )</p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;line-height: 115%;text-align: left;">declare -a arr=( [0]=one [1]=two [2]=three ) declare -a arr=( one two three )</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">In addition to a variable’s type, <span class="s33">declare </span>allows a number of attributes to be set. <span class="s33">zsh </span>has one such attribute, specified with the <span class="s33">-U </span>option, which can be very useful with arrays. It removes duplicate values in an array. For example, in your startup file, you may want to add a directory to your path but it is better if it doesn’t then appear in your path multiple times:</p><p class="s33" style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;line-height: 115%;text-align: left;">declare -U path path=( ~/bin $path )</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">Try this, repeating the second command multiple times. It should have no further effect on the path. There is no easy way to do this in <span class="s33">bash</span>. As with all the attributes specified with <span class="s33">declare</span>, you can remove them by using a plus in front of the option—<span class="s33">declare +U path </span>in this case.</p><p style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">This brings us to another feature of <span class="s33">zsh</span>—<i>tied arrays</i>. The <span class="s33">path </span>array is the companion of the <span class="s33">PATH </span>variable—if you modify one, changes are reflected in the other. Other variables like <span class="s33">mailpath</span>/<span class="s33">MAILPATH </span>(which we saw in Chapter 7) work similarly. Using an option to <span class="s33">declare</span>, you can tie together any other two variables in a similar manner. For instance:</p><p class="s33" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">declare -T LD_LIBRARY_PATH ld_library_path</p><p style="padding-top: 8pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">The scalar variable will contain each of the elements in the array separated by colons.</p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">zsh <span class="p">4.2 allows you to choose a different separator character.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part315.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part317.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
