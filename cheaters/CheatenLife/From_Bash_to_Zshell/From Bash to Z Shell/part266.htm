<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Listing Matches</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part265.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part267.htm">Next &gt;</a></p><p class="s35" style="padding-left: 40pt;text-indent: 0pt;text-align: left;"><a name="bookmark487">Listing Matches</a></p><p style="padding-top: 5pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">You may have noticed that you hear a beep when the shell is unable to perform a requested completion. What do you do next? Typically you might decide to abort the line and run <span class="s33">ls </span>to see what files are there, offering a clue as to why it couldn’t complete anything. That would only help when completing files, though. A far more useful feature is to list the possible completion</p><p class="s29" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark515"><span class="s27">236 </span></a>CHAPTER 10 <span class="s28">■ </span>COMPLETION </p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 42pt;text-indent: 0pt;line-height: 115%;text-align: left;"><i>matches</i>. We saw how to do this back in the section “Building Pathnames by Completion” in Chapter 1: depending on your shell, you either need to press Esc = (<span class="s33">ksh</span>/<span class="s33">bash</span>) or Ctrl-d (<span class="s33">csh</span>/<span class="s33">tcsh</span>/<span class="s33">zsh</span>). So let’s try it:</p><p class="s33" style="padding-top: 7pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">bash$ <b>echo $HO</b>&lt;escape&gt;&lt;=&gt;</p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">$HOME $HOSTNAME $HOSTTYPE</p><p class="s33" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">bash$</p><p style="padding-top: 8pt;padding-left: 42pt;text-indent: 18pt;line-height: 115%;text-align: justify;">As you can see the three matches are listed and a new prompt is printed. Being able to see this is very useful. It’s so useful, in fact, that it makes sense to do the listing anyway—in response to the Tab key. Both <span class="s33">bash </span>and <span class="s33">zsh </span>have this feature enabled by default (turning off the <span class="s33">auto_list </span>option in <span class="s33">zsh </span>would disable it). In <span class="s33">bash</span>, you’ll find that the list is only displayed in response to a second press of the Tab key. <span class="s33">zsh</span>’s <span class="s33">bash_auto_list </span>option emulates this behavior and setting the <span class="s33">show-all-if-ambiguous </span>readline variable to <span class="s33">On </span>in <span class="s33">bash </span>causes matches to be listed after just one press of the Tab key.</p><p style="padding-left: 42pt;text-indent: 18pt;line-height: 115%;text-align: left;">Requiring two strikes of the Tab key in <span class="s33">bash </span>makes sense because the listings of comple- tion matches can easily add up to a lot of fairly similar lists scrolling up your terminal window. Information you want to refer back to can then have long scrolled off the top. <span class="s33">zsh </span>has a clever way of dealing with this: instead of reprinting a new prompt after the list of matches, it prints the list below the prompt. Subsequent new lists replace the previous one. Try typing</p><p class="s33" style="padding-left: 41pt;text-indent: 0pt;line-height: 115%;text-align: left;">cd /usr/&lt;tab&gt; <span class="p">and then add an </span>s <span class="p">and press Tab again. Initially, it will list all the directories in </span>/usr<span class="p">. Assuming that you have more than one directory there beginning with s, the second Tab press will replace the original list with a new one. If you don’t like this, there is, as always, a way to disable it: unset the </span>always_last_prompt <span class="p">option. If you consider disabling this option, be aware that menu selection, which is covered later, requires it to be enabled.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 42pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="507" height="1" alt="image" src="Image_205.png"/></span></p><p class="s21" style="padding-top: 4pt;padding-left: 42pt;text-indent: 0pt;text-align: left;">■<span class="s23">Tip </span><span class="s19">If at some stage, you find yourself actually wanting to keep zsh’s completion list, there is an</span></p><p class="s19" style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;line-height: 119%;text-align: left;">end-of-list editor command that you can bind to a key. When invoked, it will print you a new prompt below any current completion list.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 42pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="504" height="1" alt="image" src="Image_206.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">Sometimes, the shell is able to insert some characters for you but the word is still not complete. This occurs where some initial characters are the same across all the matches. By default, <span class="s33">zsh </span>doesn’t automatically list matches when this occurs. If you turn off the <span class="s33">list_ambiguous </span>option, then the matches will be listed. With <span class="s33">show-all-if-ambiguous </span>on, <span class="s33">bash </span>will list matches in this situation. In <span class="s33">bash </span>3 you can instead enable the <span class="s33">show-all-if-unmodified </span>readline variable to make the behavior resemble the <span class="s33">zsh </span>default.</p><p style="padding-left: 60pt;text-indent: 0pt;line-height: 10pt;text-align: left;">You may have noticed that the shell beeps when producing a list of completion matches.</p><p style="padding-top: 1pt;padding-left: 42pt;text-indent: 0pt;line-height: 115%;text-align: left;">More precisely, it beeps whenever an ambiguous completion is attempted. This can cause quite a lot of beeping to occur, so to disable it you can turn the <span class="s33">list_beep </span>option off in <span class="s33">zsh</span>. In <span class="s33">bash</span>, you can set the <span class="s33">bell-style </span>readline variable to <span class="s33">none</span>, but note that this disables <span class="s33">bash</span>’s use of the bell altogether.</p><p class="s29" style="padding-top: 3pt;padding-left: 304pt;text-indent: 0pt;text-align: left;"><a name="bookmark516">CHAPTER 10 </a><span class="s28">■ </span>COMPLE TION <span class="s27">237</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part265.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part267.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
