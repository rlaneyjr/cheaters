<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Keeping Track of the Context</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part411.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part413.htm">Next &gt;</a></p><p class="s35" style="padding-left: 40pt;text-indent: 0pt;text-align: left;"><a name="bookmark764">Keeping Track of the Context</a></p><p style="padding-top: 5pt;padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">The creation and updating of the <span class="s33">curcontext </span>variable is not the exclusive domain of the completion internals. Normally, when a completion function starts it will contain just the name of the completer and the command. The idea is that as more is determined about the current context, more information is filled in. It may be useful at this stage to recall that the zstyle context has the following form:</p><p class="s33" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">completion:<i>function</i>:<i>completer</i>:<i>command</i>:<i>argument</i>:<i>tag</i></p><p class="s33" style="padding-top: 8pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">_arguments <span class="p">and </span>_values <span class="p">fill in the argument field. This is why you need to be careful with the handling of the context when using states with </span>_arguments<span class="p">. This argument field allows styles specific to an option argument to be set. To see the effect of this, we can use the</span></p><p class="s33" style="padding-left: 40pt;text-indent: 0pt;line-height: 10pt;text-align: left;">_complete_help <span class="p">widget (usually bound to Ctrl-x h):</span></p><p class="s33" style="padding-top: 8pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">% <b>set -o &lt;ctrl-x&gt;&lt;h&gt;</b></p><p class="s33" style="padding-top: 1pt;padding-left: 58pt;text-indent: -17pt;line-height: 115%;text-align: left;">tags in context :completion::complete:set:: others-option-o-1 (_arguments _set)</p><p class="s33" style="padding-left: 58pt;text-indent: -17pt;line-height: 115%;text-align: left;">tags in context :completion::complete:set:others-option-o-1: zsh-options (_options _arguments _set)</p><p class="s29" style="padding-top: 3pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark805"><span class="s27">394 </span></a>CHAPTER 15 <span class="s28">■ </span>W RIT ING COMP LET ION F UNCTI ON S</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 18pt;line-height: 112%;text-align: left;">Here we can see the contexts used when completing the argument to the <span class="s33">-o </span>option. The context’s argument field contains <span class="s33">others-option-o-1</span>. This indicates that we are completing the first argument to the <span class="s33">-o </span>option in the <span class="s33">others </span>option set.<span class="s43">3 </span>Given this, we could define a style that would apply when completing after the <span class="s33">-o </span>option but not after the <span class="s33">+o </span>option. The tag in both situations is the same, so the argument field is the only place the context differs.</p><p style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: justify;">Try experimenting with <span class="s33">_complete_help </span>to see some of the other values that appear in the argument field. For example, you may see values such as <span class="s33">argument-1 </span>and <span class="s33">argument-rest</span>, which are used when <span class="s33">_arguments </span>is completing nonoption arguments.</p><p style="padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">One common situation where you may want to modify <span class="s33">curcontext </span>is if you write a completion for a command that has subcommands. This seems to be popular with source-code control programs like CVS, SCCS, and Perforce, but you may also have seen it elsewhere, such as with Debian’s <span class="s33">apt-get </span>command. The convention when completing for these commands is to include the name of the subcommand in the command field of the context. This allows styles to be set specific to a subcommand. For example, this style applies for the <span class="s33">add </span>subcommand of <span class="s33">cvs</span>:</p><p class="s33" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">zstyle &#39;:completion::*:cvs-add:*&#39; ignore-line true</p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">Whenever you modify <span class="s33">curcontext </span>in a function, it should be declared local so that changes do not propagate up to the calling functions:</p><p class="s33" style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">local curcontext=&quot;$curcontext&quot;</p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">The first thing you will want to do is complete the subcommands. <span class="s33">_describe </span>is generally appropriate for this job. The subsection “Specifying Descriptions”earlier in this chapter demonstrates <span class="s33">_describe </span>using <span class="s33">xauth </span>subcommands. If the main command can take options before the subcommand, <span class="s33">_arguments </span>can be used but finish with an <span class="s33">_arguments </span>specification that looks like the following:</p><p class="s33" style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">&#39;*::command:-&gt;subcmd&#39;</p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 18pt;line-height: 115%;text-align: left;">An unusual characteristic of this specification is the use of two colons after the star (<span class="s33">*</span>). This causes <span class="s33">_arguments </span>to update the <span class="s33">words </span>special array and <span class="s33">CURRENT </span>special variable subse- quent calls to <span class="s33">_arguments </span>to behave as expected, finding the name of a command in the first element of <span class="s33">words </span>and options thereafter. If you don’t have options to deal with, you can also do this step manually like so:</p><p class="s33" style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">shift words</p><p class="s33" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">(( CURRENT-- ))</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 42pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="507" height="1" alt="image" src="Image_309.png"/></span></p><p class="s21" style="padding-top: 4pt;padding-left: 42pt;text-indent: 0pt;line-height: 111%;text-align: left;">■<span class="s23">Note </span><span class="s19">You can modify all the special completion variables in this way. They don’t even need to be explicitly declared local: their values are automatically saved and restored when entering and leaving a function.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 42pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="504" height="1" alt="image" src="Image_310.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 42pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="226" height="1" alt="image" src="Image_311.png"/></span></p><p class="s14" style="padding-top: 5pt;padding-left: 53pt;text-indent: -12pt;line-height: 108%;text-align: left;">3. Option sets are an unusual feature of <span class="s29">_arguments</span>, which are beyond the scope of this book. Have a look at the completion function for <span class="s29">set </span>to see how they are introduced.</p><p class="s29" style="padding-top: 3pt;padding-left: 223pt;text-indent: 0pt;text-align: left;"><a name="bookmark806">CHAPTER 15 </a><span class="s28">■ </span>W RIT ING COMP LET ION F UNCTI ON S <span class="s27">395</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 58pt;text-indent: 0pt;text-align: left;">Having taken this step, the name of the subcommand will be in the first element of the</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">words <span class="p">array. We can now modify </span>curcontext <span class="p">as follows:</span></p><p class="s33" style="padding-top: 8pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">curcontext=&quot;${curcontext%:*}-${words[1]}:&quot;</p><p style="padding-top: 8pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: left;">This chops off the argument field of the context that generally is going to be empty. The subcommand is then added with a trailing colon to delimit the end of the command field. Everything is now ready to complete for each of the subcommands. So following this tends to be a case statement or separate functions are called for each subcommand.</p><p style="padding-left: 40pt;text-indent: 17pt;line-height: 115%;text-align: left;">Putting this all together with the <span class="s33">xauth </span>example we used in the section “Specifying Descriptions” earlier in this chapter, we have a function that looks like this:</p><p class="s33" style="padding-top: 7pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">#compdef xauth</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s33" style="padding-left: 40pt;text-indent: 0pt;line-height: 115%;text-align: left;">local curcontext=&quot;$curcontext&quot; ret=1 local subcmd</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s33" style="padding-left: 40pt;text-indent: 0pt;text-align: left;">if (( CURRENT == 2 )); then</p><p class="s33" style="padding-top: 1pt;padding-left: 58pt;text-indent: -8pt;line-height: 115%;text-align: left;">_describe  &#39;xauth  command&#39;  &#39;( add:add\  entry</p><p class="s33" style="padding-left: 58pt;text-indent: 0pt;line-height: 115%;text-align: left;">generate:use\ server\ to\ generate\ entry extract:extract\ entries\ into\ file nextract:numerically\ extract\ entries</p><p class="s33" style="padding-left: 40pt;text-indent: 9pt;line-height: 115%;text-align: left;">)&#39; &amp;&amp; ret=0 else</p><p class="s33" style="padding-left: 49pt;text-indent: 0pt;line-height: 10pt;text-align: left;">shift words</p><p class="s33" style="padding-top: 1pt;padding-left: 49pt;text-indent: 0pt;text-align: left;">(( CURRENT-- ))</p><p class="s33" style="padding-top: 1pt;padding-left: 49pt;text-indent: 0pt;line-height: 115%;text-align: left;">subcmd=&quot;$words[1]&quot; curcontext=&quot;${curcontext%:*}-${subcmd}:&quot;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s33" style="padding-left: 58pt;text-indent: -8pt;line-height: 115%;text-align: left;">case $subcmd in add)</p><p class="s33" style="padding-left: 38pt;text-indent: 0pt;line-height: 10pt;text-align: center;">#  <i>complete  for  add subcommand</i></p><p class="s33" style="padding-top: 1pt;padding-left: 58pt;text-indent: 0pt;text-align: left;">;;</p><p class="s33" style="padding-top: 1pt;padding-left: 58pt;text-indent: 0pt;text-align: left;"># <i>and so on for all the other subcommands</i></p><p class="s33" style="padding-top: 1pt;padding-left: 49pt;text-indent: 0pt;text-align: left;">esac</p><p class="s33" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">fi</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s33" style="padding-left: 40pt;text-indent: 0pt;text-align: left;">return ret</p><p style="padding-top: 8pt;padding-left: 40pt;text-indent: 18pt;line-height: 115%;text-align: justify;">If you look at the <span class="s33">xauth </span>completion function distributed with <span class="s33">zsh</span>, you’ll see that it doesn’t bother to shift the <span class="s33">words </span>array. This is because it doesn’t need to use <span class="s33">_arguments </span>when completing for any of the subcommands.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part411.htm">&lt; Previous</a><span> | </span><a href="../From Bash to Z Shell.html">Contents</a><span> | </span><a href="part413.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
