Array.prototype.hide = function() {
    for (var i = 0; i < this.length; i++) {
        var el = this[i];
        el.hide();
    }
    return this;
};
Array.prototype.html = function(value) {
    for (var i = 0; i < this.length; i++) {
        var el = this[i];
        el.html(value);
    }
    return this;
};
Array.prototype.on = function() {
    for (var i = 0; i < this.length; i++) {
        var el = this[i];
        el.on(arguments);
    }
    return this;
};
Array.prototype.show = function() {
    for (var i = 0; i < this.length; i++) {
        var el = this[i];
        el.show();
    }
    return this;
};
Array.prototype.text = function(value) {
    for (var i = 0; i < this.length; i++) {
        var el = this[i];
        el.text(value);
    }
    return this;
};
Array.prototype.val = function(value) {
    for (var i = 0; i < this.length; i++) {
        var el = this[i];
        el.val(value);
    }
    return this;
};

String.prototype.contains = function(val) {
    return this.indexOf(val) >= 0;
};
String.prototype.endsWith = function(val) {
    return this.substr(-val.length) == val;
};
String.prototype.startsWith = function(val) {
    return this.substr(0, val.length) == val;
};
String.prototype.toHostname = function() {
    var a = document.createElement('a');
    a.href = this;
    return a.hostname;
};
String.format = function() {
    var theString = arguments[0];
    for (var i = 1; i < arguments.length; i++) {
        var regEx = new RegExp("\\{" + (i - 1) + "\\}", "gm");
        theString = theString.replace(regEx, arguments[i]);
    }
    return theString;
};
String.isNullOrEmpty = function(s) {
    return (s == undefined) || (s == null) || (s.replace(/\s/g, '').length == 0);
};

HTMLElement.prototype.attr = function(name, value) {
    if (value == undefined) {
        return this.getAttribute(name);
    }
    this.setAttribute(name, value);
    return this;
};
HTMLElement.prototype.addClass = function(value) {
    if (this.className.indexOf(value) < 0) {
        this.className += ' ' + value;
    }
    return this;
};
HTMLElement.prototype.append = function(el) {
    this.appendChild(el);
    return el;
};
HTMLElement.prototype.css = function(styleName, value) {
    if (Array.isArray(styleName)) {
        value = styleName[1];
        styleName = styleName[0];
    }
    var a = styleName.split('-');
    for (var i = 1; i < a.length; i++) {
        a[i] = a[i][0].toUpperCase() + a[i].substr(1);
    }
    styleName = a.join('');
    this.style[styleName] = value;
    return this;
};
HTMLElement.prototype.evalScript = function() {
    var s = this.getElementsByTagName('script');
    for (var i = 0; i < s.length; i++) {
        eval(s[i].text);
    }
    return this;
};
HTMLElement.prototype.hasClass = function(value) {
    return this.className.indexOf(value) >= 0;
};
HTMLElement.prototype.find = function(query) {
    var el = this.querySelectorAll(query);
    return el;
};
HTMLElement.prototype.getElementById = function(id) {
    var el = this.querySelector('#' + id);
    return el;
};
HTMLElement.prototype.height = function(value) {
    if (value == undefined) {
        return parseFloat(this.css('height'));
    }
    this.css('height', value);
    return this;
};
HTMLElement.prototype.hide = function() {
    this.style.display = 'none';
    return this;
};
HTMLElement.prototype.html = function(value) {
    if (value == undefined) {
        return this.innerHTML;
    }
    this.innerHTML = value;
    return this;
};
HTMLElement.prototype.on = function() {
    var args = (arguments.length == 1) ? arguments[0] : arguments;
    var eventName = args[0];
    var selector = null;
    var callback = null;
    if (args.length == 2) {
        callback = args[1];
        this.addEventListener(eventName, function(e) {
            if (callback(e) === false) {
                e.preventDefault();
                e.stopImmediatePropagation();
            }
        });
    } else if (args.length == 3) {
        selector = args[1];
        callback = args[2];
        var els = this.querySelectorAll(selector);
        for (var i = 0; i < els.length; i++) {
            var el = els[i];
            el.addEventListener(eventName, function(e) {
                if (callback(e) === false) {
                    e.preventDefault();
                    e.stopImmediatePropagation();
                }
            });
        }
    }
    return this;
};
HTMLElement.prototype.removeClass = function(value) {
    var c = this.className.split(' ');
    var a = [];
    for (var i = 0; i < c.length; i++) {
        if (c[i] != value) {
            a.push(c[i]);
        }
    }
    this.className = a.join(' ');
    return this;
};
HTMLElement.prototype.show = function(value) {
    this.style.display = value ? value : 'block';
    return this;
};
HTMLElement.prototype.text = function(value) {
    if (value == undefined) {
        return this.textContent;
    }
    this.textContent = value;
    return this;
};
HTMLElement.prototype.width = function(value) {
    if (value == undefined) {
        return parseFloat(this.css('width'));
    }
    this.css('width', value);
    return this;
};
HTMLElement.create = function(nodeName, attributes) {
    var el = document.createElement(nodeName);
    for (var a in attributes) {
        el.setAttribute(a, attributes[a]);
    }
    return el;
};

HTMLInputElement.prototype.val = function(value) {
    if (value == undefined) {
        return this.value;
    }
    this.value = value;
};

HTMLVideoElement.prototype.progress = function() {
    var p = Math.round((this.currentTime / this.duration) * 100);
    return p;
};
HTMLVideoElement.prototype.quartile = function() {
    var q = parseInt(this.progress() / 25);
    return q;
};
HTMLVideoElement.prototype.quartiles = [false, false, false, false];

NodeList.prototype.addClass = function(value) {
    return NodeList.forEach(this, 'addClass', value);
};
NodeList.prototype.append = function(el) {
    return NodeList.forEach(this, 'append', el);
};
NodeList.prototype.attr = function(name, value) {
    return NodeList.forEach(this, 'attr', [name, value]);
};
NodeList.prototype.css = function(name, value) {
    return NodeList.forEach(this, 'css', [name, value]);
};
NodeList.prototype.dispatchEvent = function(event) {
    return NodeList.forEach(this, 'dispatchEvent', event);
};
NodeList.prototype.evalScript = function() {
    return NodeList.forEach(this, 'evalScript');
};
NodeList.prototype.find = function(query) {
    var elements = [];
    for (var i = 0; i < this.length; i++) {
        var node = this.item(i);
        elements = elements.concat(Array.prototype.slice.call(node.find(query)));
    }
    return elements;
};
NodeList.prototype.hasClass = function(value) {
    var b = false;
    for (var i = 0; i < this.length; i++) {
        var node = this.item(i);
        b = b || node.hasClass(value);
    }
    return b;
};
NodeList.prototype.height = function(value) {
    return NodeList.forEach(this, 'height', value);
};
NodeList.prototype.hide = function() {
    return NodeList.forEach(this, 'hide');
};
NodeList.prototype.html = function(value) {
    return NodeList.forEach(this, 'html', value);
};
NodeList.prototype.on = function() {
    return NodeList.forEach(this, 'on', arguments);
};
NodeList.prototype.removeClass = function(value) {
    return NodeList.forEach(this, 'removeClass', value);
};
NodeList.prototype.show = function(value) {
    return NodeList.forEach(this, 'show', value);
};
NodeList.prototype.text = function(value) {
    return NodeList.forEach(this, 'text', value);
};
NodeList.prototype.val = function(value) {
    if (value == undefined) {
        if (this.length > 0) {
            return this.item(0).val()
        }
        return null;
    }
    return NodeList.forEach(this, 'val', value);
};
NodeList.prototype.width = function(value) {
    return NodeList.forEach(this, 'width', value);
};
NodeList.forEach = function(nodeList, methodName, args) {
    for (var i = 0; i < nodeList.length; i++) {
        var node = nodeList.item(i);
        node[methodName](args);
    }
    return nodeList;
};

var Utils = {
    parseObject: function(src, dst, paramsMap) {
        for (var p in src) {
            if (paramsMap[p]) {
                dst[paramsMap[p]] = src[p];
            }
        }
    }
};

var gl_featurePath = '';
var gl_initMessage = null;
var gl_initOffer = null;
var gl_locale = 'en-US';
var gl_message_claims = [];
var gl_message_manifest = [];
var gl_messagePath = '';
var gl_offerPath = '';
var gl_playMessage = null;
var gl_stopMessage = null;

function gl_hide(selector, duration, callback) {
    gl_to(selector, duration, {
        opacity: 0
    }, callback);
}

function gl_show(selector, duration, callback) {
    gl_to(selector, duration, {
        opacity: 1
    }, callback);
}

function gl_to(selector, duration, params, callback) {
    if (callback) {
        params.onComplete = function() {
            callback(this.target[0]);
        }
    }
    TweenLite.to(document.querySelectorAll(selector), duration, params);
}

var GLEvent = {
    CLICK_OUT: 'clickOut',
    CLOSE_DDL: 'closeDDL',
    COOP_PHONE_CLICKED: 'coopPhoneClicked',
    COOP_URL_CLICKED: 'coopUrlClicked',
    DEALER_CLICKED: 'dealerClicked',
    MESSAGE_COMPLETE: 'messageComplete',
    SEARCH_ZIP: 'searchZip',
    SHOW_DDL: 'showDDL',
    SHOW_OFFER_DETAILS: 'showOfferDetails'
};

var VideoEvent = {
    ENDED: 'ended',
    PLAYING: 'playing',
    TIME_UPDATE: 'timeupdate'
};

var GLMobileDealer = function(o) {
    var self = this;

    self.clickUrl = '';
    self.dealerName = '';
    self.dealerId = 0;
    self.insideDMA = '';
    self.netacuityFlag = '';
    self.ratioUsed = '';

    self.isValid = (o.hasOwnProperty('ClickURL') && o.hasOwnProperty('DealerName') && o.hasOwnProperty('DealerID'));

    Utils.parseObject(o, self, {
        'ClickURL': 'clickUrl',
        'DealerName': 'dealerName',
        'DealerID': 'dealerId',
        'InsideDMA': 'insideDMA',
        'NetacuityFlag': 'netacuityFlag',
        'RatioUsed': 'ratioUsed'
    });
};

var GLMobileOffer = function(o) {
    var self = this;

    self.legalText = '';
    self.legalTextBold = '';
    self.path = '';

    Utils.parseObject(o, self, {
        'LegalText': 'legalText',
        'LegalTextBold': 'legalTextBold',
        'Path': 'path'
    });

    self.hasDetails = self.legalText.replace(/\s/g, '').length > 0;
};

var GLMobileBase = function(moduleName, template, options) {
    var self = this;

    self.formatPath = function(path) {
        // .../flash/... -> .../html5/...
        // .swf -> .png
        var a = path.split('/');
        var hasNXG;
        for (var i in a) {
            if(a[i] == '_NXG') {
                    hasNXG=1;
                }
            
            if (typeof a[i] == 'string') {
                if (a[i].toLowerCase() == 'flash') {
                    a[i] = 'html5';
                    break;
                }
            }
        }
        var f = a.pop();
        var fa = f.split('.');
        if (fa.length > 1) {
            var ext = fa.pop();
            if (ext == 'swf') {
                ext = 'png';
            }
            if (fa[0].toLowerCase().startsWith('video')) {
                f = fa.join('.');
            } else {
                f = String.format('{0}_{1}x{2}', fa.join('.'), self.adWidth, self.adHeight);
            }
            if(!hasNXG) {
                var z = a.pop();
                a.push('_NXG');
                a.push(z);
            }
        } else {
            if(!hasNXG)
                a.push('_NXG');
        }
        a.push(f);
        var p = a.join('/');
        return p;
    };
    self.formatPaths = function() {
        for (var k in self) {
            if (k.endsWith('Path')) {
                var v = self[k];
                if ((typeof v) != 'function') {
                    var p = self.formatPath(v);
                    self[k] = p;
                }
            }
        }
        for (var i = 0; i < self.offers.length; i++) {
            var p = self.formatPath(self.offers[i].path);
            self.offers[i].path = p;
        }
    };
    self.getChangeId = function() {
        return self.isTest ? self.now() : self.changeId;
    };
    self.getClickOutUrl = function() {
        return self.clickUrl;
    };
    self.log = function() {
        if (self.isDebug) {
            var args = [String.format('[ {0} ]', self.moduleName)].concat([].splice.call(arguments, 0));
            console.log(args.join(' '));
        }
    };
    self.now = function() {
        return (new Date()).getTime();
    };
    self.trace = function(o) {
        if (Array.isArray(o)) {
            for (var i = 0; i < o.length; i++) {
                self.log(o[i]);
            }
        } else if ((typeof o) == 'object') {
            for (var p in o) {
                if (typeof o[p] != 'function') {
                    self.log(p, '=', o[p]);
                }
            }
        } else if ((typeof o) == 'string') {
            console.log(o);
        } else {
            console.log(o);
        }
    };

    self.adSize = adSize;
    self.adWidth = options.width;
    self.adHeight = options.height;
    self.backgroundPath = '';
    self.brand = '';
    self.brandIncludesPath = '';
    self.campaignAdId = '';
    self.changeId = '';
    self.clickUrl = '';
    self.dualOfferConditional = '';
    self.featurePath = '';
    self.hasFeature = false;
    self.ipAddress = '0.0.0.0';
    self.isDebug = (options.isDebug != undefined) && (options.isDebug != null) && (options.isDebug === true);
    self.isDualOffer = false;
    self.isInit = true;
    self.isLocalhost = (window.location.host == 'localhost');
    self.locale = 'en-US'; //https://msdn.microsoft.com/en-US/library/ee825488(v=cs.20).aspx
    self.logoPath = '';
    self.messagePath = '';
    self.model = '';
    self.modelYear = '';
    self.moduleName = moduleName;
    self.offerPath = '';
    self.offers = [];
    self.options = options;
    self.skipAnimation = false;
    self.staticLogoPath = '';
    self.target = document.getElementById(options.targetId);
    self.targetId = options.targetId;
    self.userZip = '99999';

    self.testMode = gl_getTestMode();
    self.isTest = (self.testMode == '1');

    self.target
        .width(self.adWidth)
        .height(self.adHeight)
        .html(template)
        .find('.gl-main')
        .width(self.adWidth)
        .height(self.adHeight);

    self.trace(options);

    self.init = function() {};
    self.initComplete = function() {
        self.log('Enabler is ready to go!');

        self.log('gl_isMobile =', gl_isMobile);

        var campaignAdId = gl_getParameter('campaignAdId');
        if (campaignAdId) {
            self.campaignAdId = campaignAdId;
            self.skipAnimation = (gl_getParameter('skipAnimation') == '1');
            self.userZip = gl_getUserZipCode();

            gl_get('//ddlrequest.goodwaygroup.com/2.0/GoLive/GetIpAddress', function(data) {
                self.ipAddress = data.split('=')[1];
                self.getData(function(data) {
                    self._parseData(data);
                    self.formatPaths();
                    self._buildAd();
                });
            });
        } else {
            var params = document.location.search.substr(1).split('&');
            params.forEach(function(p) {
                var a = p.split('=');
                var k = a[0];
                var v = a[1];
                switch (k) {
                    case 'isTest':
                        self.isTest = (v == '1');
                        break;
                    case 'brand':
                    case 'model':
                        self[k] = v;
                        break;
                    case 'year':
                        self.modelYear = v;
                        break;
                    case 'background':
                    case 'logo':
                    case 'message':
                    case 'offer':
                        self[k + 'Path'] = v;
                        break;
                    case 'feature':
                        self.featurePath = v;
                        self.hasFeature = !String.isNullOrEmpty(v);
                        break;
                    case 'offers':
                        self.offers = String.isNullOrEmpty(v) ? [] : v.split(',');
                        self.isDualOffer = self.offers.length > 0;
                        if (self.isDualOffer) {
                            self.dualOfferConditional = self.offers.splice(1, 1)[0];
                        }
                        break;
                    case 'coopind':
                        self.isCoop = (v == '1');
                        break;
                    case 'dealernumber':
                        self.dealerNumber = v;
                        break;
                    default:
                        break;
                }
            });
            var root = String.format('//ddlrequest.goodwaygroup.com/assets{0}', self.isTest ? '/TEST' : '');
            var url = String.format('{0}/{1}/{2}/{3}/HTML5/_NXG', root, self.brand, self.model, self.modelYear);
            self.backgroundPath = String.format('{0}/Backgrounds/background{1}_{2}', url, self.backgroundPath, self.adSize);
            self.logoPath = self.isCoop ? String.format('{0}/COOP/DEALER/_NXG/{1}/logo_{2}', root, self.dealerNumber, self.adSize) : String.format('{0}/Logos/logo{1}_{2}', url, self.logoPath, self.adSize);        
            self.messagePath = String.format('{0}/Messages/message{1}_{2}', url, self.messagePath, self.adSize);
            self.offerPath = String.format('{0}/Offers/offer{1}_{2}', url, self.offerPath, self.adSize);
            self.featurePath = String.format('{0}/Features/feature{1}_{2}', url, self.featurePath, self.adSize);

            gl_featurePath = String.format('{0}/Features', url);
            gl_messagePath = String.format('{0}/Messages', url);
            gl_offerPath = String.format('{0}/Offers', url);

            if (self.isDualOffer) {
                console.info(self.offers);
                self.offers.forEach(function(offer, i) {
                    self.offers[i] = new GLMobileOffer({
                        LegalText: 'legal text ' + offer,
                        LegalTextBold: 'legal text bold ' + offer,
                        Path: String.format('{0}/Offers/offer{1}_{2}', url, offer, self.adSize)
                    });
                });
            }

            self._buildAd();
        }
    };
    self.getData = function(onSuccess, onError) {
        var url = String.format('//ddlrequest.goodwaygroup.com/2.0/v6_1/GoLive/ProcessasJson?CampaignAdId={0}&userZip={1}&TestMode={2}&IPAddress={3}', self.campaignAdId, self.userZip, self.testMode, self.ipAddress);
        gl_get(url, function(data) {
            data = JSON.parse(data);
            if (data.success) {
                if (onSuccess) {
                    onSuccess(data);
                }
            } else {
                if (onError) {
                    onError();
                }
            }
        });
    };
    self._parseData = function(data) {
        for (var i = 0; i < data.data.length; i++) {
            var d = data.data[i];
            var o = d[0];
            if (o.ObjectType == 'AD') {
                self.brand = o.Brand;
                self.backgroundPath = o.BackgroundPath;
                self.changeId = o.ChangeID;
                self.clickUrl = o.DefaultClickURL;
                self.dualOfferConditional = o.DualOfferConditional;
                self.featurePath = o.FeaturePath;
                self.hasFeature = parseInt(o.FeatureInd) == 1;
                self.isDualOffer = !String.isNullOrEmpty(self.dualOfferConditional);
                self.locale = o.Locale || 'en-US';
                self.logoPath = o.CustomLogoPath;
                if(self.logoPath.contains("DEALER")){
                    console.log("ORIGINAL LOGO PATH " + self.logoPath)
                    self.logoPath = self.logoPath.replace("/_nxg", "");
                    console.log("LOGO PATH " + self.logoPath)
                }
                self.messagePath = o.BannerMessagePath;
                self.model = o.Model;
                self.modelYear = String.isNullOrEmpty(o.ModelYear) ? (new Date()).getFullYear() : o.ModelYear;
                self.offerPath = o.OfferPath;

                function _getPath(path) {
                    var p = path.split('/');
                    p.pop();
                    return p.join('/');
                }

                gl_featurePath = self.formatPath(_getPath(self.featurePath));
                gl_messagePath = self.formatPath(_getPath(self.messagePath));
                gl_offerPath = self.formatPath(_getPath(self.offerPath));
            }
        }
        self.parseData(data);
    };
    self.parseData = function(data) {

    };
    self._buildAd = function() {
        self.brandIncludesPath = String.format('//{0}.goodwaygroup.com/assets/{1}{2}/_includes/nxg', self.isTest ? 'ddlrequest' : 'cdn', self.isTest ? 'test/' : '', self.brand);
        self.staticLogo = String.format('{0}/logos/brandLogo_{1}x{2}', self.brandIncludesPath, self.adWidth, self.adHeight);

        gl_loadStyle(String.format('{0}/css/brands/{1}/{2}/styles.min.css', gl_url, self.brand, self.modelYear));

        gl_loadScript(String.format('{0}/js/brands/{1}/{2}/message.min.js', gl_url, self.brand, self.modelYear), function(url) {
            gl_loadScript(String.format('{0}/js/brands/{1}/{2}/message_{3}x{4}.min.js', gl_url, self.brand, self.modelYear, self.adWidth, self.adHeight), function(url) {
                self.buildAd();
            });
        });
    };
    self.buildAd = function() {
        self.trace(self);
        self.trace(gl_featurePath);
        self.trace(gl_messagePath);
        self.trace(gl_offerPath);
    };
    self.buildAdComplete = function() {
        self.target
            .find('.gl-asset')
            .width(self.adWidth)
            .height(self.adHeight);
    };
    self.clickOut = function(name, url) {
        if ((name == undefined) || (name == null)) {
            name = ExitId.MAIN_EXIT;
        }
        if ((url == undefined) || (url == null)) {
            url = self.getClickOutUrl();
        }
        gl_exit(name, url);
    };
};
