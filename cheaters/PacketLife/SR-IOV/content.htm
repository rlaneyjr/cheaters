<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>SR-IOV</title><style type="text/css"> * {margin:0; padding:0; text-indent:0; }
 .s1 { color: black; font-family:"PT Sans Caption", sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 14pt; }
 .s2 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 14pt; }
 .p, p { color: black; font-family:"PT Sans", sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 11pt; margin:0pt; }
 .s3 { color: black; font-family:"Trebuchet MS", sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 13pt; }
 .s4 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 13pt; }
 .s5 { color: black; font-family:"PT Sans", sans-serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 11pt; }
 .s6 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 11pt; }
 h2 { color: black; font-family:"PT Sans", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 11pt; }
 .s7 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 11pt; }
 .s8 { color: black; font-family:"PT Sans Caption", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 12pt; }
 .s9 { color: black; font-family:"PT Sans Caption", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 11pt; }
 .s10 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 .s11 { color: black; font-family:Arial, sans-serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 8pt; }
 .h3 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 8pt; }
 .s12 { color: black; font-family:"Times New Roman", serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 11pt; }
 .s13 { color: black; font-family:Arial-BoldItalicMT, sans-serif; font-style: italic; font-weight: bold; text-decoration: none; font-size: 8pt; }
 .s14 { color: black; font-family:"PT Sans", sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 h1 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 12pt; }
 .a, a { color: #1154CC; font-family:"PT Sans", sans-serif; font-style: normal; font-weight: normal; text-decoration: underline; font-size: 11pt; }
 li {display: block; }
 #l1 {padding-left: 0pt;counter-reset: c1 2; }
 #l1> li:before {counter-increment: c1; content: counter(c1, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l2 {padding-left: 0pt;counter-reset: c2 3; }
 #l2> li:before {counter-increment: c2; content: counter(c1, decimal)"."counter(c2, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l3 {padding-left: 0pt;counter-reset: c3 3; }
 #l3> li:before {counter-increment: c3; content: counter(c1, decimal)"."counter(c2, decimal)"."counter(c3, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l4 {padding-left: 0pt;counter-reset: c4 0; }
 #l4> li:before {counter-increment: c4; content: counter(c1, decimal)"."counter(c2, decimal)"."counter(c3, decimal)"."counter(c4, decimal)" "; color: black; font-family:"PT Sans Caption", sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 14pt; }
 #l5 {padding-left: 0pt; }
 #l5> li:before {content: "● "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 11pt; }
 li {display: block; }
 #l6 {padding-left: 0pt;counter-reset: d1 2; }
 #l6> li:before {counter-increment: d1; content: counter(d1, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l7 {padding-left: 0pt;counter-reset: d2 3; }
 #l7> li:before {counter-increment: d2; content: counter(d1, decimal)"."counter(d2, decimal)" "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l8 {padding-left: 0pt;counter-reset: d3 0; }
 #l8> li:before {counter-increment: d3; content: counter(d1, decimal)"."counter(d2, decimal)"."counter(d3, decimal)" "; color: black; font-family:"PT Sans Caption", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 12pt; }
 #l9 {padding-left: 0pt;counter-reset: d4 0; }
 #l9> li:before {counter-increment: d4; content: counter(d1, decimal)"."counter(d2, decimal)"."counter(d3, decimal)"."counter(d4, decimal)" "; color: black; font-style: normal; font-weight: bold; text-decoration: none; }
 #l10 {padding-left: 0pt;counter-reset: d5 0; }
 #l10> li:before {counter-increment: d5; content: counter(d5, decimal)". "; color: black; font-family:"PT Sans", sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 11pt; }
 #l11 {padding-left: 0pt;counter-reset: d5 0; }
 #l11> li:before {counter-increment: d5; content: counter(d5, decimal)". "; color: black; font-family:"PT Sans", sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 11pt; }
 #l12 {padding-left: 0pt;counter-reset: d5 0; }
 #l12> li:before {counter-increment: d5; content: counter(d5, decimal)". "; color: black; font-family:"PT Sans", sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 11pt; }
 li {display: block; }
 #l13 {padding-left: 0pt; }
 #l13> li:before {content: "● "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 11pt; }
</style></head><body><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l1"><ol id="l2"><ol id="l3"><ol id="l4"><li style="padding-top: 5pt;padding-left: 54pt;text-indent: -48pt;text-align: left;"><p class="s1" style="display: inline;"><a name="bookmark0">T</a><span class="s2">​</span>roubleshooting</p><p style="padding-top: 21pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">You might run into the following errors:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ul id="l5"><li style="padding-left: 42pt;text-indent: -18pt;text-align: left;"><p style="display: inline;">internal error: No PCI buses available in /etc/nova/nova.conf</p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;">In this case, you&#39;ve specified the wrong hw_machine_type in /etc/nova/nova.conf</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li style="padding-left: 42pt;text-indent: -18pt;text-align: left;"><p style="display: inline;">libvirtError: unsupported configuration</p></li></ul></li></ol></ol></ol></ol><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Per-node memory binding is not supported with this version of QEMU. You may have an older version of qemu, or a stale libvirt cache.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l6"><ol id="l7"><li style="padding-left: 28pt;text-indent: -22pt;text-align: left;"><p class="s3" style="display: inline;">S<span class="s4">​</span>R-IOV</p><p style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">SR-IOV is a PCI Special Interest Group (PCI-SIG) specification for virtualizing network interfaces, representing each physical resource as a configurable entity (called a PF for Physical Function), and creating multiple virtual interfaces (VFs or Virtual Functions) with limited configurability on top of it, recruiting support for doing so from the system BIOS, and conventionally, also from the host OS or hypervisor. Among other benefits, SR-IOV makes it possible to run a very large number of network-traffic-handling VMs per compute without increasing the number of physical NICs/ports, and provides a means for pushing processing for this down into the hardware layer, off-loading this task from the hypervisor and significantly improving both throughput and deterministic network performance. That’s why it’s an NFV must-have.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Note: On Intel NICs, PFs cannot support promiscuous mode when SR-IOV is enabled, so it cannot do L2 bridging. Because of this, you shouldn’t enable SR-IOV on interfaces that have standard Fuel networks assigned to them. (You may use SR-IOV on the interface that is used only by Fuel Private network if you use nova host aggregates and different flavors for normal and SR-IOV enabled instances, as shown in the section “Using SR-IOV“).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Note: SR-IOV has a couple of limitations in the Kilo release of OpenStack. Most notably, instance migration with SR-IOV attached ports is not supported. Also, iptables-based filtering is not usable with SR-IOV NICs, because</p><p class="s5" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">SR-IOV bypasses the normal network stack, so security groups cannot be used with SR-IOV enabled ports (though you still can use security groups for normal ports).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;">In the following examples, we will assume ‘<span class="s6">​</span><b>eth1</b>’<span class="s7">​</span>is an SR-IOV interface.</p><p style="padding-top: 15pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Note: These instructions apply only to OpenStack Neutron with Open vSwitch.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l8"><li style="padding-top: 5pt;padding-left: 35pt;text-indent: -30pt;text-align: left;"><p class="s8" style="display: inline;"><a name="a0">Enabling SR-IOV</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;">To enable SR-IOV, you need to configure it on both the compute and the controller nodes. Let’s start with the compute nodes.</p><ol id="l9"><li style="padding-top: 7pt;padding-left: 43pt;text-indent: -38pt;text-align: left;"><p class="s9" style="display: inline;"><a name="a1">Configure SR-IOV on the Compute nodes</a></p><p style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">To enable SR-IOV, perform the following steps only on Compute nodes that will be used for running instances with SR-IOV virtual NICs:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l10"><li style="padding-left: 41pt;text-indent: -18pt;text-align: left;"><p style="display: inline;">Ensure that your compute nodes are capable of PCI passthrough and SR-IOV. Your hardware must provide VT-d and SR-IOV capabilities and these extensions may need to be enabled in the BIOS. VT-d options are usually configured in the Chipset Configuration/North Bridge/IIO configuration” section of the BIOS, while SR-IOV support is configured in “PCIe/PCI/PnP Configuration.”</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;">If your system supports VT-d you should see these messages related to DMAR in dmesg output:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-left: 41pt;text-indent: 0pt;text-align: left;"># grep-idmar/var/log/dmesg</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">[      0.000] ACPI: DMAR000079d3186000140(v01ALASKA    AMI  00001INTL2091013)</p><p class="s11" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">[      0.06193] dmar: Hostadres  width46</p><p class="s11" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">[      0.06196] dmar: DRHDbase: 0x000fbfc00flags: 0x0</p><p class="s11" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;line-height: 122%;text-align: left;">[      0.06204] dmar: IOMU0: reg_base_adrfbfc00ver1:0capd2078c106f046  ecapf020de [      0.06207] dmar: DRHDbase: 0x000c7fc00flags: 0x1</p><p class="s11" style="padding-left: 41pt;text-indent: 0pt;line-height: 122%;text-align: left;">[      0.062012] dmar: IOMU1: reg_base_adrc7fc00ver1:0capd2078c106f046  ecapf020de [      0.062014] dmar: RMR  base: 0x0007bc9400end: 0x0007bca2ff</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">This is just an example, of course; your output may differ.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;">If your system supports SR-IOV, you should see SR-IOV capability section for each NIC PF, and the total number of VFs should be non-zero:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-left: 41pt;text-indent: 0pt;text-align: left;"># lspci-vv| grep-i&quot;initialvf&quot;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 41pt;text-indent: 0pt;line-height: 122%;text-align: left;">Initial VFs: 64, Total VFs: 64, Numberof VFs: 0, Function Dependency Link: 0 Initial VFs: 64, Total VFs: 64, Numberof VFs: 0, Function Dependency Link: 01 Initial VFs: 8, Total VFs: 8, Numberof VFs: 0, Function Dependency Link: 0 Initial VFs: 8, Total VFs: 8, Numberof VFs: 0, Function Dependency Link: 01</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li style="padding-top: 11pt;padding-left: 23pt;text-indent: -18pt;text-align: left;"><p style="display: inline;">Check that VT-d is enabled in the kernel using this command:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-left: 23pt;text-indent: 0pt;text-align: justify;"># grep-i&quot;iomu.*enabled&quot;/var/log/dmesg</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">If you don’t see a response similar to:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">[0.000] Intel-IOMU: enabled</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">then it’s not yet enabled.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">Enable it by adding the following line to the end of <span class="s6">​</span><b>/etc/default/grub</b><span class="s7">​</span>:</p><p class="s10" style="padding-top: 16pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">GRUB_CMDLINE_LINUX=&quot;$GRUB_CMDLINE_LINUX​<b>intel_iomu=on​</b>&quot;</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li style="padding-left: 23pt;text-indent: -18pt;text-align: left;"><p style="display: inline;">Update grub and reboot to get the changes to take effect:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-left: 23pt;text-indent: 0pt;text-align: justify;"># update-grub</p><p class="s10" style="padding-top: 2pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;"># rebot</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: justify;">and repeat the check. For new environments, you may want to add these kernel parameters before deploying so that they will be applied to all nodes of environment. (You can do that from the Fuel interface in the “Kernel Parameters” section of the “Settings” tab.)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">NOTE: If you have an AMD motherboard, you need to check for ‘AMD-Vi’ in the output of the dmesg command and pass the options “iommu=pt iommu=1<span class="s12">″ </span>to kernel, (but we haven’t yet tested that).</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li style="padding-left: 23pt;text-indent: -18pt;text-align: left;"><p style="display: inline;">Enable the number of virtual functions required on the SR-IOV interface. Do not set the number of VFs to more than required, since this might degrade performance. Depending on kernel and NIC driver version you might get more queues on each PF with fewer VFs (usually, fewer than 32).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: justify;">First, enable the interface:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-left: 23pt;text-indent: 0pt;text-align: justify;"># iplinkseteth1up</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Next, from the command-line, get the maximum number of functions that could potentially be enabled for your NIC:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 3pt;padding-left: 23pt;text-indent: 0pt;text-align: left;"># cat/sys/clas/net/eth1/device/sriov_totalvfs</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Then enable the desired number of virtual functions for your NIC:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-left: 23pt;text-indent: 0pt;text-align: left;"># echo​<b>30​</b>&gt;/sys/clas/net/eth1/device/sriov_numvfs</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">NOTE: To change the number to some other value afterwards you need to execute the following command first:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 23pt;text-indent: 0pt;text-align: left;"># echo0&gt;/sys/clas/net/eth1/device/sriov_numvfs</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">NOTE: These settings aren’t saved across reboots. To save them, add them to /etc/rc.local:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 23pt;text-indent: 0pt;line-height: 122%;text-align: left;">echo&quot;iplinkseteth1up&quot;&gt;  /etc/rc.local                                                                                                                                                                                                                    echo&quot;echo <span class="s13">3</span>​<span class="s13">0​</span>&gt;/sys/clas/net/​<span class="s13">eth1</span>/<span class="s13">​</span>device/sriov_numvfs&quot;&gt;  /etc/rc.local</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">NOTE: By default, Mirantis OpenStack 7.0 supports a maximum of 30 VFs. If you need more than 30, you will need to install a newer version of libnl3, like so:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 23pt;text-indent: 0pt;text-align: left;"># wgethtps:/ launchpad.net/ubuntu/+archive/primary/+files/libnl-3-20_3.2.24-2_amd64.deb</p><p class="s11" style="padding-top: 2pt;padding-left: 23pt;text-indent: 0pt;text-align: left;"># wgethtps:/ launchpad.net/ubuntu/+archive/primary/+files/libnl-genl-3-20_3.2.24-2_amd64.deb</p><p class="s11" style="padding-top: 2pt;padding-left: 23pt;text-indent: 0pt;text-align: left;"># wgethtps:/ launchpad.net/ubuntu/+archive/primary/+files/libnl-route-3-20_3.2.24-2_amd64.deb</p><p class="s11" style="padding-top: 2pt;padding-left: 23pt;text-indent: 0pt;text-align: left;"># dpkg-ilibnl-3-20_3.2.24-2_amd64.deb</p><p class="s11" style="padding-top: 2pt;padding-left: 23pt;text-indent: 0pt;text-align: left;"># dpkg-ilibnl-genl-3-20_3.2.24-2_amd64.deb</p><p class="s11" style="padding-top: 2pt;padding-left: 23pt;text-indent: 0pt;text-align: left;"># dpkg-ilibnl-route-3-20_3.2.24-2_amd64.deb</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s5" style="padding-top: 7pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">and restart libvirtd</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 23pt;text-indent: 0pt;text-align: left;"># servicelibvirtdrestart</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li style="padding-top: 7pt;padding-left: 23pt;text-indent: -18pt;text-align: left;"><p style="display: inline;">Check to make sure that SR-IOV is enabled:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-left: 23pt;text-indent: 0pt;text-align: left;"># iplinkshoweth1|grepvf</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-left: 27pt;text-indent: 0pt;line-height: 122%;text-align: left;">vf0MAC0:0:0:0:0:0, spofcheckingon, link-stateauto vf1MACc2:cd:57:9b:6c:7d, spofcheckingon, link-stateauto</p><p class="s10" style="padding-left: 27pt;text-indent: 0pt;text-align: left;">…</p><p style="padding-top: 12pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">If you don’t see ‘link-state auto’ in output, then your installation will require an SR-IOV agent. You can enable it like so:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-left: 41pt;text-indent: 0pt;text-align: left;"># apt-getinstal  neutron-plugin-sriov-agent</p><p class="s10" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"># nohupneutron-sriov-nic-agent- debug- log-file/tmp/sriov_agent- config-file\</p><p class="s10" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">/etc/neutron/neutron.conf- config-file/etc/neutron/plugins/ml2/ml2_conf_sriov.ini&amp;</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li style="padding-top: 7pt;padding-left: 41pt;text-indent: -18pt;text-align: left;"><p style="display: inline;">Edit <span class="s6">​</span><b>/etc/nova/nova.conf</b><span class="s7">​</span>to add the NIC to the <span class="s6">​</span><b>pci_passthrough_whitelist</b><span class="s7">​</span>parameter:</p><p class="s14" style="padding-top: 15pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">pci_passthrough_whitelist={&quot;devname&quot;: &quot;<span class="s10">​</span><b>eth1</b><span class="h3">​</span>&quot;, &quot;physical_network&quot;:&quot;physnet2&quot;}</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li style="padding-left: 41pt;text-indent: -18pt;text-align: left;"><p style="display: inline;">Edit <span class="s6">​</span><b>/etc/neutron/plugins/ml2/ml2_conf_sriov.ini</b><span class="s7">​</span>to add the mapping:</p><p class="s14" style="padding-top: 15pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">[sriov_nic]</p><p class="s14" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">physical_device_mappings = physnet2:<span class="s10">​</span><b>eth1</b></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li style="padding-left: 41pt;text-indent: -18pt;text-align: left;"><p style="display: inline;">Restart the compute service:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-left: 41pt;text-indent: 0pt;text-align: left;"># restartnova-compute</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li style="padding-top: 7pt;padding-left: 41pt;text-indent: -18pt;text-align: left;"><p style="display: inline;">Get the vendor’s product id; you’ll need it to configure SR-IOV on the controller nodes.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-left: 41pt;text-indent: 0pt;text-align: left;"># lspci-n  | grep-e&quot;Ethernet.*Virtual&quot;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-left: 41pt;text-indent: 0pt;line-height: 122%;text-align: left;">06:10.1Ethernetcontroler[020]: Intel Corporation8259  Ethernet Controler Virtual Function[8086:10ed] (rev01)</p><p class="s10" style="padding-left: 41pt;text-indent: 0pt;line-height: 122%;text-align: left;">06:10.3Ethernetcontroler[020]: Intel Corporation8259  Ethernet Controler Virtual Function[8086:10ed] (rev01)</p><p class="s6" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">…</p><p style="padding-top: 16pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">(This is just an example of the output. The actual value may differ on your hardware.)</p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Write down the vendor’s product id (the value in square brackets, such as <span class="s6">​</span><b>8086:10ed</b><span class="s7">​</span>in this case).</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li></ol></li><li style="padding-left: 45pt;text-indent: -40pt;text-align: left;"><h1 style="display: inline;"><a name="a2">Configure SR­IOV on the Controller nodes</a></h1><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Next you&#39;ll need to configure SR-IOV on the controller nodes, as follows:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l11"><li style="padding-left: 41pt;text-indent: -18pt;text-align: left;"><p style="display: inline;">Edit <span class="s6">​</span><b>/etc/neutron/plugins/ml2/ml2_conf.ini</b><span class="s7">​</span>to add <span class="s6">​</span><b>sriovnicswitch</b><span class="s7">​</span>to the list of mechanism drivers:</p><p class="s14" style="padding-top: 15pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">mechanism_drivers =openvswitch, l2population, <span class="s10">​</span><b>sriovnicswitch</b></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li style="padding-top: 5pt;padding-left: 41pt;text-indent: -18pt;text-align: left;"><p style="display: inline;">And add new section at the end of the file:</p><p class="s10" style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;line-height: 127%;text-align: left;">[ml2_sriov] supported_pci<b>8</b>_<b>0</b>=​v<b>8</b>e<b>6</b>n<b>:</b>d<b>1</b>o<b>0</b>r<b>e</b>_<b>d</b>devs</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Use the vendor’s product id from the step 4.2.1.8 as the value for supported_pci_vendor_devs.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li style="padding-left: 41pt;text-indent: -18pt;text-align: left;"><p style="display: inline;">Add PciPassthroughFilter and AggregateInstanceExtraSpecsFilter to the list of scheduler filters in</p><h2 style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a3">/etc/nova/nova.conf</a><span class="s7">​</span><span class="p">:</span></h2><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 3pt;padding-left: 40pt;text-indent: 0pt;line-height: 114%;text-align: justify;">scheduler_default_filters=DifferentHostFilter,RetryFilter,Avlaila ter,ComputeFilter,ComputeCapabilitiesFilter,ImagePropertiesFilte Affinit<b>P</b>y<b>c</b>F​<b>i</b>i<b>P</b>l<b>a</b>t<b>s</b>e<b>s</b>r<b>t</b>,<b>hro</b>A<b>u</b>g<b>​g</b>g<b>h</b>r<b>F</b>e<b>i</b>g<b>l</b>a<b>t</b>t<b>e</b>e<b>r</b>I<b>,</b>nstanceExtraSpecsFilter</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li style="padding-left: 41pt;text-indent: -18pt;text-align: left;"><p style="display: inline;">Restart services so the changes will take effect:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s14" style="padding-left: 40pt;text-indent: 0pt;text-align: justify;"># restart neutron-server</p><p class="s14" style="padding-top: 1pt;padding-left: 40pt;text-indent: 0pt;text-align: justify;"># restart nova-scheduler</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li></ol></li><li style="padding-top: 8pt;padding-left: 53pt;text-indent: -48pt;text-align: left;"><p class="s1" style="display: inline;"><a name="a4">Using SR-IOV</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Now you’re ready to actually use SR-IOV. Like the previous sections, this is mostly a matter of making sure workloads run where they&#39;re supposed to. You can ensure that as follows:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l12"><li style="padding-left: 41pt;text-indent: -18pt;text-align: left;"><p style="display: inline;">Create a separate host aggregates for SR-IOV enabled computes and non-SR-IOV enabled computes.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"># novaagregate-createsriov</p><p class="s10" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"># novaagregate-set-metadatasriovsriov=true</p><p class="s10" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"># novaagregate-createnormal</p><p class="s10" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"># novaagregate-set-metadatanormalsriov=false</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li style="padding-top: 7pt;padding-left: 41pt;text-indent: -18pt;text-align: left;"><p style="display: inline;">Add one or more hosts to them:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"># novaagregate-ad-hostsriovnode-9.domain.tld</p><p class="s10" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"># novaagregate-ad-hostnormalnode-10.domain.tld</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li style="padding-top: 7pt;padding-left: 41pt;text-indent: -18pt;text-align: left;"><p style="display: inline;">Create a new flavor for VMs that require SR-IOV support:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"># novaflavor-createm1.smal.sriovauto2048202</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-left: 41pt;text-indent: 0pt;text-align: left;"># novaflavor-keym1.smal.sriovsetagregate_instance_extra_specs:sriov=true</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li style="padding-top: 7pt;padding-left: 41pt;text-indent: -18pt;text-align: left;"><p style="display: inline;">Update all other flavors so they will start only on hosts without SR-IOV support:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-left: 41pt;text-indent: 0pt;line-height: 122%;text-align: left;"># openstackflavorlist-fcsv|grep-vsriov|cut-f1-d,| tail-n+2|\ xargs-I%-n1novaflavor-key% setagregate_instance_extra_specs:sriov=false</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li style="padding-top: 5pt;padding-left: 41pt;text-indent: -18pt;text-align: left;"><p style="display: inline;">To use the SR-IOV port you need to create an instance with ports that use the vnic-type “direct”. For now, you have to do this via the command line. Create a port for the instance:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-left: 41pt;text-indent: 0pt;text-align: left;"># neutronport-createnet04- binding:vnic-typedirect- device_ownernova-compute- name​<b>sriov-port1</b></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li style="padding-left: 41pt;text-indent: -18pt;text-align: left;"><p style="display: inline;">Because the default Cirros image does not have the Intel NIC drivers included, we’ll use an Ubuntu cloud image to test SR-IOV. See the Appendix A2 on how to prepare it.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li style="padding-left: 41pt;text-indent: -18pt;text-align: left;"><p style="display: inline;">Spawn the instance.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-left: 41pt;text-indent: 0pt;text-align: left;"># port_id=`neutronport-list| awk&#39;/sriov-port1/{print$2}&#39;`</p><p class="s10" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"># novabot- flavorm1.smal.sriov- imagetrusty- key_name​<b>key1​</b>- nicport-id=$port_id​<b>sriov-vm1</b></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li style="padding-left: 41pt;text-indent: -18pt;text-align: left;"><p style="display: inline;">Get the node’s ip address:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-left: 41pt;text-indent: 0pt;line-height: 245%;text-align: left;"># novalist| awk&#39;/sriov-vm1/{print$12}&#39; net04=192.168.11.5</p></li><li style="padding-top: 3pt;padding-left: 41pt;text-indent: -18pt;text-align: left;"><p style="display: inline;">Connect to the instance to make sure everything is up and running by first finding the controllers with a namespace that has access to the instance ...</p><p class="s10" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;line-height: 23pt;text-align: left;"># neutrondhcp-agent-list-hosting-net-fcsv-chostnet04- quotenone| tail-n+2 node-7.domain.tld</p><p class="s10" style="padding-left: 41pt;text-indent: 0pt;line-height: 8pt;text-align: left;">node-9.domain.tld</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">... and then connecting to the instance from one of those controllers.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-left: 41pt;text-indent: 0pt;line-height: 122%;text-align: left;"># ipnetnsexec`ipnetnsshow|grepqdhcp-$(neutronnet-list| awk&#39;/net04/{print$2}&#39;)` sh-ikey1.pem ubuntu@​<b>192.168.11.5</b></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h2 style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="a5">A note about I/O aware NUMA scheduling</a></h2><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a href="https://specs.openstack.org/openstack/nova-specs/specs/kilo/implemented/input-output-based-numa-scheduling.html" style=" color: black; font-family:&quot;PT Sans&quot;, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 11pt;" target="_blank">Be aware that even if your compute host has multiple CPUs, only one of the CPUs has direct access to a particular I/O card. When a process running on one CPU gets access tothe I/O card that is local to the other CPU, you&#39;ll see a performance penalty. See more on this topic at </a><a href="https://specs.openstack.org/openstack/nova-specs/specs/kilo/implemented/input-output-based-numa-scheduling.html" class="a" target="_blank">https://specs.openstack.org/openstack/nova-specs/specs/kilo/implemented/input-output-based-numa-sched </a><a href="https://specs.openstack.org/openstack/nova-specs/specs/kilo/implemented/input-output-based-numa-scheduling.html" target="_blank">uling.html</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">When you use CPU pinning (instances with hw:cpu_policy=dedicated extra specification) and SR-IOV at the same time, an SR-IOV enabled instance will start <span class="s6">​</span><b>only</b><span class="s7">​</span>on a CPU that has direct access to SR-IOV card. When there is not enough resources in this CPU’s NUMA cell, the instance will fail to start.</p></li></ol></li><li style="padding-top: 6pt;padding-left: 53pt;text-indent: -48pt;text-align: left;"><p class="s1" style="display: inline;"><a name="a6">Troubleshooting</a></p></li></ol></li></ol></li></ol></ol><p style="text-indent: 0pt;text-align: left;"><br/></p><ul id="l13"><li style="padding-left: 41pt;text-indent: -18pt;text-align: left;"><p style="display: inline;">If you see errors in /var/log/nova/nova-compute.log on the compute host:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h2 style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a7">libvirtError: internal error: missing IFLA_VF_INFO in netlink response</a></h2><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">… <span class="p">you should install a newer version of libnl3, as shown above.</span></p></li><li style="padding-top: 15pt;padding-left: 41pt;text-indent: -18pt;text-align: left;"><p style="display: inline;">If you see:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h2 style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a8">libvirtError: unsupported configuration: host doesn&#39;t support passthrough of host PCI devices</a></h2><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">… <span class="p">it means that VT-d is not supported or not enabled.</span></p></li><li style="padding-top: 15pt;padding-left: 41pt;text-indent: -18pt;text-align: left;"><p style="display: inline;">If you see:</p></li></ul><p style="text-indent: 0pt;text-align: left;"><br/></p><h2 style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a9">NovaException: Unexpected vif_type=binding_failed</a></h2><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">… <span class="p">you should enable the SR-IOV agent, or if you’ve already done so, make sure that it’s running:</span></p><p class="s10" style="padding-top: 16pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"># neutronagent-list| grepsriov-nic-agent</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-left: 41pt;text-indent: 0pt;line-height: 122%;text-align: left;">| dfa4edcf-63c1-4af7-a291-ec139a16f346| NICSwitchagent| node-16.domain.tld|:-)| True| neutron-sriov-nic-agent|</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Otherwise, examine the log file <span class="s6">​</span><b>/tmp/sriov_agent</b><span class="s7">​</span>for clues to what else might be wrong.</p></body></html>
