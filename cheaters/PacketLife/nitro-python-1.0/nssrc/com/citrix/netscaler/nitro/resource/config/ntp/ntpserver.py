#
# Copyright (c) 2008-2015 Citrix Systems, Inc.
#
#   Licensed under the Apache License, Version 2.0 (the "License")
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#

from nssrc.com.citrix.netscaler.nitro.resource.base.base_resource import base_resource
from nssrc.com.citrix.netscaler.nitro.resource.base.base_resource import base_response
from nssrc.com.citrix.netscaler.nitro.service.options import options
from nssrc.com.citrix.netscaler.nitro.exception.nitro_exception import nitro_exception

from nssrc.com.citrix.netscaler.nitro.util.nitro_util import nitro_util

class ntpserver(base_resource) :
	""" Configuration for NTP server resource. """
	def __init__(self) :
		self._serverip = ""
		self._servername = ""
		self._minpoll = 0
		self._maxpoll = 0
		self._autokey = False
		self._key = 0
		self._preferredntpserver = ""
		self.___count = 0

	@property
	def serverip(self) :
		ur"""IP address of the NTP server.<br/>Minimum length =  1.
		"""
		try :
			return self._serverip
		except Exception as e:
			raise e

	@serverip.setter
	def serverip(self, serverip) :
		ur"""IP address of the NTP server.<br/>Minimum length =  1
		"""
		try :
			self._serverip = serverip
		except Exception as e:
			raise e

	@property
	def servername(self) :
		ur"""Fully qualified domain name of the NTP server.
		"""
		try :
			return self._servername
		except Exception as e:
			raise e

	@servername.setter
	def servername(self, servername) :
		ur"""Fully qualified domain name of the NTP server.
		"""
		try :
			self._servername = servername
		except Exception as e:
			raise e

	@property
	def minpoll(self) :
		ur"""Minimum time after which the NTP server must poll the NTP messages. In seconds, expressed as a power of 2.<br/>Minimum length =  4<br/>Maximum length =  17.
		"""
		try :
			return self._minpoll
		except Exception as e:
			raise e

	@minpoll.setter
	def minpoll(self, minpoll) :
		ur"""Minimum time after which the NTP server must poll the NTP messages. In seconds, expressed as a power of 2.<br/>Minimum length =  4<br/>Maximum length =  17
		"""
		try :
			self._minpoll = minpoll
		except Exception as e:
			raise e

	@property
	def maxpoll(self) :
		ur"""Maximum time after which the NTP server must poll the NTP messages. In seconds, expressed as a power of 2.<br/>Minimum length =  4<br/>Maximum length =  17.
		"""
		try :
			return self._maxpoll
		except Exception as e:
			raise e

	@maxpoll.setter
	def maxpoll(self, maxpoll) :
		ur"""Maximum time after which the NTP server must poll the NTP messages. In seconds, expressed as a power of 2.<br/>Minimum length =  4<br/>Maximum length =  17
		"""
		try :
			self._maxpoll = maxpoll
		except Exception as e:
			raise e

	@property
	def autokey(self) :
		ur"""Use the Autokey protocol for key management for this server, with the cryptographic values (for example, symmetric key, host and public certificate files, and sign key) generated by the ntp-keygen utility. To require authentication for communication with the server, you must set either the value of this parameter or the key parameter.
		"""
		try :
			return self._autokey
		except Exception as e:
			raise e

	@autokey.setter
	def autokey(self, autokey) :
		ur"""Use the Autokey protocol for key management for this server, with the cryptographic values (for example, symmetric key, host and public certificate files, and sign key) generated by the ntp-keygen utility. To require authentication for communication with the server, you must set either the value of this parameter or the key parameter.
		"""
		try :
			self._autokey = autokey
		except Exception as e:
			raise e

	@property
	def key(self) :
		ur"""Key to use for encrypting authentication fields. All packets sent to and received from the server must include authentication fields encrypted by using this key. To require authentication for communication with the server, you must set either the value of this parameter or the autokey parameter.<br/>Minimum length =  1<br/>Maximum length =  65534.
		"""
		try :
			return self._key
		except Exception as e:
			raise e

	@key.setter
	def key(self, key) :
		ur"""Key to use for encrypting authentication fields. All packets sent to and received from the server must include authentication fields encrypted by using this key. To require authentication for communication with the server, you must set either the value of this parameter or the autokey parameter.<br/>Minimum length =  1<br/>Maximum length =  65534
		"""
		try :
			self._key = key
		except Exception as e:
			raise e

	@property
	def preferredntpserver(self) :
		ur"""Preferred NTP server. The NetScaler appliance chooses this NTP server for time synchronization among a set of correctly operating hosts.<br/>Default value: NO<br/>Possible values = YES, NO.
		"""
		try :
			return self._preferredntpserver
		except Exception as e:
			raise e

	@preferredntpserver.setter
	def preferredntpserver(self, preferredntpserver) :
		ur"""Preferred NTP server. The NetScaler appliance chooses this NTP server for time synchronization among a set of correctly operating hosts.<br/>Default value: NO<br/>Possible values = YES, NO
		"""
		try :
			self._preferredntpserver = preferredntpserver
		except Exception as e:
			raise e

	def _get_nitro_response(self, service, response) :
		ur""" converts nitro response into object and returns the object array in case of get request.
		"""
		try :
			result = service.payload_formatter.string_to_resource(ntpserver_response, response, self.__class__.__name__)
			if(result.errorcode != 0) :
				if (result.errorcode == 444) :
					service.clear_session(self)
				if result.severity :
					if (result.severity == "ERROR") :
						raise nitro_exception(result.errorcode, str(result.message), str(result.severity))
				else :
					raise nitro_exception(result.errorcode, str(result.message), str(result.severity))
			return result.ntpserver
		except Exception as e :
			raise e

	def _get_object_name(self) :
		ur""" Returns the value of object identifier argument
		"""
		try :
			if self.serverip is not None :
				return str(self.serverip)
			return None
		except Exception as e :
			raise e



	@classmethod
	def add(cls, client, resource) :
		ur""" Use this API to add ntpserver.
		"""
		try :
			if type(resource) is not list :
				addresource = ntpserver()
				addresource.serverip = resource.serverip
				addresource.servername = resource.servername
				addresource.minpoll = resource.minpoll
				addresource.maxpoll = resource.maxpoll
				addresource.autokey = resource.autokey
				addresource.key = resource.key
				return addresource.add_resource(client)
			else :
				if (resource and len(resource) > 0) :
					addresources = [ ntpserver() for _ in range(len(resource))]
					for i in range(len(resource)) :
						addresources[i].serverip = resource[i].serverip
						addresources[i].servername = resource[i].servername
						addresources[i].minpoll = resource[i].minpoll
						addresources[i].maxpoll = resource[i].maxpoll
						addresources[i].autokey = resource[i].autokey
						addresources[i].key = resource[i].key
				result = cls.add_bulk_request(client, addresources)
			return result
		except Exception as e :
			raise e

	@classmethod
	def delete(cls, client, resource) :
		ur""" Use this API to delete ntpserver.
		"""
		try :
			if type(resource) is not list :
				deleteresource = ntpserver()
				if type(resource) !=  type(deleteresource):
					deleteresource.serverip = resource
				else :
					deleteresource.serverip = resource.serverip
					deleteresource.servername = resource.servername
				return deleteresource.delete_resource(client)
			else :
				if type(resource[0]) != cls :
					if (resource and len(resource) > 0) :
						deleteresources = [ ntpserver() for _ in range(len(resource))]
						for i in range(len(resource)) :
							deleteresources[i].serverip = resource[i]
				else :
					if (resource and len(resource) > 0) :
						deleteresources = [ ntpserver() for _ in range(len(resource))]
						for i in range(len(resource)) :
							deleteresources[i].serverip = resource[i].serverip
							deleteresources[i].servername = resource[i].servername
				result = cls.delete_bulk_request(client, deleteresources)
			return result
		except Exception as e :
			raise e

	@classmethod
	def update(cls, client, resource) :
		ur""" Use this API to update ntpserver.
		"""
		try :
			if type(resource) is not list :
				updateresource = ntpserver()
				updateresource.serverip = resource.serverip
				updateresource.servername = resource.servername
				updateresource.minpoll = resource.minpoll
				updateresource.maxpoll = resource.maxpoll
				updateresource.preferredntpserver = resource.preferredntpserver
				updateresource.autokey = resource.autokey
				updateresource.key = resource.key
				return updateresource.update_resource(client)
			else :
				if (resource and len(resource) > 0) :
					updateresources = [ ntpserver() for _ in range(len(resource))]
					for i in range(len(resource)) :
						updateresources[i].serverip = resource[i].serverip
						updateresources[i].servername = resource[i].servername
						updateresources[i].minpoll = resource[i].minpoll
						updateresources[i].maxpoll = resource[i].maxpoll
						updateresources[i].preferredntpserver = resource[i].preferredntpserver
						updateresources[i].autokey = resource[i].autokey
						updateresources[i].key = resource[i].key
				result = cls.update_bulk_request(client, updateresources)
			return result
		except Exception as e :
			raise e

	@classmethod
	def unset(cls, client, resource, args) :
		ur""" Use this API to unset the properties of ntpserver resource.
		Properties that need to be unset are specified in args array.
		"""
		try :
			if type(resource) is not list :
				unsetresource = ntpserver()
				if type(resource) !=  type(unsetresource):
					unsetresource.serverip = resource
				else :
					unsetresource.serverip = resource.serverip
					unsetresource.servername = resource.servername
				return unsetresource.unset_resource(client, args)
			else :
				if type(resource[0]) != cls :
					if (resource and len(resource) > 0) :
						unsetresources = [ ntpserver() for _ in range(len(resource))]
						for i in range(len(resource)) :
							unsetresources[i].serverip = resource[i]
				else :
					if (resource and len(resource) > 0) :
						unsetresources = [ ntpserver() for _ in range(len(resource))]
						for i in range(len(resource)) :
							unsetresources[i].serverip = resource[i].serverip
							unsetresources[i].servername = resource[i].servername
				result = cls.unset_bulk_request(client, unsetresources, args)
			return result
		except Exception as e :
			raise e

	@classmethod
	def get(cls, client, name="", option_="") :
		ur""" Use this API to fetch all the ntpserver resources that are configured on netscaler.
		"""
		try :
			if not name :
				obj = ntpserver()
				response = obj.get_resources(client, option_)
			else :
				if type(name) == cls :
					if type(name) is not list :
						option_ = options()
						option_.args = nitro_util.object_to_string_withoutquotes(name)
						response = name.get_resource(client, option_)
					else :
						if name and len(name) > 0 :
							response = [ntpserver() for _ in range(len(name))]
							for i in range(len(name)) :
								option_ = options()
								option_.args = nitro_util.object_to_string_withoutquotes(name[i])
								response[i] = name[i].get_resource(client, option_)
			return response
		except Exception as e :
			raise e


	@classmethod
	def get_filtered(cls, client, filter_) :
		ur""" Use this API to fetch filtered set of ntpserver resources.
		filter string should be in JSON format.eg: "port:80,servicetype:HTTP".
		"""
		try :
			obj = ntpserver()
			option_ = options()
			option_.filter = filter_
			response = obj.getfiltered(client, option_)
			return response
		except Exception as e :
			raise e


	@classmethod
	def count(cls, client) :
		ur""" Use this API to count the ntpserver resources configured on NetScaler.
		"""
		try :
			obj = ntpserver()
			option_ = options()
			option_.count = True
			response = obj.get_resources(client, option_)
			if response :
				return response[0].__dict__['___count']
			return 0
		except Exception as e :
			raise e

	@classmethod
	def count_filtered(cls, client, filter_) :
		ur""" Use this API to count filtered the set of ntpserver resources.
		Filter string should be in JSON format.eg: "port:80,servicetype:HTTP".
		"""
		try :
			obj = ntpserver()
			option_ = options()
			option_.count = True
			option_.filter = filter_
			response = obj.getfiltered(client, option_)
			if response :
				return response[0].__dict__['___count']
			return 0
		except Exception as e :
			raise e


	class Preferredntpserver:
		YES = "YES"
		NO = "NO"

class ntpserver_response(base_response) :
	def __init__(self, length=1) :
		self.ntpserver = []
		self.errorcode = 0
		self.message = ""
		self.severity = ""
		self.sessionid = ""
		self.ntpserver = [ntpserver() for _ in range(length)]

