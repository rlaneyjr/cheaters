VIRL Service Topology Director Server
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Service Topology Director server is the main backend of the VIRL project, used
for remote management of sessions for a set of users, each controlling a single
VIRL endpoint corresponding to a single OpenStack user.

User information and recovery
=============================

You can see all users using command (--all circumvents VIRL_STD_USER)::

    virl_std_server user-info --all

Running simulations can be cleared using the user-clear command. A best-effort
attempt will be made to remove all artefacts from OpenStack before clearing the
session itself. This command should be used as a last resort::

    virl_std_server --debug user-clear -u guest

A starting std server will attempt to tear down any incompletely started
and stopping simulations as if a simengine-stop was issued for them.

An OpenStack services' restart or reboot of the machine usually allows for a
subsequent simulation stop request to complete successfully.

Starting the server
===================

Start the server::

    [sudo] virl_std_server [--debug] run

Now the server is running and ready to communicate with the GUI.

Upon startup, any simulations that were not finished launching or stopping will
be stopped again. The launch is finished when the last node start is accepted
by the orchestration framework; it does not wait for the nodes to become active
or even finish booting their operating system.


VIRL STD client
===============

By default, STD listens on port 19399. This can be configured in virl.ini::

    virl_webservices: 19399

REST API documentation can be found in UWM,  under "Documentation / STD API".

The STD REST API is split into 4 logical areas - roster, simengine, ank and
openstack. This separation is only cosmetic, the same server handles all calls.

The global options of the script are the STD server user, password and URL.

By default, the parsed response contents are printed to standard output; the
global --json flag is available to convert the output back to JSON.

Getting version information
^^^^^^^^^^^^^^^^^^^^^^^^^^^

Each area has a test call, that returns the version of the service, along with
other version information::

    virl_std_client ank-version
    {'autonetkit-cisco-version': 'autonetkit_cisco 0.2.25',
     'autonetkit-version': 'autonetkit 0.5.20',
     'version': '1.0',
     'virl-version': '0.10.5.2'}

Using AutoNetkit to generate default configurations
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Suitable default configurations for Cisco routers can be generated by passing
a VIRL file through the ANK service. The behavior of ANK is controlled through
topology and node extension entries::

    virl_std_client ank-process -f original.virl >starter.virl

Launching a simulation
^^^^^^^^^^^^^^^^^^^^^^

Launching a simulation is roughly equivalent to the virl session-create command
with the distinction that the created session's name is returned by the service
instead of being a parameter, and a session-start is executed in a background
worker process. A copy of the virl file will be stored on the server, thus the
file used for launch can be safely removed::

    virl_std_client simengine-launch --virl-file /path/to/starter.virl
    Session ID is starter-Ewn0Mn
    export STD_SESSION=starter-Ewn0Mn

Retrieving a list of simulations
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

To retrieve just the list of current simulations and their states, use::

    virl_std_client simengine-list
    {'simulations': {'~jumphost': {'status': 'ACTIVE'}}}

Simulation status
^^^^^^^^^^^^^^^^^

Since the launch REST call returns before the topology is actually started, the
success of a launch process is not implied by the client returning error-free.

If the background worker fails, an ERROR message with the cause is added, which
can be retrieved along with the overall state of the simulation by the status
call (which would be 'FAIL' in that case). Note that the relevant key is state,
not status which is constant and never used.

An example successfully completed launch will return::

    virl_std_client simengine-status
    {'messages': ['(INFO) Found simulation ID: starter-Ewn0Mn status ACTIVE',
                  '(INFO) Started node "A"',
                  '(INFO) Launch status: ACTIVE',
                  '(INFO) Node "A" state changed from ABSENT to ACTIVE'],
     'state': 'ACTIVE',
     'status': 'INFO',
     'statusID': 173}

Please note that the 'status' key does not carry the simulation state, 'state'
does.

Getting serial ports
^^^^^^^^^^^^^^^^^^^^

Serial port connection information can be retrieved for nodes defining them.
There are at most 3 serial ports. Port 0 is always a CLI console. Port 1 is
an alternate console connection for the IOS XRv, CSR1000v and NX-OSv subtypes.

The resulting information can be provided in 3 formats. Telnet mode only works
if the STD server runs on the same single physical node as the simulation.
The default mode is a link to a websocket port, with a security token that
must be provided as the HTTP cookie upon connecting. Final mode is a webpage
served from the same location, using some JavaScript code for trivial terminal
emulator in a web browser supporting websockets.

The output format is a JSON object, with keys being the qualified node names,
and values a string describing the connection, or null if the node does not
define the specified port, or it is otherwise not available::

    virl_std_client simengine-serial-port -s pair-ciTdl_ -m websocket
    {'IOSv-1': 'ws://host:6083/websockify?token=11f0a871-bea3-4d6d-...',
     'IOS XRv-1': 'ws://host:6083/websockify?token=4e31932a-8171-4d4a-...'}

Exporting a simulation
^^^^^^^^^^^^^^^^^^^^^^

Session's original VIRL file, possibly extended with running and startup config
for all supported or selected nodes can be retrieved::

    alias std_export="virl_std_client --quiet simengine-export"
    std_export >original.virl
    std_export --updated >dynamic_ips.virl
    std_export --startup-configs >output_file.virl
    std_export -r 'custom entry' >running-all.virl
    std_export -r -n group-1::one-1 two-2 >named.virl
    std_export -r -n '//virl:node[@subtype="CSR1000v"]' >paths.virl

Some additional data, currently only the dynamic IP address assignments to
management and FLAT/SNAT interfaces, can be pushed into the exported file
with the --updated flag.

By default, no config downloads take place and the original VIRL file or a
semantically equivalent version is returned. If either of --running-config or
--startup-config flags are provided, the specified configs are downloaded and
put into the corresponding extension entries. The default entry keys can be
overridden by setting a parameter to -r, or -c, respectively.

If config downloads are not supported for a platform, or config download fails,
the node is skipped and its entries not added to the output, error ignored.

If --nodes is not specified, all nodes in the topology are processed. Otherwise
the nodes is a list of qualified node names and/or XPath 1.0 expressions using
the virl: namespace prefix to denote the VIRL XML namespace. Each expression
may select multiple nodes from the topology file to make up a cumulative set.
Note that an empty list or expressions selecting nonexistent nodes will result
in an empty set of processed nodes, which is allowed without issuing an error.

Stopping and starting nodes
^^^^^^^^^^^^^^^^^^^^^^^^^^^

The nodes in the simulated topology can be stopped and then started again.
Note that a node will be stopped only if it's already running, and started only
if it is not running at all and has been deleted from orchestration.

The node selection follows the same conventions as other subcommands::

    virl_std_client simengine-update-stop -n group-1::one-1 two-2
    # after confirming that the node isn't running:
    virl_std_client simengine-update-start -n '//virl:node[2]'

Stopping a simulation
^^^^^^^^^^^^^^^^^^^^^

Stopping a simulation actually means deleting it, thus it's equivalent to the
virl session-delete command. This command, similar to launch, runs mainly
in a background worker process, so that successful completion is indicated
by the simengine-status command's state set to "DONE"::

    virl_std_client simengine-stop
    Simengine server responded: SUCCESS

    # wait for this
    virl_std_client simengine-status
    {'messages': ['(ERROR) Could not find simulation ID: starter-Ewn0Mn'],
    'state': 'DONE',
    'status': 'INFO',
    'statusID': 1}

To wait for a limited time for a simulation stop, use the --wait parameter. The
response will be a JSON dict instead of a simple string::

    virl_std_client simengine-stop --json -w 30 \
                    -s My_Topologies@simple-server-EfP2gT
    {
      "My_Topologies@simple-server-EfP2gT": "DONE"
    }

Administrative access 
^^^^^^^^^^^^^^^^^^^^^

To list simulations of another user or all users, admin users can issue the
simengine-admin list::

    virl_std_client -u uwmadmin -p password simengine-admin-list --all-users
    {'simulations': {'guest': {'My_Topologies@simple-server-EfP2gT': 'ACTIVE'},
                  'jumped': {'Sample_Topologies@oca-Z5XvvZ': 'ACTIVE',
                              'Other_Topologies@mine-34vr5s': 'STOP',
                              '~jumphost': 'ACTIVE'},

                  'ported': {'~jumphost': 'ACTIVE'},
                  'unused': {},
                  'uwmadmin': None}}

Similarly, an admin may request a stop on any simulation::

    virl_std_client -u uwmadmin -p password simengine-admin-stop --all-users \
                    -s ~jumphost
    {'simulations': {'guest': {},
                  'jumped': {'~jumphost': 'STOP'},
                  'ported': {'~jumphost': 'STOP'},
                  'unused': {},
                  'uwmadmin': None}}

Administrators may use the simengine-systemlogs STD API call to retireve
a ZIP-file containing all VIRL-generated log files::

    virl_std_client -u uwmadmin -p password simengine-systemlogs >logs.zip

