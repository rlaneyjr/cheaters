# AWK Useful "One-liners"
1. Print the total number of input lines:
END { print NR }

2. Print the tenth input line:
NR == 10

3. Print the last field of every input line:
{ print $NF }

4. Print the last field of the last input line:
{ field = $NF}
END { print field }

5. Print every input line with more than four fields:
NF > 4

6. Print every input line in which the last field is more than 4:
$NF > 4

7. Print the total number of fields in all input lines:
{ nf ::: nf + NF }
END { print nf }

8. Print the total number of lines that contain Beth:
/Beth/ { nlines = nlines + 1 }
END { print nlines }

9. Print the largest first field and the line that contains it (assumes some
$1 is positive):
$1 > max { max = $1; maxline ~ $0
END { print max, maxline }

10. Print every line that has at least one field:
NF > 0

11. Print every line longer than 80 characters:
length($0) > 80

12. Print the number of fields in every line followed by the line itself:
{ print NF, $0 }

13. Print the first two fields, in opposite order, of every line:
{ print $2, $1 }

14. Exchange the first two fields of every line and then print the line:
{ temp = $1; $1 ~ $2; $2 = temp; print }

15. Print every line with the first field replaced by the line number:
{ $1 = NR; print }

16. Print every line after erasing the second field:
{ $2 = ""; print }

17. Print in reverse order the fields of every line:
{ for (i = NF; i > 0; i = i - 1) printf("%s " $i)
printf ( "\n" )
}

18. Print the sums of the fields of every line:
{ sum= 0
for (i = 1; i <= NF; i = i + 1) sum sum + $i
print sum
}

19. Add up all fields in all lines and print the sum:
{ for (i = 1; i <= NF; i = i + 1) sum= sum+ Si }
END { print sum }

20. Print every line after replacing each field by its absolute value:
{ for (i = 1; i <= NF; i = i + 1) if ($i < 0) Si -$i
print
}

# AWK Summary of Patterns
1. BEGIN { statements }
The statements are executed once before any input has been read.

2. END { statements }
The statements are executed once after all input has been read.

3. expression { statements }
The statements are executed 'lt each input line where the expression is true, that is,
nonzero or nonnull.

4. /regular expression I { statements }
The statements are executed at each input line that contains a string matched by the
regular expression.

5. compound pattern { statements }
A compound pattern combines expressions with && (AND), II (OR), I (NOT), and
parentheses; the statements are executed at each input line where the compound
pattern is true.

6. pattern 1 , pattern 2 { statements }
A range pattern matches each input line from a line matched by pattern 1 to the next
line matched by pattern 2, inclusive; the statements are executed at each matching
line.

BEGIN and END do not combine with other patterns. A range pattern cannot be part of
any other pattern. BEGIN and END are the only patterns that require an action.

# AWK String-Matching Patterns
1. /regexpr /
Matches when the current input line contains a substring matched by regexpr.

2. expression - /regexpr /
Matches if the string value of expression contains a substring matched by regexpr.

3. expression I - /regexpr /
Matches if the string value of expression does not contain a substring matched by
regexpr.

Any expression may be used in place of /regexpr / in the context of - and I -.

# AWK Actions
The statements in actions can include:
expressions, with constants, variables, assignments, function calls, etc.
print expression -list
printf (format, expression -list)
if (expression) statement
if (expression) statement else statement
while (expression) statement
for (expression ; expression ; expression) statement
for (variable in array) statement
do statement while (expression)
break
continue
next
exit
exit expression
{ statements }

VARIABLE MEANING DEFAULT
ARGC number of command-line arguments
ARGV array of command-line arguments
FILENAME name of current input file
FNR record number in current file
FS controls the input field separator " "
NF number of fields in current record
NR number of records read so far
OFMT output format for numbers "%.6g"
OFS output field separator II II
ORS output record separator 11\n"
RLENGTH length of string matched by match function
RS controls the input record separator "\n"
RSTART start of string matched by match function
SUBSEP subscript separator "\034"

TABLE 2-6. BUILT-IN ARITHMETIC FUNCTIONS
FUNCTION
atan2(y,x)
cos(x)
exp(x)
int(x)
log(x)
rand()
sin(x)
sqrt(x)
srand(x)
VALUE RETURNED
arctangent of yl x in the range --;r to 1r
cosine of x, with x in radians
exponential function of x, ex
integer part of x; truncated towards 0 when x > 0
natural (base e) logarithm of x
random number r, where 0 ~ r < 1
sine of x, with x in radians
square root of x
x is new seed for rand ( )

BUILT-IN STRING FUNCTIONS
FUNCTION                        DESCRIPTION
gsub(r,s)                       substitute s for r globally in $0,
                                    return number of substitutions made
gsub(r ,s ,t)                   substitutes for r globally in string t,
                                    return number of substitutions made
index(s ,t)                     return first position of string t in s, or 0 if t is not present
length(s)                       return number of characters in s
match(s ,r)                     test whether s contains a substring matched by r,
                                    return index or 0; sets RSTART and RLENGTH
split(s ,a)                     split s into array a on FS, return number of fields
split(s ,a ,fs)                 splits into array a on field separator fs,
                                    return number of fields
sprint£ <Jmt , expr -list )     return expr -list formatted according to format string fmt
sub(r ,s) ·                     substitutes for the leftmost longest substring of $0
                                    matched by r, return number of substitutions made
sub(r ,s ,t)                    substitute s for the leftmost longest substring oft
                                    matched by r, return number of substitutions made
substr (s ,p)                   return suffix of s starting at position p
substr (s ,p ,n)                return substring of s of length n starting at position p

